<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>minio+springboot图片的上传下载</title>
      <link href="/2023/05/24/minio-springboot-tu-pian-de-shang-chuan-xia-zai/"/>
      <url>/2023/05/24/minio-springboot-tu-pian-de-shang-chuan-xia-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面已经在虚拟机中搭建了minio文件存储服务器。现在我们就通过springboot向文件服务器中上传和下载图片</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li><p>首先，确保你已经在Spring Boot项目中添加了MinIO的依赖。你可以在<code>pom.xml</code>文件中添加以下依赖项：</p><pre class=" language-xml"><code class="language-xml">         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.7.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ol><p>2.在<code>application.properties</code>文件（或者<code>application.yml</code>）中配置MinIO的连接信息。你需要提供MinIO服务器的地址、端口、凭据等信息。例如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># MinIO配置</span><span class="token key atrule">minio</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.109.102<span class="token punctuation">:</span><span class="token number">9090</span>  <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> 1PBOZLWZ137LRL3307N8 <span class="token comment" spellcheck="true">#your-access-key</span>  <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> e+MnscuodRJ2ZQaO+LEgDy3DsT9E73JeFVjeDN7n <span class="token comment" spellcheck="true">#your-secret-key</span>  <span class="token key atrule">bucketName</span><span class="token punctuation">:</span> blog</code></pre><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><p>MinioConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>MinioClient<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年05月23日 16:32:54 * @packageName com.yangpeng.updownimage.config * @className MinioConfig * @describe TODO */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 访问地址     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${minio.endpoint}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String endpoint<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * accessKey类似于用户ID，用于唯一标识你的账户     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${minio.accessKey}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String accessKey<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * secretKey是你账户的密码     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${minio.secretKey}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String secretKey<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 默认存储桶     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${minio.bucketName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String bucketName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MinioClient <span class="token function">minioClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MinioClient minioClient <span class="token operator">=</span> MinioClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MinioUtils.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>date<span class="token punctuation">.</span>DateUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>Bucket<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>DeleteObject<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>RequiredArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>BASE64Decoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLDecoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年05月23日 16:36:51 * @packageName com.yangpeng.updownimage.utils * @className MinioUtils * @describe MinIO工具类 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MinioClient minioClient<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/******************************  Operate Bucket Start  ******************************/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InputStream <span class="token function">base64ToInputStream</span><span class="token punctuation">(</span>String base64<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ByteArrayInputStream stream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decodeBuffer</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stream<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 启动SpringBoot容器的时候初始化Bucket     * 如果没有Bucket则创建     *     * @param bucketName     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createBucket</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">bucketExists</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minioClient<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span>MakeBucketArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断Bucket是否存在，true：存在，false：不存在     *     * @param bucketName     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">bucketExists</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span>BucketExistsArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得Bucket的策略     *     * @param bucketName     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getBucketPolicy</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">getBucketPolicy</span><span class="token punctuation">(</span>GetBucketPolicyArgs                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得所有Bucket列表     *     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Bucket<span class="token operator">></span> <span class="token function">getAllBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">listBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据bucketName获取其相关信息     *     * @param bucketName     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Optional<span class="token operator">&lt;</span>Bucket<span class="token operator">></span> <span class="token function">getBucket</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getAllBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>b <span class="token operator">-</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/******************************  Operate Bucket End  ******************************/</span>    <span class="token comment" spellcheck="true">/******************************  Operate Files Start  ******************************/</span>    <span class="token comment" spellcheck="true">/**     * 根据bucketName删除Bucket，true：删除成功； false：删除失败，文件或已不存在     *     * @param bucketName     * @throws Exception     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeBucket</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        minioClient<span class="token punctuation">.</span><span class="token function">removeBucket</span><span class="token punctuation">(</span>RemoveBucketArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断文件是否存在     *     * @param bucketName     * @param objectName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isObjectExist</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> exist <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            minioClient<span class="token punctuation">.</span><span class="token function">statObject</span><span class="token punctuation">(</span>StatObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[Minio工具类]>>>> 判断文件是否存在, 异常："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> exist<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断文件夹是否存在     *     * @param bucketName     * @param objectName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFolderExist</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Iterable<span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span>Item<span class="token operator">>></span> results <span class="token operator">=</span> minioClient<span class="token punctuation">.</span><span class="token function">listObjects</span><span class="token punctuation">(</span>                    ListObjectsArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recursive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Result<span class="token operator">&lt;</span>Item<span class="token operator">></span> result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Item item <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> objectName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">objectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    exist <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[Minio工具类]>>>> 判断文件夹是否存在，异常："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> exist<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据文件前置查询文件     *     * @param bucketName 存储桶     * @param prefix     前缀     * @param recursive  是否使用递归查询     * @return MinioItem 列表     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">getAllObjectsByPrefix</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span>                                            String prefix<span class="token punctuation">,</span>                                            <span class="token keyword">boolean</span> recursive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Item<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterable<span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span>Item<span class="token operator">>></span> objectsIterator <span class="token operator">=</span> minioClient<span class="token punctuation">.</span><span class="token function">listObjects</span><span class="token punctuation">(</span>                ListObjectsArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recursive</span><span class="token punctuation">(</span>recursive<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>objectsIterator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Result<span class="token operator">&lt;</span>Item<span class="token operator">></span> o <span class="token operator">:</span> objectsIterator<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Item item <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取文件流     *     * @param bucketName 存储桶     * @param objectName 文件名     * @return 二进制流     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> InputStream <span class="token function">getObject</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>                GetObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 断点下载     *     * @param bucketName 存储桶     * @param objectName 文件名称     * @param offset     起始字节的位置     * @param length     要读取的长度     * @return 二进制流     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> InputStream <span class="token function">getObject</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>                GetObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取路径下文件列表     *     * @param bucketName 存储桶     * @param prefix     文件名称     * @param recursive  是否递归查找，false：模拟文件夹结构查找     * @return 二进制流     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span>Item<span class="token operator">>></span> <span class="token function">listObjects</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String prefix<span class="token punctuation">,</span> <span class="token keyword">boolean</span> recursive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">listObjects</span><span class="token punctuation">(</span>                ListObjectsArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">recursive</span><span class="token punctuation">(</span>recursive<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用MultipartFile进行文件上传     *     * @param bucketName  存储桶     * @param file        文件名     * @param objectName  对象名     * @param contentType 类型     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">uploadFile</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> MultipartFile file<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> String contentType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>                PutObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 图片上传     *     * @param bucketName     * @param imageBase64     * @param imageName     * @return     */</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">uploadImage</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String imageBase64<span class="token punctuation">,</span> String imageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>imageBase64<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            InputStream in <span class="token operator">=</span> <span class="token function">base64ToInputStream</span><span class="token punctuation">(</span>imageBase64<span class="token punctuation">)</span><span class="token punctuation">;</span>            String newName <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> imageName <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">;</span>            String year <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">thisYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String month <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">thisMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> year <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> newName<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 上传本地文件     *     * @param bucketName 存储桶     * @param objectName 对象名称     * @param fileName   本地文件路径     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">uploadFile</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">uploadObject</span><span class="token punctuation">(</span>                UploadObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过流上传文件     *     * @param bucketName  存储桶     * @param objectName  文件对象     * @param inputStream 文件流     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">uploadFile</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> InputStream inputStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>                PutObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建文件夹或目录     *     * @param bucketName 存储桶     * @param objectName 目录路径     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">createDir</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>                PutObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取文件信息, 如果抛出异常则说明文件不存在     *     * @param bucketName 存储桶     * @param objectName 文件名称     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getFileStatusInfo</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">statObject</span><span class="token punctuation">(</span>                StatObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 拷贝文件     *     * @param bucketName    存储桶     * @param objectName    文件名     * @param srcBucketName 目标存储桶     * @param srcObjectName 目标文件名     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">copyFile</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> String srcBucketName<span class="token punctuation">,</span> String srcObjectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">copyObject</span><span class="token punctuation">(</span>                CopyObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>CopySource<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>srcBucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>srcObjectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除文件     *     * @param bucketName 存储桶     * @param objectName 文件名称     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeFile</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        minioClient<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>                RemoveObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量删除文件     *     * @param bucketName 存储桶     * @param keys       需要删除的文件列表     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeFiles</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>DeleteObject<span class="token operator">></span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            objects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">removeFile</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[Minio工具类]>>>> 批量删除文件，异常："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取文件外链     *     * @param bucketName 存储桶     * @param objectName 文件名     * @param expires    过期时间 &lt;=7 秒 （外链有效时间（单位：秒））     * @return url     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> Integer expires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GetPresignedObjectUrlArgs args <span class="token operator">=</span> GetPresignedObjectUrlArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expiry</span><span class="token punctuation">(</span>expires<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得文件外链     *     * @param bucketName     * @param objectName     * @return url     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GetPresignedObjectUrlArgs args <span class="token operator">=</span> GetPresignedObjectUrlArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将URLDecoder编码转成UTF8     *     * @param str     * @return     * @throws UnsupportedEncodingException     */</span>    <span class="token keyword">public</span> String <span class="token function">getUtf8ByURLDecoder</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>        String url <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"%(?![0-9a-fA-F]{2})"</span><span class="token punctuation">,</span> <span class="token string">"%25"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OssController.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>config<span class="token punctuation">.</span>MinioConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>MinioUtils<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>ObjectWriteResponse<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>http<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>IOUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年05月23日 16:41:14 * @packageName com.yangpeng.updownimage.controller * @className OssController * @describe TODO */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/oss"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MinioUtils minioUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MinioConfig minioConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/upload"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> <span class="token string">"multipart/*"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//文件名</span>            String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            String newFileName = RandomUtil.randomStringUpper(10) + "." + StringUtils.substringAfterLast(fileName, ".");</span>            String newFileName <span class="token operator">=</span> fileName<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//类型</span>            String contentType <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectWriteResponse objectWriteResponse <span class="token operator">=</span> minioUtils<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span>minioConfig<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> newFileName<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>objectWriteResponse<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            throw new AppException(AppExceptionCodeMsg.NOT_FOUND);</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        minioUtils<span class="token punctuation">.</span><span class="token function">removeFile</span><span class="token punctuation">(</span>minioConfig<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getFileStatusInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioUtils<span class="token punctuation">.</span><span class="token function">getFileStatusInfo</span><span class="token punctuation">(</span>minioConfig<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/url"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioUtils<span class="token punctuation">.</span><span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>minioConfig<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/download"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    @ApiOperation(value = "文件下载")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream fileInputStream <span class="token operator">=</span> minioUtils<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>minioConfig<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/force-download"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IOUtils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"下载失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241446427.png" alt="image-20230524144621676"></p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241448529.png" alt="image-20230524144831419"></p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241449559.png" alt="image-20230524144933783"></p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241450326.png" alt="image-20230524145053554"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker+minio+picgo搭建图床</title>
      <link href="/2023/05/24/docker-minio-picgo-da-jian-tu-chuang/"/>
      <url>/2023/05/24/docker-minio-picgo-da-jian-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MinIO是一个开源的对象存储服务器，它允许您构建私有的云存储服务。它是一个轻量级的、高性能的分布式存储系统，兼容Amazon S3（Simple Storage Service）API，可以用于存储和检索大规模的非结构化数据，例如图像、视频、日志文件、备份等。</p><h2 id="功能与特点"><a href="#功能与特点" class="headerlink" title="功能与特点"></a>功能与特点</h2><p>MinIO的设计目标是提供高度可扩展、易于部署和管理的对象存储解决方案。它具有以下特点：</p><ol><li>高性能：MinIO使用并发、多线程和分布式架构，以实现高性能的对象存储服务。它支持水平扩展，可以根据需求添加更多的节点和存储容量。</li><li>可靠性：MinIO提供数据冗余和错误检测机制，以确保数据的安全性和可靠性。它支持数据备份、故障转移和容错处理，可以保护数据免受硬件故障或数据中心故障的影响。</li><li>兼容性：MinIO兼容Amazon S3 API，这意味着您可以使用现有的S3工具和应用程序与MinIO进行集成。它还支持其他一些常用的对象存储接口和协议，如NFS、HDFS、Azure Blob Storage等。</li><li>简单易用：MinIO具有简单的部署和配置过程，可以在几分钟内设置一个可用的对象存储服务器。它提供直观的Web管理界面和命令行工具，使您能够轻松管理和监控存储服务。</li><li>开源：MinIO是开源软件，基于Apache License 2.0开源许可证发布。这意味着您可以自由地使用、修改和分发MinIO的源代码。</li></ol><p>总之，MinIO是一个开源的、高性能的对象存储服务器，具有可靠性、兼容性和易用性的特点，适用于构建私有云存储和分布式存储解决方案。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="1-docker部署minio"><a href="#1-docker部署minio" class="headerlink" title="1.docker部署minio"></a>1.docker部署minio</h3><pre class=" language-bash"><code class="language-bash">docker run -p 9000:9000 -p 9090:9090 --name minio \-d --restart<span class="token operator">=</span>always \-e MINIO_ACCESS_KEY<span class="token operator">=</span>admin \-e MINIO_SECRET_KEY<span class="token operator">=</span>2022@minio \-v /usr/dockersys/minio/data:/data \-v /usr/dockersys/minio/config:/root/.minio \minio/minio server /data --console-address <span class="token string">":9000"</span> --address <span class="token string">":9090"</span></code></pre><p>这个命令将以后台模式（-d）运行MinIO容器，并将容器的9000端口映射到主机的9000端口，以及将容器的9090端口映射到主机的9090端口。容器的名称设置为minio（–name minio），并配置了容器的自动重启（–restart=always）。</p><p>还通过环境变量（-e）设置了MinIO的访问密钥（MINIO_ACCESS_KEY）和秘钥（MINIO_SECRET_KEY）。</p><p>使用了两个数据卷（-v）来映射主机上的目录到容器内部，一个用于存储MinIO的数据（/usr/dockersys/minio/data:/data），另一个用于存储MinIO的配置文件（/usr/dockersys/minio/config:/root/.minio）。</p><p><code>minio/minio server /data</code>命令中的<code>server</code>参数指定以单机模式运行MinIO服务器，而<code>/data</code>参数指定MinIO服务器的存储目录为<code>/data</code>。</p><p>最后，指定了MinIO服务器的参数，包括控制台地址（–console-address “:9000”）和监听地址（–address “:9090”）。</p><p>运行此命令后，MinIO容器将在后台启动，并可以通过浏览器访问控制台地址（<a href="http://localhost:9000）来管理和访问MinIO对象存储。/">http://localhost:9000）来管理和访问MinIO对象存储。</a></p><h3 id="2-登录minio后操作"><a href="#2-登录minio后操作" class="headerlink" title="2.登录minio后操作"></a>2.登录minio后操作</h3><p>输入账号密码，进入管理界面，点击左边的Buckets，右面新建一个Bucket：</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241004810.png" alt="image-20230524100441475"></p><p>点击刚刚创建好的Buckets，进入配置，点击最下面Access Rules：</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241005308.png" alt="image-20230524100512399"></p><p>然后添加一条规则：设置一个名字，然后更改权限位readwrite。</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241007077.png" alt="image-20230524100700052"></p><p>着返回buckets的主页，点击access policy下的private：</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241007419.png" alt="image-20230524100756716"></p><p>接下来配置access key，点击左边菜单栏的Access Keys，新建一个key：</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241008284.png" alt="image-20230524100848626"></p><h3 id="3-picgo中配置"><a href="#3-picgo中配置" class="headerlink" title="3.picgo中配置"></a>3.picgo中配置</h3><p>安装插件</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241011113.png" alt="image-20230524101114417"></p><p>配置环境</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241015901.png" alt="image-20230524101531828"></p><p>图片上传</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241029717.png" alt="image-20230524102926431"></p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305241030205.png" alt="image-20230524103013963"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> minio </tag>
            
            <tag> docker </tag>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java图片上传和预览</title>
      <link href="/2023/05/23/java-tu-pian-shang-chuan-he-yu-lan/"/>
      <url>/2023/05/23/java-tu-pian-shang-chuan-he-yu-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在SpringBoot项目中我们经常需要上传图片到服务器，同时也需要提供一个接口用于在线预览上传到服务器上的图片。在这里我们就通过Java代码实现，然后用postman做测试。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>controller代码实现</p><pre class=" language-java"><code class="language-java">#创建文件目录 <span class="token keyword">private</span> <span class="token keyword">static</span> File <span class="token function">mkdirsmy</span><span class="token punctuation">(</span>String extName<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前日期时间</span>        LocalDateTime currentDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建日期时间格式化器</span>        DateTimeFormatter formatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmssSSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 格式化输出当前日期时间</span>        String formattedDateTime <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前日期时间："</span> <span class="token operator">+</span> formattedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前年份</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前月份</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以两位数的形式输出月份、日期、小时、分钟和毫秒</span>        String formattedMonth <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%02d"</span><span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>        String originPath <span class="token operator">=</span> <span class="token string">"C:\\Users\\37656\\Desktop\\bat"</span><span class="token punctuation">;</span>        String filePath <span class="token operator">=</span> originPath <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> formattedMonth<span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> formattedDateTime <span class="token operator">+</span> extName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//完整文件路径</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//        返回上传路径</span>        <span class="token keyword">return</span> file<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//图片上传</span> <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String extName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 扩展名格式：</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            extName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>FILE_FORMAT_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File destinationFile <span class="token operator">=</span> <span class="token function">mkdirsmy</span><span class="token punctuation">(</span>extName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取目标文件路径</span>            InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取源文件输入流</span>            Path path <span class="token operator">=</span> destinationFile<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将输入流写入目标文件</span>            Files<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> path<span class="token punctuation">,</span> StandardCopyOption<span class="token punctuation">.</span>REPLACE_EXISTING<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">,</span>destinationFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AppException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//图片预览</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/images/{imageName}"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Resource<span class="token operator">></span> <span class="token function">previewImage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String imageName<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取图片文件路径</span>        String imagePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\37656\\Desktop\\bat\\2023\\05\\"</span> <span class="token operator">+</span> imageName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建文件对象</span>        File imageFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>imagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>imageFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用FileSystemResource创建资源对象</span>            Resource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>imageFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置响应的Content-Type为图片类型</span>            String contentType <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">probeContentType</span><span class="token punctuation">(</span>imageFile<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回响应实体</span>            <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span><span class="token function">parseMediaType</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230523152624357.png" alt="image-20230523152624357"></p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230523152712416.png" alt="image-20230523152712416"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java统一结果返回和异常处理</title>
      <link href="/2023/05/23/java-tong-yi-jie-guo-fan-hui-he-yi-chang-chu-li/"/>
      <url>/2023/05/23/java-tong-yi-jie-guo-fan-hui-he-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Java中，可以使用统一结果返回和异常处理的模式来处理方法的执行结果和异常情况。这种模式的目的是在代码中统一处理和管理方法的返回结果，以及捕获和处理可能发生的异常，使代码更加清晰、可读和可维护。</p><p>统一结果返回指的是将方法的执行结果封装在一个统一的数据结构中进行返回。通常使用一个包含两个字段的类，一个表示执行结果的状态（如成功、失败、异常等），另一个表示返回的数据或错误信息。这样可以减少方法返回值的种类，提高代码的可读性和可维护性。</p><p>异常处理是指通过捕获和处理异常，避免程序在运行过程中出现崩溃或不可预料的错误。Java中的异常处理机制使用了try-catch语句块。在try块中放置可能引发异常的代码，而在catch块中捕获并处理异常。通过使用catch块，可以在发生异常时采取相应的措施，如记录日志、返回错误信息或进行其他处理操作。</p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>以SpringBoot项目为例，导入包</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>创建统一信息返回类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    返回码</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    返回提示</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    返回数据</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    成功</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Result <span class="token function">success</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"成功"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Result <span class="token function">success</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//失败</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Result <span class="token function">error</span><span class="token punctuation">(</span>AppExceptionCodeMsg appExceptionCodeMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>appExceptionCodeMsg<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appExceptionCodeMsg<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>创建全局统一异常处理类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Result <span class="token function">exceptionHandler</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里先判断拦截到的Exception是不是我们自定义的异常类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">AppException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AppException appException <span class="token operator">=</span> <span class="token punctuation">(</span>AppException<span class="token punctuation">)</span> e<span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>appException<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appException<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果拦截的异常不是我们自定义的异常(例如：数据库主键冲突)</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> AppExceptionCodeMsg<span class="token punctuation">.</span>ERROR<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建一个枚举类型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这个枚举类中定义的都是跟业务有关的异常</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">enum</span> AppExceptionCodeMsg <span class="token punctuation">{</span>    <span class="token function">INVALID_CODE</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">"验证码无效"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USERNAME_NOT_EXISTS</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">"用户名不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USER_CREDIT_NOT_ENOUTH</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span><span class="token string">"用户积分不足"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FAIL</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"服务器异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">UNAUTHORIZED</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"未认证（签名错误）"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FORBIDDEN</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token string">"禁止访问"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NOT_FOUND</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">"接口不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AUTH_ERROR</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">"鉴权登陆失败，请重新登录！"</span><span class="token punctuation">)</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code <span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg <span class="token punctuation">;</span>    <span class="token function">AppExceptionCodeMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建自定义的异常类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AppException</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg appExceptionCodeMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> appExceptionCodeMsg<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> appExceptionCodeMsg<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建一个controller,进行测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/file"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">demo1</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"succ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//抛业务相关的异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>USERNAME_NOT_EXISTS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"errcode"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>INVALID_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//检查用户积分是否足够，如果不够，就抛出异常</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"notenough"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>USER_CREDIT_NOT_ENOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis使用</title>
      <link href="/2023/05/22/redis-shi-yong/"/>
      <url>/2023/05/22/redis-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis（Remote Dictionary Server）是一个开源的内存数据存储系统，也被称为数据结构服务器。它提供了一个高性能的键值存储解决方案，并支持多种数据结构，如字符串、哈希表、列表、集合、有序集合等。</p><h2 id="特点和功能"><a href="#特点和功能" class="headerlink" title="特点和功能"></a>特点和功能</h2><ol><li>内存存储：Redis的主要特点是将数据存储在内存中，这使得它能够实现快速读写操作。它也支持将数据持久化到磁盘，以防止数据丢失。</li><li>高性能：由于数据存储在内存中，并使用了高效的数据结构和算法，Redis提供了快速的读写性能。它还支持并发操作，并具有高吞吐量。</li><li>数据结构丰富：Redis支持多种数据结构，如字符串、哈希表、列表、集合、有序集合等。这使得开发人员能够使用适当的数据结构来解决不同类型的问题。</li><li>发布/订阅：Redis支持发布/订阅模式，允许多个客户端订阅指定的频道并接收消息。这使得它非常适合构建实时消息系统和事件驱动的应用程序。</li><li>数据持久化：Redis提供了两种持久化方式：RDB（Redis Database）和AOF（Append-Only File）。RDB使用快照方式将数据保存到磁盘，AOF则记录每个写操作的日志。</li><li>分布式缓存：由于其高性能和可扩展性，Redis广泛用作分布式缓存系统。它可以通过设置过期时间和淘汰策略来管理缓存数据。</li><li>原子操作：Redis支持原子操作，即对数据的读写操作是原子性的。这使得它适用于需要保证数据一致性和并发控制的应用场景。</li><li>多语言支持：Redis支持多种编程语言，如Java、Python、Node.js等，提供了丰富的客户端库和API，便于开发人员使用。</li></ol><p>Redis在许多场景中被广泛应用，如缓存系统、会话存储、实时排行榜、消息队列、分布式锁等。它的简单性、高性能和丰富的功能使得它成为了一个流行的数据存储解决方案。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>以下是一些常用的Redis命令：</p><ol><li>数据操作：</li></ol><ul><li><code>SET key value</code>：设置指定键的值。</li><li><code>GET key</code>：获取指定键的值。</li><li><code>DEL key</code>：删除指定的键。</li><li><code>EXISTS key</code>：检查键是否存在。</li><li><code>KEYS pattern</code>：查找符合指定模式的键。</li><li><code>TTL key</code>：获取键的生存时间。</li></ul><ol><li>列表操作：</li></ol><ul><li><code>LPUSH key value1 value2</code>：将一个或多个值插入到列表的左侧。</li><li><code>RPUSH key value1 value2</code>：将一个或多个值插入到列表的右侧。</li><li><code>LPOP key</code>：移除并返回列表左侧的元素。</li><li><code>RPOP key</code>：移除并返回列表右侧的元素。</li><li><code>LLEN key</code>：获取列表的长度。</li></ul><ol><li>哈希操作：</li></ol><ul><li><code>HSET key field value</code>：设置哈希中指定字段的值。</li><li><code>HGET key field</code>：获取哈希中指定字段的值。</li><li><code>HDEL key field1 field2</code>：删除哈希中的一个或多个字段。</li><li><code>HGETALL key</code>：获取哈希中所有字段和值的列表。</li></ul><ol><li>集合操作：</li></ol><ul><li><code>SADD key member1 member2</code>：向集合添加一个或多个成员。</li><li><code>SMEMBERS key</code>：获取集合中的所有成员。</li><li><code>SREM key member1 member2</code>：从集合中移除一个或多个成员。</li></ul><ol><li>有序集合操作：</li></ol><ul><li><code>ZADD key score1 member1 score2 member2</code>：向有序集合添加一个或多个成员。</li><li><code>ZRANGE key start stop</code>：按照索引范围获取有序集合的成员。</li></ul><p>这些只是Redis的一些常见命令示例。Redis还有很多其他强大的功能和命令，如事务、发布/订阅、过期时间设置等。</p><h2 id="redis-conf配置文件解读"><a href="#redis-conf配置文件解读" class="headerlink" title="redis.conf配置文件解读"></a>redis.conf配置文件解读</h2><p>Redis的配置文件 <code>redis.conf</code> 包含了许多配置选项，用于控制Redis服务器的行为。下面是一些常见配置选项的解读：</p><ol><li><code>bind</code>：指定Redis服务器绑定的IP地址。默认为127.0.0.1，表示只允许本地访问。如果要允许远程访问，可以将其设置为0.0.0.0。</li><li><code>port</code>：指定Redis服务器监听的端口号。默认为6379。</li><li><code>requirepass</code>：设置Redis服务器的密码。如果启用了密码验证，客户端连接到服务器时需要提供密码才能进行操作。</li><li><code>maxclients</code>：指定允许同时连接到Redis服务器的最大客户端数量。</li><li><code>timeout</code>：指定客户端连接的超时时间，单位为秒。如果客户端在指定时间内没有发送任何请求，服务器将关闭连接。</li><li><code>logfile</code>：指定日志文件的路径。可以将Redis的日志记录到指定的文件中，方便进行故障排查和日志分析。</li><li><code>databases</code>：指定Redis服务器支持的数据库数量。默认为16个数据库，可以通过选择不同的数据库索引进行数据存储。</li><li><code>snapshotting</code>：配置RDB持久化和AOF持久化选项，包括<code>save</code>、<code>stop-writes-on-bgsave-error</code>、<code>rdbcompression</code>、<code>appendonly</code>等。</li><li><code>maxmemory</code>：设置Redis服务器使用的最大内存限制。可以根据需要进行配置，达到限制时可以使用淘汰策略来回收内存。</li><li><code>replication</code>：配置Redis服务器的主从复制，包括<code>slaveof</code>、<code>masterauth</code>、<code>replica-serve-stale-data</code>等选项。</li><li><code>security</code>：配置与安全相关的选项，如<code>protected-mode</code>、<code>rename-command</code>、<code>rename-config</code>等。</li></ol><p>这些只是Redis配置文件中的一部分选项，还有许多其他选项用于调整Redis服务器的行为和性能。你可以查阅Redis官方文档以获取更详细的配置选项和说明。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker的使用</title>
      <link href="/2023/05/22/docker-de-shi-yong/"/>
      <url>/2023/05/22/docker-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Docker是一个开源的容器化平台，用于构建、部署和运行应用程序。它提供了一种轻量级、可移植且自包含的容器化技术，使应用程序在不同的环境中具有一致的运行方式。</p><h2 id="特点和功能"><a href="#特点和功能" class="headerlink" title="特点和功能"></a>特点和功能</h2><ol><li>容器化：Docker利用容器化技术，将应用程序及其依赖项打包到一个独立的容器中。每个容器都是一个隔离的运行环境，具有自己的文件系统、网络和进程空间。容器化使得应用程序可以在不同的环境中快速部署和运行，而不受底层操作系统和硬件的限制。</li><li>轻量级和快速启动：Docker容器相对于传统的虚拟机更加轻量级，因为它们共享宿主机的操作系统内核。这使得容器的启动和停止过程非常快速，几乎可以在秒级完成。</li><li>可移植性：Docker容器可以在不同的环境中运行，包括开发、测试和生产环境。容器提供了一个一致的运行时环境，确保应用程序在不同的平台和操作系统上具有相同的行为。</li><li>高度可扩展：Docker容器可以很容易地进行水平扩展，通过创建和部署多个容器实例来处理高负载和大规模的应用程序。Docker还提供了一些工具和功能来管理容器集群，如Docker Swarm和Kubernetes。</li><li>镜像管理：Docker使用镜像来构建容器。镜像是一个只读的文件，包含了运行应用程序所需的所有文件和依赖项。Docker提供了一个集中的镜像仓库（Docker Hub）和本地镜像仓库，使镜像的创建、共享和管理变得简单。</li><li>开放和生态系统：Docker是一个开放的平台，有一个庞大的社区支持。它提供了丰富的工具、API和插件生态系统，使开发人员可以根据自己的需求扩展和定制Docker。</li></ol><p>Docker的出现极大地改变了应用程序的交付和部署方式。它简化了应用程序的打包、分发和管理过程，提高了开发和运维的效率，同时提供了更高的可移植性和可扩展性。</p><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><h3 id="1-卸载旧版本"><a href="#1-卸载旧版本" class="headerlink" title="1.卸载旧版本"></a>1.卸载旧版本</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><h3 id="2-安装所需要的包"><a href="#2-安装所需要的包" class="headerlink" title="2.安装所需要的包"></a>2.安装所需要的包</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils</code></pre><h3 id="3-设置镜像仓库"><a href="#3-设置镜像仓库" class="headerlink" title="3.设置镜像仓库"></a>3.设置镜像仓库</h3><pre class=" language-bash"><code class="language-bash">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库） yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）</code></pre><h3 id="4-选择docker版本并安装"><a href="#4-选择docker版本并安装" class="headerlink" title="4.选择docker版本并安装"></a>4.选择docker版本并安装</h3><pre class=" language-bash"><code class="language-bash">yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r</code></pre><h3 id="5-选择一个版本并安装："><a href="#5-选择一个版本并安装：" class="headerlink" title="5.选择一个版本并安装："></a>5.选择一个版本并安装：</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># yum install docker-ce-版本号</span>yum -y <span class="token function">install</span> docker-ce-18.03.1.ce</code></pre><h3 id="6-查看安装成功"><a href="#6-查看安装成功" class="headerlink" title="6.查看安装成功"></a>6.查看安装成功</h3><pre class=" language-bash"><code class="language-bash">docker info</code></pre><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230522103710528.png" alt="image-20230522103710528"></p><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><h3 id="1-镜像相关命令："><a href="#1-镜像相关命令：" class="headerlink" title="1.镜像相关命令："></a>1.镜像相关命令：</h3><ul><li><p>docker images：列出本地的镜像列表。</p></li><li><p>docker pull <image_name>：从Docker镜像仓库中拉取镜像。</p></li><li><p>docker build -t <image_name> <dockerfile_path>`：根据Dockerfile构建镜像。</p></li><li><p>docker push <image_name>：将镜像推送到Docker镜像仓库。</p></li></ul><h3 id="2-容器相关命令："><a href="#2-容器相关命令：" class="headerlink" title="2.容器相关命令："></a>2.容器相关命令：</h3><ul><li><code>docker run &lt;image_name&gt;</code>：创建并运行一个基于镜像的容器。</li><li><code>docker ps</code>：列出当前正在运行的容器列表。</li><li><code>docker stop &lt;container_id/container_name&gt;</code>：停止一个容器的运行。</li><li><code>docker start &lt;container_id/container_name&gt;</code>：启动一个已停止的容器。</li><li><code>docker restart &lt;container_id/container_name&gt;</code>：重启一个容器。</li><li><code>docker rm &lt;container_id/container_name&gt;</code>：删除一个容器。</li><li><code>docker exec -it &lt;container_id/container_name&gt; &lt;command&gt;</code>：在运行的容器中执行命令。</li></ul><h3 id="3-网络相关命令："><a href="#3-网络相关命令：" class="headerlink" title="3.网络相关命令："></a>3.网络相关命令：</h3><ul><li><code>docker network ls</code>：列出所有的网络。</li><li><code>docker network create &lt;network_name&gt;</code>：创建一个自定义网络。</li><li><code>docker network connect &lt;network_name&gt; &lt;container_id/container_name&gt;</code>：将容器连接到指定的网络。</li><li><code>docker network disconnect &lt;network_name&gt; &lt;container_id/container_name&gt;</code>：从指定的网络中断开容器连接。</li></ul><h3 id="4-日志和信息相关命令："><a href="#4-日志和信息相关命令：" class="headerlink" title="4.日志和信息相关命令："></a>4.日志和信息相关命令：</h3><ul><li><code>docker logs &lt;container_id/container_name&gt;</code>：查看容器的日志。</li><li><code>docker inspect &lt;container_id/container_name&gt;</code>：获取容器的详细信息。</li></ul><h3 id="5-其他常用命令："><a href="#5-其他常用命令：" class="headerlink" title="5.其他常用命令："></a>5.其他常用命令：</h3><ul><li><code>docker-compose up</code>：使用Docker Compose启动应用程序。</li><li><code>docker-compose down</code>：使用Docker Compose停止并删除应用程序的容器。</li></ul><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://3b6vt78q.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre><h2 id="快速部署常用容器"><a href="#快速部署常用容器" class="headerlink" title="快速部署常用容器"></a>快速部署常用容器</h2><p>1.要使用Docker部署一个带密码的Redis容器，可以使用以下命令</p><pre class=" language-bash"><code class="language-bash">docker run -d --name redis -p 6379:6379 -e REDIS_PASSWORD<span class="token operator">=</span><span class="token operator">&lt;</span>your_password<span class="token operator">></span> redis</code></pre><p>2.部署MySQL</p><pre class=" language-bash"><code class="language-bash">docker run --name mysql  -p 3306:3306 -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token operator">&lt;</span>your_password<span class="token operator">></span> -d mysql</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署chatGPT</title>
      <link href="/2023/05/21/docker-bu-shu-chatgpt/"/>
      <url>/2023/05/21/docker-bu-shu-chatgpt/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于国内chatGPT是禁止国内访问，但是毕竟chatGPT的出现正在颠覆许多行业，所以网上就有大佬实现了网页版 ChatGPT ，后端优化，绕过 Cloudflare。由此，借鉴GitHub开源项目，搭建自己本地的网页版chatGPT。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><pre class=" language-bash"><code class="language-bash">https://github.com/pengzhile/pandora.git</code></pre><h2 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h2><h3 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h3><pre class=" language-bash"><code class="language-bash">docker pull pengzhile/pandora</code></pre><h3 id="2-实例化容器"><a href="#2-实例化容器" class="headerlink" title="2.实例化容器"></a>2.实例化容器</h3><pre class=" language-bash"><code class="language-bash">docker run  -e PANDORA_CLOUD<span class="token operator">=</span>cloud -e PANDORA_SERVER<span class="token operator">=</span>0.0.0.0:8899 -p 8899:8899 -d pengzhile/pandora</code></pre><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230521220139615.png" alt="image-20230521220139615"></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230521220617533.png" alt="image-20230521220617533"></p><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230521220939263.png" alt="image-20230521220939263"></p><p>1.访问<a href="https://chat.openai.com/api/auth/session%E7%BD%91%E7%AB%99">https://chat.openai.com/api/auth/session网站</a></p><p>2.ctrl+f 搜索token</p><p>3.复制token的值，注意不要将双引号复制进去</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230521221300582.png" alt="image-20230521221300582"></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> chatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量下载网页图片</title>
      <link href="/2023/05/20/pi-liang-xia-zai-wang-ye-tu-pian/"/>
      <url>/2023/05/20/pi-liang-xia-zai-wang-ye-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>requests</code>是一个流行的Python第三方库，用于简化HTTP请求的发送和处理。它提供了一组简洁而强大的API，使得发送HTTP请求和处理响应变得简单和直观。</p><h2 id="功能与特点"><a href="#功能与特点" class="headerlink" title="功能与特点"></a>功能与特点</h2><ol><li>简洁而直观的API：<code>requests</code>库的API设计简单而直观，易于使用和理解。它提供了一组类似于HTTP方法（如GET、POST、PUT、DELETE）的函数，使得发送不同类型的请求变得简单明了。</li><li>支持常见的HTTP操作：<code>requests</code>库支持发送各种类型的HTTP请求，包括GET、POST、PUT、DELETE等。您可以轻松地指定URL、请求头、查询参数、请求体和其他相关信息。</li><li>自动化的会话管理：<code>requests</code>库提供了会话（Session）对象，使得在多个请求之间共享会话状态和Cookie变得容易。这对于模拟登录、保持会话状态和处理带有身份验证的请求非常有用。</li><li>内置的身份验证支持：<code>requests</code>库支持各种身份验证机制，包括基本身份验证（Basic Authentication）、摘要身份验证（Digest Authentication）和OAuth等。您可以轻松地提供身份验证凭据以进行请求。</li><li>强大的响应处理功能：<code>requests</code>库提供了丰富的功能来处理HTTP响应。您可以访问响应的状态码、头部信息和内容。它还提供了方便的方法来处理JSON响应、文件下载和流式响应等。</li><li>自动化的重定向处理：<code>requests</code>库自动处理HTTP重定向，并提供了配置选项来控制重定向的行为。您可以选择允许或禁止重定向，并设置最大重定向次数。</li><li>文件上传和下载支持：<code>requests</code>库支持文件上传和下载操作。您可以轻松地发送文件作为请求体或下载文件到本地文件系统。</li><li>可定制的请求和会话配置：<code>requests</code>库提供了一系列配置选项，使您能够自定义请求和会话的行为。您可以设置超时时间、代理、SSL验证、连接池大小等。</li></ol><p>总之，<code>requests</code>库的特点在于其简单易用的API设计、丰富的功能和灵活性。它成为了Python开发人员发送和处理HTTP请求的首选工具之一，并在Web开发、数据爬取和API交互等场景中广泛应用。</p><h2 id="requests函数库的使用"><a href="#requests函数库的使用" class="headerlink" title="requests函数库的使用"></a>requests函数库的使用</h2><h3 id="1-发送GET请求"><a href="#1-发送GET请求" class="headerlink" title="1.发送GET请求:"></a>1.发送GET请求:</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># 使用requests发送一个get请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印相应信心</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h3 id="2-发送POST请求："><a href="#2-发送POST请求：" class="headerlink" title="2.发送POST请求："></a>2.发送POST请求：</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># 请求参数</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'pass'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 发送post请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印了响应的状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印响应对象的类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：&lt;class 'requests.models.Response'></span><span class="token comment" spellcheck="true"># 打印响应的状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：200</span><span class="token comment" spellcheck="true"># 打印响应内容的类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：&lt;class 'str'></span><span class="token comment" spellcheck="true"># 打印响应头内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印响应头中的Content-Type字段值</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印请求头内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将响应对象的编码设置为utf-8</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token comment" spellcheck="true"># 打印响应内容（文本形式）</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印响应的Cookies</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印响应内容（字节形式）</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将字节形式的响应内容解码为utf-8编码的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="批量下载图片实例："><a href="#批量下载图片实例：" class="headerlink" title="批量下载图片实例："></a>批量下载图片实例：</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> response<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token comment" spellcheck="true"># 定义了目标网页的URL和请求头信息</span>index_url <span class="token operator">=</span> <span class="token string">"https://sc.chinaz.com/tupian/fengjing_6.html"</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '</span>                  <span class="token string">'(KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># requests.get()函数发送GET请求并获取响应</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>index_url<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将响应内容的编码设置为UTF-8</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token comment" spellcheck="true"># 使用response.text获取响应内容的文本形式，并将其赋值给变量text</span>text <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token comment" spellcheck="true"># print(text)</span><span class="token comment" spellcheck="true"># etree.HTML()函数创建一个XPath解析对象selector，以便后续的XPath查询和数据提取</span>selector <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用XPath表达式 //div/img/@data-original 和 //div/img/@alt 分别从网页中提取图片链接和图片的alt属性值</span>image_urls <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/img/@data-original'</span><span class="token punctuation">)</span>image_alts <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/img/@alt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个文件写入函数 'wb' 是打开文件的模式参数，其中 'w' 表示写入模式，而 'b' 表示二进制模式</span><span class="token keyword">def</span> <span class="token function">write_to_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>        file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 保存哪个目录下        </span>directory <span class="token operator">=</span> <span class="token string">"C:\\Users\\37656\\Desktop\\新建文件夹\\image\\img\\pachong"</span><span class="token keyword">for</span> url<span class="token punctuation">,</span>alt <span class="token keyword">in</span>  zip<span class="token punctuation">(</span>image_urls<span class="token punctuation">,</span>image_alts<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"https:"</span><span class="token operator">+</span>url<span class="token punctuation">)</span>    image_content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https:"</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content    file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>directory<span class="token punctuation">,</span><span class="token string">'{}.jpg'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>alt<span class="token punctuation">)</span><span class="token punctuation">)</span>    write_to_file<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>image_content<span class="token punctuation">)</span></code></pre><h3 id="效果图如下："><a href="#效果图如下：" class="headerlink" title="效果图如下："></a>效果图如下：</h3><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230520224459763.png"/>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests </tag>
            
            <tag> Python </tag>
            
            <tag> 批量图片下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式的使用</title>
      <link href="/2023/05/19/gong-han-mo-shi-de-shi-yong/"/>
      <url>/2023/05/19/gong-han-mo-shi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="工厂模式的定义"><a href="#工厂模式的定义" class="headerlink" title="工厂模式的定义"></a>工厂模式的定义</h2><p>​        工厂模式（Factory Pattern）是 Java 中最常用的<a href="https://so.csdn.net/so/search?q=%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F&spm=1001.2101.3001.7020">设计模式</a>之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><p>​        工厂顾名思义就是创建产品，根据产品是具体产品还是具体工厂可分为简单工厂模式和工厂方法模式，根据工厂的抽象程度可分为<strong>工厂方法模式</strong>和<strong>抽象工厂模式</strong>。该模式用于封装和管理对象的创建，是一种创建型模式。本文从一个具体的例子逐步深入分析，来体会三种工厂模式的应用场景和利弊。</p><p>​        通过工厂模式，将创建产品实例的权利移交工厂，我们不再通过new来创建我们所需的对象，而是通过工厂来获取我们需要的产品。降低了产品使用者与使用者之间的耦合关系</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305251103205.png" alt="image-20230525110342009"></p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305191447001.png"/><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><p>Phone类：手机标准规范类(AbstractProduct)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>MiPhone类：制造小米手机（Product1）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"make xiaomi phone!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>IPhone类：制造苹果手机（Product2）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPhone</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"make iphone!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>PhoneFactory类：手机代工厂（Factory）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Phone <span class="token function">makePhone</span><span class="token punctuation">(</span>String phoneType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>phoneType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"MiPhone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>phoneType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"iPhone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>演示</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>       PhoneFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Phone miPhone <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token string">"MiPhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// make xiaomi phone!</span>       IPhone iPhone <span class="token operator">=</span> <span class="token punctuation">(</span>IPhone<span class="token punctuation">)</span>factory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token string">"iPhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// make iphone!</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="简单工厂模式总结"><a href="#简单工厂模式总结" class="headerlink" title="简单工厂模式总结"></a><strong>简单工厂模式总结</strong></h3><p>优点：</p><p>简单工厂模式，封装了创建对象的逻辑，完成了创建对象逻辑与业务代码逻辑的解耦。试想客户端是多个service层的文件，对比不使用简单工厂模式，当我们要改变产生对象的逻辑时，需要在多个service文件中找到这部分代码进行修改。在使用简单工厂模式后，只需要修改简单工厂中生成对象的逻辑即可，不需要修改业务代码。完成了解耦。</p><p>缺点：</p><p>每当具体产品类的抽象产品类增多时，会需要在简单工厂类中新增关于新增产品类对象生成的方法。当抽象产品类很多时，抽象工厂会很臃肿。并且在这种情形下，SimpleFactory类也不符合开闭原则。</p><h2 id="工厂方法模式-Factory-Method"><a href="#工厂方法模式-Factory-Method" class="headerlink" title="工厂方法模式(Factory Method)"></a>工厂方法模式(Factory Method)</h2><p>和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，其UML<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E5%9B%BE&spm=1001.2101.3001.7020">类图</a>如下</p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305191448577.png"/><h3 id="编码实现-1"><a href="#编码实现-1" class="headerlink" title="编码实现"></a>编码实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象工厂 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFactory</span> <span class="token punctuation">{</span>    IProduct <span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象产品 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IProduct</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体产品A */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductA</span> <span class="token keyword">implements</span> <span class="token class-name">IProduct</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是productA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体产品B */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductB</span> <span class="token keyword">implements</span> <span class="token class-name">IProduct</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是ProductB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 生产ProductA的具体工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryA</span> <span class="token keyword">implements</span> <span class="token class-name">IFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IProduct <span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 生产ProductB的具体工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryB</span> <span class="token keyword">implements</span> <span class="token class-name">IFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IProduct <span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arges<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生产ProductA</span>        FactoryA factoryA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactoryA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factoryA<span class="token punctuation">.</span><span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="工厂方法模式适用场景"><a href="#工厂方法模式适用场景" class="headerlink" title="工厂方法模式适用场景"></a>工厂方法模式适用场景</h3><p>工厂方法模式和简单工厂模式虽然都是通过工厂来创建对象，他们之间最大的不同是——工厂方法模式在设计上完全完全符合“开闭原则”。</p><p>在以下情况下可以使用工厂方法模式：</p><p>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。</p><p>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</p><p>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</p><p>使用场景：</p><p>日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。</p><p>数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。</p><p>设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</p><p>比如 Hibernate 换数据库只需换方言和驱动就可以</p><h3 id="工厂方法模式总结"><a href="#工厂方法模式总结" class="headerlink" title="工厂方法模式总结"></a>工厂方法模式总结</h3><p>从简单工厂模式的讲述知道：简单工厂的一个缺点在于，每当需要新增产品时，都需要修改负责生产产品的SimpleFactory类，违背了“开闭原则”，并且会使SimpleFactory类十分的臃肿。而使用工厂方法模式后，当新增ProductC时，只需要对应创建具体产品类ProductC和负责生产ProductC的具体工厂FactoryC即可。符合“开闭原则”，便于扩展。</p><p>它的缺点在于：</p><p>（1）类的个数容易过多，增加复杂度</p><p>（2）实现抽象工厂接口的具体工厂只能生产出一种产品（可以用抽象工厂模式解决）</p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305251141998.png" alt="image-20230525114128720"></p><h3 id="编码实现-2"><a href="#编码实现-2" class="headerlink" title="编码实现"></a>编码实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象工厂 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    Basketball <span class="token function">makeBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Football <span class="token function">makeFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象产品族；篮球 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Basketball</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象产品族：足球 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Football</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体产品：李宁篮球 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiningBasketball</span> <span class="token keyword">implements</span> <span class="token class-name">Basketball</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是李宁篮球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** * 具体产品：李宁足球 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiningFootball</span> <span class="token keyword">implements</span> <span class="token class-name">Football</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是李宁足球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** * 具体产品：安踏篮球 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AntaBasketball</span> <span class="token keyword">implements</span> <span class="token class-name">Basketball</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是安踏篮球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** * 具体产品：安踏足球 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AntaFootball</span> <span class="token keyword">implements</span> <span class="token class-name">Football</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是安踏足球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体工厂，负责生产李宁篮球，李宁足球 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiningFactoy</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Basketball <span class="token function">makeBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LiningBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Football <span class="token function">makeFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LiningFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/** * 具体工厂，负责生产安踏篮球，安踏足球 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AntaFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Basketball <span class="token function">makeBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AntaBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Football <span class="token function">makeFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AntaFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生产李宁篮球和安踏足球</span>        LiningFactoy liningFactoy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LiningFactoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AntaFactory antaFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntaFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         liningFactoy<span class="token punctuation">.</span><span class="token function">makeBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        antaFactory<span class="token punctuation">.</span><span class="token function">makeFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="抽象工厂模式适用场景"><a href="#抽象工厂模式适用场景" class="headerlink" title="抽象工厂模式适用场景"></a>抽象工厂模式适用场景</h3><p>抽象工厂模式和工厂方法模式一样，都符合开闭原则。但是不同的是，工厂方法模式在增加一个具体产品的时候，都要增加对应的工厂。但是抽象工厂模式只有在新增一个类型的具体产品时才需要新增工厂。也就是说，工厂方法模式的一个工厂只能创建一个具体产品。而抽象工厂模式的一个工厂可以创建属于一类类型的多种具体产品。工厂创建产品的个数介于简单工厂模式和工厂方法模式之间。</p><p>在以下情况下可以使用抽象工厂模式：</p><p>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。</p><p>系统中有多于一个的产品族，而每次只使用其中某一产品族。</p><p>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</p><p>系统结构稳定，不会频繁的增加对象。</p><p>“开闭原则”的倾斜性</p><p>在抽象工厂模式中，增加新的产品族很方便，但是增加新的产品等级结构很麻烦，抽象工厂模式的这种性质称为<strong>“开闭原则”的倾斜性</strong>。“开闭原则”要求系统对扩展开放，对修改封闭，通过扩展达到增强其功能的目的，对于涉及到多个产品族与多个产品等级结构的系统，其功能增强包括两方面：</p><p>增加产品族：对于增加新的产品族，工厂方法模式很好的支持了“开闭原则”，对于新增加的产品族，只需要对应增加一个新的具体工厂即可，对已有代码无须做任何修改。</p><p>增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，违背了“开闭原则”。</p><p>正因为抽象工厂模式存在“开闭原则”的倾斜性，它以一种倾斜的方式来满足“开闭原则”，为增加新产品族提供方便，但不能为增加新产品结构提供这样的方便，因此要求设计人员在设计之初就能够全面考虑，不会在设计完成之后向系统中增加新的产品等级结构，也不会删除已有的产品等级结构，否则将会导致系统出现较大的修改，为后续维护工作带来诸多麻烦。</p><h3 id="抽象工厂模式总结"><a href="#抽象工厂模式总结" class="headerlink" title="抽象工厂模式总结"></a>抽象工厂模式总结</h3><p>抽象工厂模式是工厂方法模式的进一步延伸，由于它提供了功能更为强大的工厂类并且具备较好的可扩展性，在软件开发中得以广泛应用，尤其是在一些框架和 API 类库的设计中，例如在 Java 语言的 AWT（抽象窗口工具包）中就使用了抽象工厂模式，它使用抽象工厂模式来实现在不同的操作系统中应用程序呈现与所在操作系统一致的外观界面。抽象工厂模式也是在软件开发中最常用的设计模式之一。</p><p>优点：</p><p>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易，所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。</p><p>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。</p><p>增加新的产品族很方便，无须修改已有系统，符合“开闭原则”。</p><p>缺点：</p><p>增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这显然会带来较大的不便，违背了“开闭原则”。</p><p>工厂模式的退化</p><p>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式；当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。</p><p>转载至<a href="https://blog.csdn.net/m0_65260253/article/details/127909823">https://blog.csdn.net/m0_65260253/article/details/127909823</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 工厂模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picgo-gitee搭建个人图床</title>
      <link href="/2023/05/18/picgo-gitee-da-jian-ge-ren-tu-chuang/"/>
      <url>/2023/05/18/picgo-gitee-da-jian-ge-ren-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在搭建个人博客时，其中markdown语法作为编写博客的主要语言。但由于本地编写时加入的图片只能在本地显示，为了是博客上传的GitHub或者gitee上托管运行依然能够正常显示图片。这里我们需要用到图床。图床（Image Hosting Service）是一种在线服务，用于存储和托管图片。它允许用户将自己的图片上传到互联网上，并获取图片的链接，以便在网页、博客或论坛等地方分享或嵌入图片。图床的解决方案也非常多，网上比较多的解决方案除了免费图床（不稳定）以外就是采用对象存储（OSS）在或者搭建自己的云服务器图床（这个我会在宁外一篇博客讲诉）。我这里采用的是Gitee搭建自己的图床。好处是免费，国内服务器，无需科学上网 环境。</p><h2 id="gitee上创建存放博客的仓库"><a href="#gitee上创建存放博客的仓库" class="headerlink" title="gitee上创建存放博客的仓库"></a>gitee上创建存放博客的仓库</h2><h3 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h3><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230517152517240.png"/><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230517152835914.png"/><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230517153030763.png"/><p>注意：一定的开源，不然后面图片上传成功了，但是却使用不了</p><h3 id="私人令牌申请"><a href="#私人令牌申请" class="headerlink" title="私人令牌申请"></a>私人令牌申请</h3><img src="https://www.ypsky.xyz/myblog/images/2023/05/image-20230517153418459.png"/><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171702911.png" alt="image-20230517170252529"></p><h2 id="安装picgo"><a href="#安装picgo" class="headerlink" title="安装picgo"></a>安装picgo</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0">https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0</a></p><p>1.下载如下包</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171645977.png" alt="image-20230517164524066"></p><p>2.默认安装即可</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305180934165.png"/><h3 id="上传环境配置"><a href="#上传环境配置" class="headerlink" title="上传环境配置"></a>上传环境配置</h3><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171700432.png" alt="image-20230517170036028"></p><ul><li><p>repo:用户名/仓库名，或者 gitee.com:后面的部分</p></li><li><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171728434.png" alt="image-20230517172849525"></p></li><li><p>branch:分支,写master即可</p></li><li><p>token:私人令牌生成的密钥</p></li><li><p>path:图片上传到 Gitee 存储的位置,可以写 / 代表在根目录存储,也可以在仓库创建文件夹,这里写文件夹的名字</p></li></ul><h3 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h3><p>设置gitee上传</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171710151.png" alt="image-20230517170958999"></p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171711396.png" alt="image-20230517171059996"></p><h2 id="Typora中使用"><a href="#Typora中使用" class="headerlink" title="Typora中使用"></a>Typora中使用</h2><h3 id="在picgo中查看上传图片"><a href="#在picgo中查看上传图片" class="headerlink" title="在picgo中查看上传图片"></a>在picgo中查看上传图片</h3><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171723155.png"/><h3 id="图片的使用"><a href="#图片的使用" class="headerlink" title="图片的使用"></a>图片的使用</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>使用Markdown方式</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171714096.png" alt="image-20230517171437064"></p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171720318.png" alt="image-20230517172049470"></p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>使用HTML方式</p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171723155.png" alt="image-20230517172326123"></p><p><img src="https://www.ypsky.xyz/myblog/images/2023/05/202305171721032.png" alt="image-20230517172134582"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2023/05/18/typora-vue-theme-zhu-ti-jie-shao/"/>
      <url>/2023/05/18/typora-vue-theme-zhu-ti-jie-shao/</url>
      
        <content type="html"><![CDATA[<h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx的安装</title>
      <link href="/2023/05/18/nginx-de-an-zhuang/"/>
      <url>/2023/05/18/nginx-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx（发音为”engine X”）是一个高性能的开源Web服务器和反向代理服务器。它最初由俄罗斯的工程师Igor Sysoev开发，第一个公开发布是在2004年。Nginx因其出色的性能、稳定性和高度可扩展性而广受欢迎</p><h2 id="特点与功能"><a href="#特点与功能" class="headerlink" title="特点与功能"></a>特点与功能</h2><ol><li>高性能：Nginx采用异步、事件驱动的架构，能够处理大量并发连接而不会消耗过多的系统资源。</li><li>反向代理：Nginx可以作为反向代理服务器，将客户端的请求转发到后端的多个服务器上，实现负载均衡和高可用性。</li><li>静态文件服务：Nginx能够高效地提供静态文件服务，如图片、CSS和JavaScript文件，减轻后端服务器的负载。</li><li>动态内容处理：Nginx可以与后端应用服务器集成，如PHP、Java等，以处理动态内容请求。</li><li>缓存加速：Nginx支持缓存机制，能够将经常请求的内容缓存到内存中，提高响应速度。</li><li>URL重写和重定向：Nginx提供了强大的URL重写和重定向功能，可以对URL进行灵活的处理和转发。</li><li>SSL/TLS支持：Nginx能够处理HTTPS连接，支持SSL/TLS协议，保护数据的安全性。</li><li>可扩展性：Nginx的设计模块化，支持丰富的第三方模块和插件，可以根据需求进行定制和扩展。</li></ol><p>由于其卓越的性能和可靠性，Nginx被广泛用于大型互联网公司、高流量网站、应用程序部署和负载均衡等场景。它是一个轻量级、灵活且可靠的服务器软件，成为现代Web架构中不可或缺的一部分。</p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> <span class="token function">wget</span> http://nginx.org/download/nginx-1.18.0.tar.gz</code></pre><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> gcc pcre-devel zlib-devel openssl openssl-devel</code></pre><h3 id="安装Nginx-1"><a href="#安装Nginx-1" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#解压</span><span class="token function">tar</span> -zxvf nginx-1.18.0.tar.gz<span class="token comment" spellcheck="true">#进入NG目录</span><span class="token function">cd</span> ./nginx-1.18.0</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#配置</span>./configure --prefix<span class="token operator">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</code></pre><p>这条命令是用于配置 Nginx 编译选项的命令，通过指定不同的选项来启用或禁用特定的模块和功能。下面是对每个选项的解读：</p><ul><li><code>--prefix=/usr/local/nginx</code>：指定 Nginx 安装的目录前缀为 <code>/usr/local/nginx</code>。这意味着编译完成后，Nginx 将安装在该路径下。</li><li><code>--with-http_stub_status_module</code>：启用了 HTTP Stub Status 模块。该模块提供了一个简单的状态页面，可以查看 Nginx 的基本运行状态，如当前活动的连接数、请求处理统计等。</li><li><code>--with-http_ssl_module</code>：启用了 HTTP SSL 模块。该模块提供了对 HTTPS 协议的支持，使 Nginx 能够处理安全的加密连接，并支持 SSL/TLS 协议。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#编译</span><span class="token function">make</span><span class="token comment" spellcheck="true">#安装</span><span class="token function">make</span> <span class="token function">install</span></code></pre><h2 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h2><h3 id="启动-amp-停止"><a href="#启动-amp-停止" class="headerlink" title="启动&amp;停止"></a>启动&amp;停止</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动</span>/usr/local/nginx/sbin/nginx<span class="token comment" spellcheck="true">#重新加载配置</span>/usr/local/nginx/sbin/nginx -s reload<span class="token comment" spellcheck="true">#停止</span>/usr/local/nginx/sbin/nginx -s stop</code></pre><h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><ul><li>以特定目录下的配置文件启动：nginx -c /特定目录/nginx.conf</li><li>重新加载配置：nginx -s reload 执行这个命令后，master进程会等待worker进程处理完当前请求，然后根据最新配置重新创建新的worker进程，完成Nginx配置的热更新。</li><li>立即停止服务：nginx -s stop</li><li>从容停止服务：nginx -s quit 执行该命令后，Nginx在完成当前工作任务后再停止。</li><li>检查配置文件是否正确：nginx -t</li><li>检查特定目录的配置文件是否正确：nginx -t -c /特定目录/nginx.conf</li></ul><h2 id="配置systemd方式管理NG"><a href="#配置systemd方式管理NG" class="headerlink" title="配置systemd方式管理NG"></a>配置systemd方式管理NG</h2><pre class=" language-bash"><code class="language-bash">vim /etc/systemd/system/nginx.service</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>The Nginx HTTP ServerAfter<span class="token operator">=</span>network.target remote-fs.target nss-lookup.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Type<span class="token operator">=</span>forkingPIDFile<span class="token operator">=</span>/usr/local/nginx/logs/nginx.pidExecStart<span class="token operator">=</span>/usr/local/nginx/sbin/nginxExecReload<span class="token operator">=</span>/usr/local/nginx/sbin/nginx -s reloadExecStop<span class="token operator">=</span>/usr/local/nginx/sbin/nginx -s stopPrivateTmp<span class="token operator">=</span>true<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target</code></pre><h3 id="启动-amp-停止-1"><a href="#启动-amp-停止-1" class="headerlink" title="启动&amp;停止"></a>启动&amp;停止</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><pre class=" language-shell"><code class="language-shell">systemctl start nginx.service　#（启动nginx服务）systemctl stop nginx.service　#（停止nginx服务）systemctl enable nginx.service #（设置开机自启动）systemctl disable nginx.service #（停止开机自启动）systemctl status nginx.service #（查看服务当前状态）systemctl restart nginx.service　#（重新启动服务）systemctl list-units --type=service #（查看所有已启动的服务）</code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2023/05/18/git-chang-yong-ming-ling/"/>
      <url>/2023/05/18/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Git是一种分布式版本控制系统，用于跟踪和管理代码的修改历史。它最初由Linus Torvalds开发用于管理Linux内核的代码，现已成为广泛使用的版本控制系统之一。</p><h3 id="特点与功能"><a href="#特点与功能" class="headerlink" title="特点与功能"></a>特点与功能</h3><ol><li>分布式版本控制：每个开发者都可以拥有完整的代码仓库副本，可以在本地进行工作，无需依赖中央服务器。这使得Git更加灵活和适应分布式开发模式。</li><li>强大的分支支持：Git鼓励频繁创建和合并分支，使得并行开发、特性分支、修复分支等工作流程变得简单和高效。</li><li>高速和高效：Git的设计目标是速度和效率，它使用了各种优化技术来加快操作速度，包括对代码和元数据的压缩存储和索引。</li><li>完整性和数据完整性：Git使用SHA-1哈希算法来对每个文件的内容进行唯一标识，并使用校验和来保证数据的完整性和一致性。</li><li>离线操作：由于每个开发者都拥有完整的代码副本，可以在没有网络连接的情况下进行工作和提交修改，使得团队成员更加独立和灵活。</li><li>灵活的工作流程：Git提供了各种命令和工具来支持不同的工作流程和开发模式，例如集中式、分布式、协作开发等。</li></ol><p>使用Git，开发者可以轻松地跟踪文件的修改、撤销不必要的更改、合并代码、解决冲突、查看历史记录等。它不仅适用于个人开发者，也广泛应用于团队协作和开源项目。Git已成为现代软件开发中不可或缺的工具之一，为版本控制和代码管理提供了强大而灵活的解决方案。</p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><pre class=" language-shell"><code class="language-shell"># 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class=" language-shell"><code class="language-shell"># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name "[name]"$ git config [--global] user.email "[email address]"</code></pre><h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><pre class=" language-shell"><code class="language-shell"># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]</code></pre><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><pre class=" language-shell"><code class="language-shell"># 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><pre class=" language-shell"><code class="language-shell"># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><pre class=" language-shell"><code class="language-shell"># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><pre class=" language-shell"><code class="language-shell"># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat "@{0 day ago}"# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><pre class=" language-shell"><code class="language-shell"># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><pre class=" language-shell"><code class="language-shell"># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre class=" language-shell"><code class="language-shell"># 生成一个可供发布的压缩包$ git archive</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/18/hello-world/"/>
      <url>/2023/05/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
          <category> 子分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
