<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker搭建MySQL双主双从</title>
      <link href="/2024/01/05/docker-da-jian-mysql-shuang-zhu-shuang-cong/"/>
      <url>/2024/01/05/docker-da-jian-mysql-shuang-zhu-shuang-cong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MySQL双主双从（Dual Master Dual Slave）配置是一种复杂的高可用性解决方案，它涉及到两个主服务器（Master）和两个从服务器（Slave）。这种配置提供了更高的数据冗余和故障转移能力。以下是这种配置的基本概念：</p><p><strong>主服务器（Masters）</strong>：</p><ul><li>两个主服务器都接受写操作，并且可以处理读操作。</li><li>主服务器之间通过双向复制（Bidirectional Replication）同步数据。</li><li>主服务器之间需要配置一个仲裁机制来解决潜在的数据冲突。</li></ul><p><strong>从服务器（Slaves）</strong>：</p><ul><li>两个从服务器都从两个主服务器复制数据，以提供数据的冗余备份。</li><li>从服务器可以处理读操作，以减轻主服务器的负载。</li></ul><p>在这种配置中，两个主服务器之间需要同步数据，并且需要一个机制来确保数据的一致性。这通常涉及到使用第三方工具或自定义的同步策略来处理两个主服务器之间的数据冲突。</p><h2 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h2><ul><li>liunx服务器一台</li><li>docker已安装</li><li>docker-compose已安装</li></ul><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401051617259.png"><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><table><thead><tr><th>主机</th><th>ip</th><th>类型</th><th>端口</th><th>server id</th></tr></thead><tbody><tr><td>master01</td><td>192.168.109.102</td><td>主1</td><td>3306</td><td>1</td></tr><tr><td>slave01</td><td>192.168.109.102</td><td>备1</td><td>3307</td><td>2</td></tr><tr><td>master02</td><td>192.168.109.102</td><td>主2</td><td>3308</td><td>3</td></tr><tr><td>slave02</td><td>192.168.109.102</td><td>备2</td><td>3309</td><td>4</td></tr></tbody></table><h2 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h2><h3 id="docker-compose-mysql-yml-文件"><a href="#docker-compose-mysql-yml-文件" class="headerlink" title="docker-compose-mysql.yml 文件"></a>docker-compose-mysql.yml 文件</h3><pre class=" language-bash"><code class="language-bash">version: <span class="token string">'3.0'</span>services:  mysql_master01:    image: mysql:latest    container_name: mysql_master01    restart: always    network_mode: bridge    environment:     - MYSQL_DATABASE<span class="token operator">=</span>root     - MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456    ports:      - 3306:3306    volumes:     - /root/mysql/data/master01:/var/lib/mysql     - /root/mysql/conf/master01/my.cnf:/etc/mysql/my.cnf  mysql_slave01:    image: mysql:latest    container_name: mysql_slave01    restart: always    network_mode: bridge    environment:     - MYSQL_DATABASE<span class="token operator">=</span>root     - MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456    ports:      - 3307:3306    volumes:     - /root/mysql/data/slave01:/var/lib/mysql     - /root/mysql/conf/slave01/my.cnf:/etc/mysql/my.cnf  mysql_master02:    image: mysql:latest    container_name: mysql_master02    restart: always    network_mode: bridge    environment:     - MYSQL_DATABASE<span class="token operator">=</span>root     - MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456    ports:      - 3308:3306    volumes:     - /root/mysql/data/master02:/var/lib/mysql     - /root/mysql/conf/master02/my.cnf:/etc/mysql/my.cnf  mysql_slave02:    image: mysql:latest    container_name: mysql_slave02    restart: always    network_mode: bridge    environment:     - MYSQL_DATABASE<span class="token operator">=</span>root     - MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456    ports:      - 3309:3306    volumes:     - /root/mysql/data/slave02:/var/lib/mysql     - /root/mysql/conf/slave02/my.cnf:/etc/mysql/my.cnf</code></pre><h3 id="创建映射卷"><a href="#创建映射卷" class="headerlink" title="创建映射卷"></a>创建映射卷</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /root/mysql/data/<span class="token punctuation">{</span>master01,master02,slave01,slave02<span class="token punctuation">}</span><span class="token function">mkdir</span> -p /root/mysql/conf/<span class="token punctuation">{</span>master01,master02,slave01,slave02<span class="token punctuation">}</span></code></pre><h3 id="master01主库配置文件"><a href="#master01主库配置文件" class="headerlink" title="master01主库配置文件"></a>master01主库配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /root/mysql/conf/master01/my.cnf</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>pid-file        <span class="token operator">=</span> /var/run/mysqld/mysqld.pidsocket          <span class="token operator">=</span> /var/run/mysqld/mysqld.sockdatadir         <span class="token operator">=</span> /var/lib/mysqlsecure-file-priv<span class="token operator">=</span> NULLserver-id<span class="token operator">=</span>1<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0log-slave-updates  <span class="token comment" spellcheck="true"># 在作为从数据库的时候，有写入操作也要更新二进制日志文件</span><span class="token comment" spellcheck="true"># 不同步哪些数据库  </span>binlog-ignore-db <span class="token operator">=</span> mysqlbinlog-ignore-db <span class="token operator">=</span> <span class="token function">test</span>binlog-ignore-db <span class="token operator">=</span> information_schema<span class="token comment" spellcheck="true"># 只同步哪些数据库，除此之外，其他不同步  </span><span class="token comment" spellcheck="true"># binlog-do-db = game  </span><span class="token comment" spellcheck="true"># Custom config should go here</span><span class="token operator">!</span>includedir /etc/mysql/conf.d/</code></pre><h3 id="slave01主库配置文件"><a href="#slave01主库配置文件" class="headerlink" title="slave01主库配置文件"></a>slave01主库配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /root/mysql/conf/slave01/my.cnf</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>pid-file        <span class="token operator">=</span> /var/run/mysqld/mysqld.pidsocket          <span class="token operator">=</span> /var/run/mysqld/mysqld.sockdatadir         <span class="token operator">=</span> /var/lib/mysqlsecure-file-priv<span class="token operator">=</span> NULLserver-id<span class="token operator">=</span>3<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0server-id<span class="token operator">=</span>2 <span class="token comment" spellcheck="true">#设置server-id，必须唯一</span><span class="token comment" spellcheck="true"># Custom config should go here</span><span class="token operator">!</span>includedir /etc/mysql/conf.d/</code></pre><h3 id="master02主库配置文件"><a href="#master02主库配置文件" class="headerlink" title="master02主库配置文件"></a>master02主库配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /root/mysql/conf/master02/my.cnf</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>pid-file        <span class="token operator">=</span> /var/run/mysqld/mysqld.pidsocket          <span class="token operator">=</span> /var/run/mysqld/mysqld.sockdatadir         <span class="token operator">=</span> /var/lib/mysqlsecure-file-priv<span class="token operator">=</span> NULLserver-id<span class="token operator">=</span>3<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0log-slave-updates  <span class="token comment" spellcheck="true"># 在作为从数据库的时候，有写入操作也要更新二进制日志文件</span><span class="token comment" spellcheck="true"># 不同步哪些数据库  </span>binlog-ignore-db <span class="token operator">=</span> mysqlbinlog-ignore-db <span class="token operator">=</span> <span class="token function">test</span>binlog-ignore-db <span class="token operator">=</span> information_schema<span class="token comment" spellcheck="true"># 只同步哪些数据库，除此之外，其他不同步  </span><span class="token comment" spellcheck="true"># binlog-do-db = game  </span><span class="token comment" spellcheck="true"># Custom config should go here</span><span class="token operator">!</span>includedir /etc/mysql/conf.d/</code></pre><h3 id="slave02主库配置文件"><a href="#slave02主库配置文件" class="headerlink" title="slave02主库配置文件"></a>slave02主库配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /root/mysql/conf/slave02/my.cnf</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>pid-file        <span class="token operator">=</span> /var/run/mysqld/mysqld.pidsocket          <span class="token operator">=</span> /var/run/mysqld/mysqld.sockdatadir         <span class="token operator">=</span> /var/lib/mysqlsecure-file-priv<span class="token operator">=</span> NULLserver-id<span class="token operator">=</span>3<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0server-id<span class="token operator">=</span>2 <span class="token comment" spellcheck="true">#设置server-id，必须唯一</span><span class="token comment" spellcheck="true"># Custom config should go here</span><span class="token operator">!</span>includedir /etc/mysql/conf.d/</code></pre><h2 id="docker-compose命令"><a href="#docker-compose命令" class="headerlink" title="docker-compose命令"></a>docker-compose命令</h2><h3 id="容器创建"><a href="#容器创建" class="headerlink" title="容器创建"></a>容器创建</h3><pre class=" language-bash"><code class="language-bash">docker-compose -f docker-compose-mysql.yml up -d</code></pre><h3 id="容器停止"><a href="#容器停止" class="headerlink" title="容器停止"></a>容器停止</h3><pre class=" language-bash"><code class="language-bash">docker-compose -f docker-compose-mysql.yml down</code></pre><h2 id="在主库中创建同步用户并授权"><a href="#在主库中创建同步用户并授权" class="headerlink" title="在主库中创建同步用户并授权"></a>在主库中创建同步用户并授权</h2><p>repl_user用于两个主库之间同步，slave_sync_user用于主库和从库之间同步</p><p>在master01、master02执行一下命令创建用户</p><pre class=" language-bash"><code class="language-bash">CREATE USER <span class="token string">'repl_user'</span>@<span class="token string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'123456'</span><span class="token punctuation">;</span> CREATE USER <span class="token string">'slave_sync_user'</span>@<span class="token string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'123456'</span><span class="token punctuation">;</span> GRANT REPLICATION SLAVE ON *.* TO <span class="token string">'repl_user'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span> GRANT REPLICATION SLAVE ON *.* TO <span class="token string">'slave_sync_user'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span></code></pre><h2 id="配置同步"><a href="#配置同步" class="headerlink" title="配置同步"></a>配置同步</h2><p>master01-&gt;master02,master01-&gt;slave01</p><p>查看master01状态</p><pre class=" language-bash"><code class="language-bash">show master status<span class="token punctuation">;</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401051641979.png"><p>在master02 执行以下命令</p><pre class=" language-bash"><code class="language-bash">bachange master tomaster_port<span class="token operator">=</span>3306,master_user<span class="token operator">=</span><span class="token string">'repl_user'</span>,master_password<span class="token operator">=</span><span class="token string">'123456'</span>,master_host<span class="token operator">=</span><span class="token string">'192.168.109.102'</span>,master_log_file<span class="token operator">=</span><span class="token string">'binlog.000002'</span>,master_log_pos<span class="token operator">=</span>1194<span class="token punctuation">;</span>start slave<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 开启同步</span>show slave status \G；</code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401051645564.png"><p>在slave01执行以下命令</p><pre class=" language-bash"><code class="language-bash">change master tomaster_port<span class="token operator">=</span>3306,master_user<span class="token operator">=</span><span class="token string">'slave_sync_user'</span>,master_password<span class="token operator">=</span><span class="token string">'123456'</span>,master_host<span class="token operator">=</span><span class="token string">'192.168.109.102'</span>,master_log_file<span class="token operator">=</span><span class="token string">'binlog.000002'</span>,master_log_pos<span class="token operator">=</span>1194<span class="token punctuation">;</span>start slave<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 开启同步</span>show slave status \G；</code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401051646698.png"><p>master02-&gt;master01,master02-&gt;slave02</p><p>查看master01状态</p><pre class=" language-bash"><code class="language-bash">show master status<span class="token punctuation">;</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401051649059.png"><p>在master02 执行以下命令</p><pre class=" language-bash"><code class="language-bash">bachange master tomaster_port<span class="token operator">=</span>3308,master_user<span class="token operator">=</span><span class="token string">'repl_user'</span>,master_password<span class="token operator">=</span><span class="token string">'123456'</span>,master_host<span class="token operator">=</span><span class="token string">'192.168.109.102'</span>,master_log_file<span class="token operator">=</span><span class="token string">'binlog.000002'</span>,master_log_pos<span class="token operator">=</span>1194<span class="token punctuation">;</span>start slave<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 开启同步</span>show slave status \G；</code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401051649291.png"><p>在slave02执行以下命令</p><pre class=" language-bash"><code class="language-bash">change master tomaster_port<span class="token operator">=</span>3308,master_user<span class="token operator">=</span><span class="token string">'slave_sync_user'</span>,master_password<span class="token operator">=</span><span class="token string">'123456'</span>,master_host<span class="token operator">=</span><span class="token string">'192.168.109.102'</span>,master_log_file<span class="token operator">=</span><span class="token string">'binlog.000002'</span>,master_log_pos<span class="token operator">=</span>1194<span class="token punctuation">;</span>start slave<span class="token punctuation">;</span> <span class="token comment" spellcheck="true"># 开启同步</span>show slave status \G；</code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401051653001.png"><h3 id="验证双主双从同步效果"><a href="#验证双主双从同步效果" class="headerlink" title="验证双主双从同步效果"></a>验证双主双从同步效果</h3><p>任意主数据库操作数据，所有结点到得相同数据；</p><p>在master01打入empdb数据库，发现都同步过来了</p><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401051703632.png">]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker搭建MySQL一组三从服务</title>
      <link href="/2024/01/04/docker-da-jian-mysql-yi-zu-san-cong-fu-wu/"/>
      <url>/2024/01/04/docker-da-jian-mysql-yi-zu-san-cong-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MySQL的一组三从配置通常指的是一个主数据库服务器（Master）和三个从数据库服务器（Slaves）。这种配置是MySQL主从复制（Master-Slave Replication）架构的一部分，用于实现数据的高可用性和读写分离。</p><p><strong>主服务器（Master）</strong>：</p><ul><li>主服务器是数据写入的地方，所有的数据变更（如插入、更新、删除）都发生在主服务器上。</li><li>主服务器负责将数据变更记录到二进制日志（Binary Log）中。</li><li>主服务器可以处理读写操作，但在高并发环境下，为了提高性能，通常只处理写操作。</li></ul><p><strong>从服务器（Slaves）</strong>：</p><ul><li>从服务器用于读取操作，它们从主服务器复制数据，以减轻主服务器的负载。</li><li>从服务器通过复制主服务器的二进制日志来同步数据。</li><li>从服务器可以配置为只读，这样它们可以处理大量的读请求，而不会干扰到主服务器上的写操作。</li><li>在主服务器发生故障时，一个从服务器可以被提升为新的主服务器，以保证服务的连续性。</li></ul><h2 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h2><ul><li>liunx服务器一台</li><li>docker已安装</li><li>docker-compose已安装</li></ul><h2 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h2><h3 id="docker-compose-mysql-yml-文件"><a href="#docker-compose-mysql-yml-文件" class="headerlink" title="docker-compose-mysql.yml 文件"></a>docker-compose-mysql.yml 文件</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.0'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql_master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql_master    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">environment</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> MYSQL_DATABASE=root     <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 3307<span class="token punctuation">:</span><span class="token number">3306</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> /root/mysql/data/master<span class="token punctuation">:</span>/var/lib/mysql     <span class="token punctuation">-</span> /root/mysql/conf/master/my.cnf<span class="token punctuation">:</span>/etc/mysql/my.cnf  <span class="token key atrule">mysql_slave01</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql_slave01    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">environment</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> MYSQL_DATABASE=root     <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 3308<span class="token punctuation">:</span><span class="token number">3306</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> /root/mysql/data/slave01<span class="token punctuation">:</span>/var/lib/mysql     <span class="token punctuation">-</span> /root/mysql/conf/slave01/my.cnf<span class="token punctuation">:</span>/etc/mysql/my.cnf  <span class="token key atrule">mysql_slave02</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql_slave02    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">environment</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> MYSQL_DATABASE=root     <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 3309<span class="token punctuation">:</span><span class="token number">3306</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> /root/mysql/data/slave02<span class="token punctuation">:</span>/var/lib/mysql     <span class="token punctuation">-</span> /root/mysql/conf/slave02/my.cnf<span class="token punctuation">:</span>/etc/mysql/my.cnf  <span class="token key atrule">mysql_slave03</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql_slave03    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">environment</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> MYSQL_DATABASE=root     <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 3310<span class="token punctuation">:</span><span class="token number">3306</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> /root/mysql/data/slave03<span class="token punctuation">:</span>/var/lib/mysql     <span class="token punctuation">-</span> /root/mysql/conf/slave03/my.cnf<span class="token punctuation">:</span>/etc/mysql/my.cnf</code></pre><h3 id="创建映射卷"><a href="#创建映射卷" class="headerlink" title="创建映射卷"></a>创建映射卷</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /root/mysql/data/<span class="token punctuation">{</span>master,slave01,slave02,slave03<span class="token punctuation">}</span><span class="token function">mkdir</span> -p /root/mysql/conf/<span class="token punctuation">{</span>master,slave01,slave02,slave03<span class="token punctuation">}</span></code></pre><h3 id="master主库配置文件"><a href="#master主库配置文件" class="headerlink" title="master主库配置文件"></a>master主库配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /root/mysql/conf/master/my.cnf</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>pid-file        <span class="token operator">=</span> /var/run/mysqld/mysqld.pidsocket          <span class="token operator">=</span> /var/run/mysqld/mysqld.sockdatadir         <span class="token operator">=</span> /var/lib/mysqlsecure-file-priv<span class="token operator">=</span> NULLserver-id<span class="token operator">=</span>1<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0<span class="token comment" spellcheck="true"># Custom config should go here</span><span class="token operator">!</span>includedir /etc/mysql/conf.d/</code></pre><h3 id="slave01从库配置文件"><a href="#slave01从库配置文件" class="headerlink" title="slave01从库配置文件"></a>slave01从库配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /root/mysql/conf/slave01/my.cnf</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>pid-file        <span class="token operator">=</span> /var/run/mysqld/mysqld.pidsocket          <span class="token operator">=</span> /var/run/mysqld/mysqld.sockdatadir         <span class="token operator">=</span> /var/lib/mysqlsecure-file-priv<span class="token operator">=</span> NULLserver-id<span class="token operator">=</span>2<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0<span class="token comment" spellcheck="true"># Custom config should go here</span><span class="token operator">!</span>includedir /etc/mysql/conf.d/</code></pre><h3 id="slave02从库配置文件"><a href="#slave02从库配置文件" class="headerlink" title="slave02从库配置文件"></a>slave02从库配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /root/mysql/conf/slave02/my.cnf</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>pid-file        <span class="token operator">=</span> /var/run/mysqld/mysqld.pidsocket          <span class="token operator">=</span> /var/run/mysqld/mysqld.sockdatadir         <span class="token operator">=</span> /var/lib/mysqlsecure-file-priv<span class="token operator">=</span> NULLserver-id<span class="token operator">=</span>3<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0<span class="token comment" spellcheck="true"># Custom config should go here</span><span class="token operator">!</span>includedir /etc/mysql/conf.d/</code></pre><h3 id="slave03从库配置文件"><a href="#slave03从库配置文件" class="headerlink" title="slave03从库配置文件"></a>slave03从库配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /root/mysql/conf/slave03/my.cnf</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>pid-file        <span class="token operator">=</span> /var/run/mysqld/mysqld.pidsocket          <span class="token operator">=</span> /var/run/mysqld/mysqld.sockdatadir         <span class="token operator">=</span> /var/lib/mysqlsecure-file-priv<span class="token operator">=</span> NULLserver-id<span class="token operator">=</span>4<span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0<span class="token comment" spellcheck="true"># Custom config should go here</span><span class="token operator">!</span>includedir /etc/mysql/conf.d/</code></pre><h2 id="docker-compose命令"><a href="#docker-compose命令" class="headerlink" title="docker-compose命令"></a>docker-compose命令</h2><h3 id="容器创建"><a href="#容器创建" class="headerlink" title="容器创建"></a>容器创建</h3><pre class=" language-bash"><code class="language-bash">docker-compose -f docker-compose-mysql.yml up -d</code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401041702693.png"/><h3 id="容器停止"><a href="#容器停止" class="headerlink" title="容器停止"></a>容器停止</h3><pre class=" language-bash"><code class="language-bash">docker-compose -f docker-compose-mysql.yml down</code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401041701569.png"/><h2 id="在主库中创建同步用户"><a href="#在主库中创建同步用户" class="headerlink" title="在主库中创建同步用户"></a>在主库中创建同步用户</h2><p>进入mysql_master容器</p><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it mysql_master <span class="token function">bash</span></code></pre><p>连接mysql数据库 （密码123456）</p><pre class=" language-bash"><code class="language-bash">mysql -u root -p</code></pre><p>创建允许主从复制的用户 test，密码为 test1234</p><pre class=" language-bash"><code class="language-bash">CREATE USER <span class="token string">'test'</span>@<span class="token string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'test1234'</span><span class="token punctuation">;</span>GRANT REPLICATION SLAVE ON *.* TO <span class="token string">'test'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span></code></pre><p>此时的用户没有创建库或表的权限，以<strong>root</strong>用户登录主库并执行以下命令赋予<strong>test</strong>用户权限</p><pre class=" language-bash"><code class="language-bash">GRANT ALL PRIVILEGES ON  *.* TO ‘test’@‘%’ IDENTIFIED BY 'test1234’<span class="token punctuation">;</span></code></pre><p>查询主库状态</p><pre class=" language-bash"><code class="language-bash">show master status<span class="token punctuation">;</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401041715038.png"/><h2 id="在从库中配置主库信息"><a href="#在从库中配置主库信息" class="headerlink" title="在从库中配置主库信息"></a>在从库中配置主库信息</h2><p>切换到slave01数据库，执行一下命令</p><pre class=" language-bash"><code class="language-bash">change master tomaster_port<span class="token operator">=</span>3307,master_user<span class="token operator">=</span><span class="token string">'test'</span>,master_password<span class="token operator">=</span><span class="token string">'test1234'</span>,master_host<span class="token operator">=</span><span class="token string">'192.168.109.100'</span>,master_log_file<span class="token operator">=</span><span class="token string">'binlog.000003'</span>,master_log_pos<span class="token operator">=</span>879,get_master_public_key<span class="token operator">=</span>1<span class="token punctuation">;</span></code></pre><p>然后执行一下命令，开启同步</p><pre class=" language-bash"><code class="language-bash">start slave<span class="token punctuation">;</span></code></pre><p>执行以下命令查看从库状态</p><pre class=" language-bash"><code class="language-bash">show slave status\G<span class="token punctuation">;</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401041726852.png"/><p>出现两个yes就成功了，然后分别在剩下两台重复执行以上命令</p><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401041734689.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401041736440.png"/><h2 id="⚠️注意"><a href="#⚠️注意" class="headerlink" title="⚠️注意"></a>⚠️注意</h2><p>MySQL数据同步是通过binlog 和 Pos与与主库相同，在手动将主库和从库的同步点对齐之前，或从库数据不一致时候，先停止同步stop slave;从新执行（在从库中配置主库信息）步骤即可</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合knife4j</title>
      <link href="/2024/01/03/springboot-zheng-he-knife4j/"/>
      <url>/2024/01/03/springboot-zheng-he-knife4j/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Knife4j 是一款基于 Spring Boot 与 Swagger 的增强型 API 文档生成工具。它在 Swagger 的基础上进行了一些扩展和优化，提供了更丰富的功能和更友好的界面。主要特点包括：</p><ol><li><strong>优雅的界面</strong>: Knife4j 提供了美观、易用的界面，更加直观地展示了 API 文档信息。用户可以通过交互式界面浏览和测试 API 接口。</li><li><strong>增强的注解支持</strong>: 支持的注解更多，可以通过一些自定义注解来扩展接口文档的描述，包括参数校验、数据格式等方面的说明。</li><li><strong>参数测试和调试</strong>: Knife4j 允许用户在界面中直接输入参数，进行接口的测试和调试，方便快捷。</li><li><strong>权限控制</strong>: 支持权限控制，可以对不同用户或用户组设置不同的 API 访问权限。</li><li><strong>接口管理</strong>: 提供接口在线管理功能，包括接口的新增、删除、编辑等操作，便于团队协作与版本管理。</li><li><strong>模块化设计</strong>: 支持接口按模块进行组织管理，使得接口文档更加清晰易读。</li></ol><p>Knife4j 是一款非常实用的 API 文档生成工具，使得 API 接口的开发、测试和管理更加高效和便捷。</p><h2 id="引入依赖-（springboot-2-7-5）"><a href="#引入依赖-（springboot-2-7-5）" class="headerlink" title="引入依赖 （springboot 2.7.5）"></a>引入依赖 （springboot 2.7.5）</h2><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-openapi3-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># spring-doc-openapi项目配置</span><span class="token key atrule">spring-doc</span><span class="token punctuation">:</span>  <span class="token key atrule">swagger-ui</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /swagger<span class="token punctuation">-</span>ui.html    <span class="token key atrule">tags-sorter</span><span class="token punctuation">:</span> alpha    <span class="token key atrule">operations-sorter</span><span class="token punctuation">:</span> alpha  <span class="token key atrule">api-docs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /v3/api<span class="token punctuation">-</span>docs  <span class="token key atrule">group-configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">'默认分组'</span>      <span class="token key atrule">paths-to-match</span><span class="token punctuation">:</span> <span class="token string">'/**'</span>      <span class="token key atrule">packages-to-scan</span><span class="token punctuation">:</span> com.yangpeng<span class="token comment" spellcheck="true"># knife4j的增强配置，不需要增强可以不配</span><span class="token key atrule">knife4j</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">setting</span><span class="token punctuation">:</span>    <span class="token key atrule">enable-footer</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><h2 id="配置knife4j项目信息"><a href="#配置knife4j项目信息" class="headerlink" title="配置knife4j项目信息"></a>配置knife4j项目信息</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Knife4jConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OpenAPI <span class="token function">customOpenAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OpenAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Knife4j示例项目 - 接口文档"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"项目简介，支持Markdown格式：`这里是代码标签哦`，**这里是强调哦**"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"V1.0"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"作者"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token string">"yangpeng@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="编写测试"><a href="#编写测试" class="headerlink" title="编写测试"></a>编写测试</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_demo<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>util<span class="token punctuation">.</span>JSONPObject<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_demo<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Emp<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_demo<span class="token punctuation">.</span>sevice<span class="token punctuation">.</span>EmpService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_demo<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RedisUtil<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>v3<span class="token punctuation">.</span>oas<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Operation<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>v3<span class="token punctuation">.</span>oas<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Parameter<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>v3<span class="token punctuation">.</span>oas<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Parameters<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>v3<span class="token punctuation">.</span>oas<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>ParameterIn<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>v3<span class="token punctuation">.</span>oas<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>Tag<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>json<span class="token punctuation">.</span>JSONParser<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Nullable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年09月11日 16:58:01 * @packageName com.yangpeng.datasource.controller * @className EmpController */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"应用1-Controller1"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisUtil redisUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"查询数据库数据"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">showEmpList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> list <span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jsonString <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"empList"</span><span class="token punctuation">,</span> jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"查验应用是否存活"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/isAlive"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"查验Redis是否存活"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testRedis"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object name <span class="token operator">=</span> redisUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"empList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"向客人问好"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> in <span class="token operator">=</span> ParameterIn<span class="token punctuation">.</span>QUERY<span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hi:"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"测试参数可以为空"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Parameters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> in <span class="token operator">=</span> ParameterIn<span class="token punctuation">.</span>QUERY<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/nullable"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testNullable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hi:"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>访问地址<a href="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401041157839.png">https://www.yangpengsky.top:9000/myblog/images/2024/01/202401041157839.png</a></p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401041157839.png" alt="image-20240104115749186"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> knife4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整个redis（一主三从）+单哨兵</title>
      <link href="/2024/01/02/springboot-zheng-ge-redis-yi-zhu-san-cong-dan-shao-bing/"/>
      <url>/2024/01/02/springboot-zheng-ge-redis-yi-zhu-san-cong-dan-shao-bing/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis的一组三主+哨兵（Sentinel）配置是一种高可用性解决方案，它结合了主从复制和哨兵监控机制。这种配置通常包括三个主节点（Masters）和三个从节点（Slaves），以及一个或多个哨兵实例。哨兵用于监控主节点的健康状况，并在主节点故障时自动进行故障转移。</p><p><strong>主节点（Masters）</strong>：</p><ul><li>主节点负责处理写操作，并且可以处理读操作。</li><li>主节点之间通过Redis的集群功能进行数据分片，每个主节点负责一部分数据。</li><li>主节点之间通过Gossip协议进行通信，共享集群状态信息。</li></ul><p><strong>从节点（Slaves）</strong>：</p><ul><li>从节点用于读取操作，它们从主节点复制数据，以减轻主节点的负载。</li><li>从节点可以配置为只读，这样它们可以处理大量的读请求，而不会干扰到主节点上的写操作。</li></ul><p><strong>哨兵（Sentinels）</strong>：</p><ul><li>哨兵是专门用于监控Redis主节点和从节点状态的系统。</li><li>哨兵会定期检查主节点是否可用，如果主节点失效，哨兵会选举一个新的主节点。</li><li>哨兵还可以通知客户端新的主节点地址，以便客户端能够连接到新的主节点。</li></ul><h2 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h2><ul><li>liunx服务器一台</li><li>docker已安装</li><li>docker-compose已安装</li></ul><h2 id="编写redis（一组三从）-单哨兵"><a href="#编写redis（一组三从）-单哨兵" class="headerlink" title="编写redis（一组三从）+单哨兵"></a>编写redis（一组三从）+单哨兵</h2><p>编写docker-compose-redis文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.0'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_master    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 6379<span class="token punctuation">:</span><span class="token number">6379</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server <span class="token punctuation">-</span><span class="token punctuation">-</span>replica<span class="token punctuation">-</span>announce<span class="token punctuation">-</span>ip 192.168.109.100 <span class="token punctuation">-</span><span class="token punctuation">-</span>replica<span class="token punctuation">-</span>announce<span class="token punctuation">-</span>port 6379 <span class="token punctuation">-</span><span class="token punctuation">-</span>requirepass test1234     <span class="token comment" spellcheck="true"># Redis 主实例，监听端口 6379</span>  <span class="token key atrule">slave01</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_slave01    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 6380<span class="token punctuation">:</span><span class="token number">6379</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server <span class="token punctuation">-</span><span class="token punctuation">-</span>slaveof 192.168.109.100 6379 <span class="token punctuation">-</span><span class="token punctuation">-</span>replica<span class="token punctuation">-</span>announce<span class="token punctuation">-</span>ip 192.168.109.100 <span class="token punctuation">-</span><span class="token punctuation">-</span>replica<span class="token punctuation">-</span>announce<span class="token punctuation">-</span>port 6380 <span class="token punctuation">-</span><span class="token punctuation">-</span>requirepass test1234 <span class="token punctuation">-</span><span class="token punctuation">-</span>masterauth test1234    <span class="token comment" spellcheck="true"># Redis 从实例 01，复制主实例 6379，监听端口 6380</span>  <span class="token key atrule">slave02</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_slave02    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 6381<span class="token punctuation">:</span><span class="token number">6379</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server <span class="token punctuation">-</span><span class="token punctuation">-</span>slaveof 192.168.109.100 6379 <span class="token punctuation">-</span><span class="token punctuation">-</span>replica<span class="token punctuation">-</span>announce<span class="token punctuation">-</span>ip 192.168.109.100 <span class="token punctuation">-</span><span class="token punctuation">-</span>replica<span class="token punctuation">-</span>announce<span class="token punctuation">-</span>port 6381 <span class="token punctuation">-</span><span class="token punctuation">-</span>requirepass test1234 <span class="token punctuation">-</span><span class="token punctuation">-</span>masterauth test1234    <span class="token comment" spellcheck="true"># Redis 从实例 02，复制主实例 6379，监听端口 6381</span>  <span class="token key atrule">slave03</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis_slave03    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 6382<span class="token punctuation">:</span><span class="token number">6379</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server <span class="token punctuation">-</span><span class="token punctuation">-</span>slaveof 192.168.109.100 6379 <span class="token punctuation">-</span><span class="token punctuation">-</span>replica<span class="token punctuation">-</span>announce<span class="token punctuation">-</span>ip 192.168.109.100 <span class="token punctuation">-</span><span class="token punctuation">-</span>replica<span class="token punctuation">-</span>announce<span class="token punctuation">-</span>port 6382 <span class="token punctuation">-</span><span class="token punctuation">-</span>requirepass test1234 <span class="token punctuation">-</span><span class="token punctuation">-</span>masterauth test1234    <span class="token comment" spellcheck="true"># Redis 从实例 03，复制主实例 6379，监听端口 6382</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> sentinel    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 26379<span class="token punctuation">:</span><span class="token number">26379</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /root/redis/sentinel/conf<span class="token punctuation">:</span>/etc/redis/sentinel/conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel /etc/redis/sentinel/conf/sentinel.conf     <span class="token comment" spellcheck="true"># Redis Sentinel 实例，端口 26379，监控 Redis 主实例和从实例</span></code></pre><p>sentinel.conf 配置文件内容</p><pre class=" language-bash"><code class="language-bash">vim /root/redis/sentinel/conf/sentinel.conf<span class="token comment" spellcheck="true">#添加一下内容</span>port 26379sentinel announce-ip <span class="token string">"192.168.109.100"</span>sentinel monitor redis_master 192.168.109.100 6379 1sentinel auth-pass redis_master test1234 </code></pre><h2 id="搭建服务"><a href="#搭建服务" class="headerlink" title="搭建服务"></a>搭建服务</h2><pre class=" language-bash"><code class="language-bash">docker-compose -f docker-compose-redis.yml up -d</code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401040947188.png"/><p>查看哨兵日志：</p><img src="https://www.yangpengsky.top:9000/myblog/images/2024/01/202401040942245.png"/><h2 id="springboot项目环境准备："><a href="#springboot项目环境准备：" class="headerlink" title="springboot项目环境准备："></a>springboot项目环境准备：</h2><p>maven所需要包引入：</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!--redis--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--连接池依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 单哨兵</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">master</span><span class="token punctuation">:</span> redis_master      <span class="token key atrule">nodes</span><span class="token punctuation">:</span> 192.168.109.100<span class="token punctuation">:</span><span class="token number">26379</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> 10000ms    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> test1234</code></pre><p>redis配置文件：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_demo<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonTypeInfo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>jsontype<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>LaissezFaireSubTypeValidator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月22日 11:02:20 * @packageName com.yangpeng.springboot_jwt.config * @className RedisConfig * @describe TODO */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key的序列化类型</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方法过期，改为下面代码</span>        <span class="token comment" spellcheck="true">//        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span>        objectMapper<span class="token punctuation">.</span><span class="token function">activateDefaultTyping</span><span class="token punctuation">(</span>LaissezFaireSubTypeValidator<span class="token punctuation">.</span>instance<span class="token punctuation">,</span>                ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">,</span> JsonTypeInfo<span class="token punctuation">.</span>As<span class="token punctuation">.</span>PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// value的序列化类型</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>redis工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_demo<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2024年01月02日 13:52:07 * @packageName com.yangpeng.springboot_demo.utils * @className RedisUtil */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 给一个指定的 key 值附加过期时间     *     * @param key     * @param time     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除指定key 的过期时间     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">persist</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundValueOps</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//- - - - - - - - - - - - - - - - - - - - -  String类型 - - - - - - - - - - - - - - - - - - - -</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取值     *     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将值放入缓存     *     * @param key   键     * @param value 值     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将值放入缓存并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) -1为无期限     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量添加 key (重复的键会覆盖)     *     * @param keyAndValue     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchSet</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> keyAndValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiSet</span><span class="token punctuation">(</span>keyAndValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量添加 key-value 只有在键不存在时,才添加     * map 中只要有一个key存在,则全部不添加     *     * @param keyAndValue     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchSetIfAbsent</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> keyAndValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiSetIfAbsent</span><span class="token punctuation">(</span>keyAndValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对一个 key-value 的值进行加减操作,     * 如果该 key 不存在 将创建一个key 并赋值该 number     * 如果 key 存在,但 value 不是长整型 ,将报错     *     * @param key     * @param number     */</span>    <span class="token keyword">public</span> Long <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对一个 key-value 的值进行加减操作,     * 如果该 key 不存在 将创建一个key 并赋值该 number     * 如果 key 存在,但 value 不是 纯数字 ,将报错     *     * @param key     * @param number     */</span>    <span class="token keyword">public</span> Double <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">double</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//- - - - - - - - - - - - - - - - - - - - -  set类型 - - - - - - - - - - - - - - - - - - - -</span>    <span class="token comment" spellcheck="true">/**     * 将数据放入set缓存     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取变量中的值     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">members</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 随机获取变量中指定个数的元素     *     * @param key   键     * @param count 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">randomMembers</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">randomMembers</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 随机获取变量中的元素     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">randomMember</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">randomMember</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 弹出变量中的元素     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">pop</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token string">"setValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取变量中值的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">size</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 检查给定的元素是否在变量中。     *     * @param key 键     * @param obj 元素对象     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMember</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 转移变量的元素值到目的变量。     *     * @param key     键     * @param value   元素对象     * @param destKey 元素对象     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">move</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">,</span> String destKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> destKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量移除set缓存中元素     *     * @param key    键     * @param values 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过给定的key求2个set变量的差值     *     * @param key     键     * @param destKey 键     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Set<span class="token operator">></span> <span class="token function">difference</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String destKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> destKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//- - - - - - - - - - - - - - - - - - - - -  hash类型 - - - - - - - - - - - - - - - - - - - -</span>    <span class="token comment" spellcheck="true">/**     * 加入缓存     *     * @param key 键     * @param map 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取 key 下的 所有  hashkey 和 value     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getHashEntries</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证指定 key 下 有没有指定的 hashkey     *     * @param key     * @param hashKey     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hashKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取指定key的值string     *     * @param key  键     * @param key2 键     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">getMapString</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String key2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"map1"</span><span class="token punctuation">,</span> <span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取指定的值Int     *     * @param key  键     * @param key2 键     * @return     */</span>    <span class="token keyword">public</span> Integer <span class="token function">getMapInt</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String key2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"map1"</span><span class="token punctuation">,</span> <span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 弹出元素并删除     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">popValue</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除指定 hash 的 HashKey     *     * @param key     * @param hashKeys     * @return 删除成功的 数量     */</span>    <span class="token keyword">public</span> Long <span class="token function">delete</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> hashKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 给指定 hash 的 hashkey 做增减操作     *     * @param key     * @param hashKey     * @param number     * @return     */</span>    <span class="token keyword">public</span> Long <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">,</span> <span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 给指定 hash 的 hashkey 做增减操作     *     * @param key     * @param hashKey     * @param number     * @return     */</span>    <span class="token keyword">public</span> Double <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">,</span> Double number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取 key 下的 所有 hashkey 字段     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">hashKeys</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取指定 hash 下面的 键值对 数量     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> Long <span class="token function">hashSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//- - - - - - - - - - - - - - - - - - - - -  list类型 - - - - - - - - - - - - - - - - - - - -</span>    <span class="token comment" spellcheck="true">/**     * 在变量左边添加元素值     *     * @param key     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPush</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取集合指定位置的值。     *     * @param key     * @param index     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">index</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取指定区间的值。     *     * @param key     * @param start     * @param end     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">range</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 把最后一个参数值放到指定集合的第一个出现中间参数的前面，     * 如果中间参数值存在的话。     *     * @param key     * @param pivot     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPush</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String pivot<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向左边批量添加参数元素。     *     * @param key     * @param values     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPushAll</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        redisTemplate.opsForList().leftPushAll(key,"w","x","y");</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向集合最右边添加元素。     *     * @param key     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPushAll</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向左边批量添加参数元素。     *     * @param key     * @param values     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rightPushAll</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//redisTemplate.opsForList().leftPushAll(key,"w","x","y");</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向已存在的集合中添加元素。     *     * @param key     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rightPushIfPresent</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushIfPresent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向已存在的集合中添加元素。     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">listLength</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除集合中的左边第一个元素。     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPop</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPop</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除集合中左边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPop</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPop</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除集合中右边的元素。     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rightPop</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除集合中右边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rightPop</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><pre><code>    @Test    void contextLoads() &#123;//        redisUtil.set(&quot;name&quot;, &quot;zhangsan&quot;);        Object name = redisUtil.get(&quot;empList&quot;);        System.out.println(name);    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署vue+springboot项目到云服务器</title>
      <link href="/2023/11/09/docker-bu-shu-vue-springboot-xiang-mu-dao-yun-fu-wu-qi/"/>
      <url>/2023/11/09/docker-bu-shu-vue-springboot-xiang-mu-dao-yun-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h3><ul><li>一台云服务</li><li>已备案域名</li><li>已安装docker环境</li></ul><h3 id="springboot-镜像"><a href="#springboot-镜像" class="headerlink" title="springboot 镜像"></a>springboot 镜像</h3><p>1.本地打包项目</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://www.yangpengsky.top:9000/myblog/images/2023/11/202311091533456.png" alt="image-20231109153311989"></h2><p>2.上传项目到服务器</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/11/202311091534734.png" alt="image-20231109153450026"></p><p>3.写dockerfile</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 指定基础镜像</span>FROM openjdk:11<span class="token comment" spellcheck="true"># 维护者信息</span>MAINTAINER yangpeng<span class="token comment" spellcheck="true"># 定义匿名卷</span>VOLUME /tmp<span class="token comment" spellcheck="true">#复制文件或修改名称</span>ADD faceBoot-0.0.1-SNAPSHOT.jar faceBoot.jar<span class="token comment" spellcheck="true"># 允许指定的端口</span>EXPOSE 8089ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/faceBoot.jar"</span><span class="token punctuation">]</span></code></pre><p>4.执行</p><pre class=" language-bash"><code class="language-bash">docker build -t faceboot <span class="token keyword">.</span></code></pre><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/11/202311161710193.png" alt="image-20231116171023265"></p><h3 id="vue项目上传"><a href="#vue项目上传" class="headerlink" title="vue项目上传"></a>vue项目上传</h3><pre><code>npm run build #生成部署文件</code></pre><p>在服务</p><pre><code> mkdir /mydata/nginx/html -p mkdir /mydata/nginx/log -p mkdir /mydata/nginx/cert -p</code></pre><p>将前端打包后的项目上传值/mydata/nginx/html </p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/11/202311161735851.png" alt="image-20231116173529084"></p><h3 id="编写docker-compose-yml文件"><a href="#编写docker-compose-yml文件" class="headerlink" title="编写docker-compose.yml文件"></a>编写docker-compose.yml文件</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">faceboot</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> faceboot    <span class="token key atrule">image</span><span class="token punctuation">:</span> faceboot<span class="token punctuation">:</span>latest    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8089<span class="token punctuation">:</span><span class="token number">8089</span>  <span class="token key atrule">faceui</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> faceui    <span class="token key atrule">image</span><span class="token punctuation">:</span>  nginx<span class="token punctuation">:</span>latest    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>      <span class="token punctuation">-</span> 443<span class="token punctuation">:</span><span class="token number">443</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> /mydata/nginx/html<span class="token punctuation">:</span>/usr/share/nginx/html       <span class="token punctuation">-</span> /mydata/nginx/logs<span class="token punctuation">:</span>/var/log/nginx       <span class="token punctuation">-</span> /mydata/nginx/conf<span class="token punctuation">:</span>/etc/nginx       <span class="token punctuation">-</span> /mydata/nginx/cert<span class="token punctuation">:</span>/etc/nginx/cert</code></pre><p>执行命命令</p><pre class=" language-bash"><code class="language-bash">docker-compose up faceboot -ddocker-compose up faceui -d</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> Java </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机网络配置</title>
      <link href="/2023/10/17/xu-ni-ji-wang-luo-pei-zhi/"/>
      <url>/2023/10/17/xu-ni-ji-wang-luo-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="桥接模式网络配置"><a href="#桥接模式网络配置" class="headerlink" title="桥接模式网络配置"></a>桥接模式网络配置</h2><p>1、桥接网络选择则当前连接的网络（在网络中心查看）</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/10/202310171757221.png" alt="image-20220728080808258"></p><p>2、给虚拟机添加一张网卡，选择桥接模式</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/10/202310171757324.png" alt="image-20220728081015104"></p><p>3、进入到网卡所在配置文件目录</p><pre class=" language-shell"><code class="language-shell"> cd /etc/sysconfig/network-scripts/</code></pre><p>4、复制ens33网卡信息作为模板</p><pre class=" language-sh"><code class="language-sh">cp ifcfg-ens33 ifcfg-ens37</code></pre><p>3、添加如下信息</p><pre class=" language-sh"><code class="language-sh">TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens37DEVICE=ens37ONBOOT=noIPADDR=IP地址NETMASK=255.255.255.0GATAWAY=网关（与本地网络一致）</code></pre><p>4、重启网络配置</p><pre class=" language-sh"><code class="language-sh">systemctl  restart NetworkManager</code></pre><p>5、查看网络状态</p><pre class=" language-sh"><code class="language-sh">nmcli device status</code></pre><h2 id="NAT模式网络配置"><a href="#NAT模式网络配置" class="headerlink" title="NAT模式网络配置"></a>NAT模式网络配置</h2><ol><li><p>设置net模式</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/10/202310171757160.png" alt="image-20220729221723044"></p></li></ol><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/10/202310171758437.png" alt="image-20220729221751285"></p><p>注意： VMware Network Adapter VMnet8保证是启用状态</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/10/202310171758729.png" alt="image-20220729221813783"></p><p>2.设置静态ip</p><blockquote><p>注意</p><p>在普通用户下不能修改网卡的配置信息；所以我们要切换到root用户进行ip配置</p></blockquote><p>3.修改网卡配置文件</p><p>vi /etc/sysconfig/network-scripts/ifcfg-ens33</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/10/202310171758903.png" alt="image-20220729222021159"></p><p>BOOTPROTO设置为静态static </p><p>IPADDR设置ip地址 </p><p>NETMASK设置子网掩码 </p><p>GATEWAY设置网关</p><p> ONBOOT设置为true在系统启动时是否激活网卡 </p><p>执行保存</p><p>4.代码如下</p><pre class=" language-shell"><code class="language-shell">TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticIPADDR=192.168.23.129NETMASK=255.255.255.0GATEWAY=192.168.23.2DEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=2c2371f1-ef29-4514-a568-c4904bd11c82DEVICE=ens33ONBOOT=true</code></pre><p>5.重启网络</p><pre class=" language-shell"><code class="language-shell">systemctl restart network</code></pre>]]></content>
      
      
      <categories>
          
          <category> Liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot配置多数据源</title>
      <link href="/2023/08/31/springboot-pei-zhi-duo-shu-ju-yuan/"/>
      <url>/2023/08/31/springboot-pei-zhi-duo-shu-ju-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>多数据源的应用背景在当今信息时代非常重要，这是因为各种组织和企业需要从不同的数据来源中汇总、分析和利用数据来支持业务决策、创新和发展。大型企业通常有多个部门和业务单元，它们可能使用不同的系统和工具来收集和存储数据。多数据源应用可以帮助企业将这些散乱的数据整合到一个集中的数据仓库中，以便更好地理解整个组织的运营情况，进行跨部门分析，提高业务效率。多数据源应用背景涵盖了许多不同的领域，它们都可以从多个来源中收集和整合数据，以提供更深入、全面和准确的信息，从而支持更明智的决策和更好的业务成果。</p><h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--mybatis-plus--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mysql--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        druid--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 请确保使用最新版本 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="在YAML文件中定义数据源所需的数据"><a href="#在YAML文件中定义数据源所需的数据" class="headerlink" title="在YAML文件中定义数据源所需的数据"></a>在YAML文件中定义数据源所需的数据</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">mysql-datasource1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">## 声明第一个数据源所需的数据</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/sso_db<span class="token punctuation">?</span>useSSL=true<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> yangpeng      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">mysql-datasource2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">## 声明第二个数据源所需的数据</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/empdb<span class="token punctuation">?</span>useSSL=true<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> yangpeng      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/*.xml <span class="token comment" spellcheck="true">## 配置MyBatis-Plus扫描Mapper文件的位置</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.yangpeng.datasource.entity <span class="token comment" spellcheck="true">## 创建别名的类所在的包</span></code></pre><h3 id="结构如图所示"><a href="#结构如图所示" class="headerlink" title="结构如图所示"></a>结构如图所示</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/09/202309131516782.png"/><h3 id="定义多个数据源"><a href="#定义多个数据源" class="headerlink" title="定义多个数据源"></a>定义多个数据源</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"mysqlDataSource1"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.mysql-datasource1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DruidDataSource build <span class="token operator">=</span> DruidDataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> build<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"mysqlDataSource2"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.mysql-datasource2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DruidDataSource build <span class="token operator">=</span> DruidDataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> build<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>@ConfigurationProperties注解用于将YAML中指定的数据创建成指定的对象，但是，YAML中的数据必须要与对象对象中的属性同名，不然无法由Spring Boot完成赋值。</p><p>由于我们要定义多个数据源，所以在Spring Boot数据源自动配置类中就无法确定导入哪个数据源来完成初始化，所以我们就需要禁用掉Spring Boot的数据源自动配置类，然后使用我们自定义的数据源配置类来完成数据源的初始化与管理。</p><pre class=" language-javascript"><code class="language-javascript">@<span class="token function">SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span>DataSourceAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>@<span class="token function">MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.yangpeng.datasource.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatasourceApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DatasourceApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在启动类上声明需要禁用的自动配置类：exclude = {DataSourceAutoConfiguration.class}</p><h3 id="实现DataSource接口"><a href="#实现DataSource接口" class="headerlink" title="实现DataSource接口"></a>实现DataSource接口</h3><p>缺点：产生大量的代码冗余，在代码中存在硬编码。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Primary</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSource</span> <span class="token keyword">implements</span> <span class="token class-name">DataSource</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//使用ThreadLocal而不是String，可以在多线程的时候保证数据的可靠性</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> DataSource mysqlDataSource1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注入第一个数据源</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> DataSource mysqlDataSource2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注入第二个数据源</span>    <span class="token keyword">public</span> <span class="token function">DynamicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用构造方法初始化ThreadLocal的值</span>        flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过修改ThreadLocal来修改数据源，</span>        <span class="token comment" spellcheck="true">// 为什么通过修改状态就能改变已经注入的数据源？ 这就得看源码了。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> mysqlDataSource1<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> mysqlDataSource2<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> PrintWriter <span class="token function">getLogWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLogWriter</span><span class="token punctuation">(</span>PrintWriter out<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLoginTimeout</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLoginTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Logger <span class="token function">getParentLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLFeatureNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">unwrap</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> iface<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isWrapperFor</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> iface<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实现DataSource接口我们本质上只使用了一个方法，就是getConnection()这个无参的方法，但是DataSource接口中所有的方法我们也都需要实现，只是不用写方法体而已，也就是存在了很多的 “废方法” 。<br>@Primary注解 == @Order(1)，用于设置此类的注入顺序。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/emp_list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">showEmpList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DynamicDataSource<span class="token punctuation">.</span>flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改数据源的状态</span>       List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> list<span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user_list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">showUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DynamicDataSource<span class="token punctuation">.</span>flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改数据源的状态</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h2><h3 id="继承AbstrictRoutingDataSource类"><a href="#继承AbstrictRoutingDataSource类" class="headerlink" title="继承AbstrictRoutingDataSource类"></a>继承AbstrictRoutingDataSource类</h3><p>减少了代码的冗余，但是还是会存在硬编码。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Primary</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> DataSource mysqlDataSource1<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> DataSource mysqlDataSource2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DynamicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 通过Key来得到数据源</span>        <span class="token keyword">return</span> flag<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> targetDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDataSource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">,</span>mysqlDataSource1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将第一个数据源设置为默认的数据源。</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span>mysqlDataSource1<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDataSource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">,</span>mysqlDataSource2<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 将Map对象赋值给AbstrictRoutingDataSource内部的Map对象中。</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>targetDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/emp_list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">showEmpList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DynamicDataSource<span class="token punctuation">.</span>flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改数据源的状态</span>       List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> list<span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user_list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">showUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DynamicDataSource<span class="token punctuation">.</span>flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改数据源的状态</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用Spring-AOP-自定义注解的形式"><a href="#使用Spring-AOP-自定义注解的形式" class="headerlink" title="使用Spring AOP + 自定义注解的形式"></a>使用Spring AOP + 自定义注解的形式</h2><p>Spring AOP + 自定义注解的形式是一种推荐的写法，减少代码的冗余且不存在硬编码。<br>此方法适合对指定功能操作指定数据库的模式。</p><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mybatis-plus--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mysql--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        druid--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 请确保使用最新版本 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>防止数据源自动注入</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span>DataSourceAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.yangpeng.servethree.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServethreeApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ServethreeApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="在YAML文件中定义数据源所需的数据-1"><a href="#在YAML文件中定义数据源所需的数据-1" class="headerlink" title="在YAML文件中定义数据源所需的数据"></a>在YAML文件中定义数据源所需的数据</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">mysql-datasource1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">## 声明第一个数据源所需的数据</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/sso_db<span class="token punctuation">?</span>useSSL=true<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> yangpeng      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">mysql-datasource2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">## 声明第二个数据源所需的数据</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/empdb<span class="token punctuation">?</span>useSSL=true<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> yangpeng      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/*.xml <span class="token comment" spellcheck="true">## 配置MyBatis-Plus扫描Mapper文件的位置</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.yangpeng.datasource.entity <span class="token comment" spellcheck="true">## 创建别名的类所在的包</span></code></pre><h3 id="结构如图所示-1"><a href="#结构如图所示-1" class="headerlink" title="结构如图所示"></a>结构如图所示</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/09/202309131604655.png"/><h3 id="定义枚举来表示数据源的标识"><a href="#定义枚举来表示数据源的标识" class="headerlink" title="定义枚举来表示数据源的标识"></a>定义枚举来表示数据源的标识</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> DataSourceType <span class="token punctuation">{</span>    MYSQL_DATASOURCE1<span class="token punctuation">,</span>    MYSQL_DATASOURCE2<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><h3 id="继承AbstractRoutingDataSource类"><a href="#继承AbstractRoutingDataSource类" class="headerlink" title="继承AbstractRoutingDataSource类"></a>继承AbstractRoutingDataSource类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Primary</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceManagement</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> DataSource mysqlDataSource1<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> DataSource mysqlDataSource2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DataSourceManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>DataSourceType<span class="token punctuation">.</span>MYSQL_DATASOURCE1<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> flag<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> targetDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDataSource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DataSourceType<span class="token punctuation">.</span>MYSQL_DATASOURCE1<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mysqlDataSource1<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDataSource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DataSourceType<span class="token punctuation">.</span>MYSQL_DATASOURCE2<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mysqlDataSource2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>targetDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span>mysqlDataSource1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">TargetDataSource</span> <span class="token punctuation">{</span>    DataSourceType <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> DataSourceType<span class="token punctuation">.</span>MYSQL_DATASOURCE1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="定义注解的实现类"><a href="#定义注解的实现类" class="headerlink" title="定义注解的实现类"></a>定义注解的实现类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetDataSourceAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"@within(com.yangpeng.servethree.annotation.TargetDataSource) || @annotation(com.yangpeng.servethree.annotation.TargetDataSource)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeNoticeUpdateDataSource</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TargetDataSource annotation <span class="token operator">=</span> null<span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token operator">></span> target <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>TargetDataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断类上是否标注着注解</span>            annotation <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>TargetDataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"类上标注了注解"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Method method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>TargetDataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断方法上是否标注着注解，如果类和方法上都没有标注，则报错</span>                annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>TargetDataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"方法上标注了注解"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"@TargetDataSource注解只能用于类或者方法上, 错误出现在:["</span> <span class="token operator">+</span>                        target<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"];"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 切换数据源</span>        DataSourceManagement<span class="token punctuation">.</span>flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmpService empService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/emp_list"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将注解标注在方法上，表示此方法使用数据源2</span>    <span class="token annotation punctuation">@TargetDataSource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> DataSourceType<span class="token punctuation">.</span>MYSQL_DATASOURCE2<span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">showEmpList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> list<span class="token operator">=</span> empService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token comment" spellcheck="true">// 将注解标注在类上，表示本类中所有的方法都是使用数据源1</span><span class="token annotation punctuation">@TargetDataSource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> DataSourceType<span class="token punctuation">.</span>MYSQL_DATASOURCE1<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user_list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">showUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>DataSourceType<span class="token punctuation">.</span>MYSQL_DATASOURCE1<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="通过SqlSessionFactory指定的数据源来操作指定目录的XML文件"><a href="#通过SqlSessionFactory指定的数据源来操作指定目录的XML文件" class="headerlink" title="通过SqlSessionFactory指定的数据源来操作指定目录的XML文件"></a>通过SqlSessionFactory指定的数据源来操作指定目录的XML文件</h2><h3 id="引入依赖-2"><a href="#引入依赖-2" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--mybatis-plus--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 多数据源支持 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mysql--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        druid--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 请确保使用最新版本 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="在YAML文件中定义数据源所需的数据-2"><a href="#在YAML文件中定义数据源所需的数据-2" class="headerlink" title="在YAML文件中定义数据源所需的数据"></a>在YAML文件中定义数据源所需的数据</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#    dynamic:</span><span class="token comment" spellcheck="true">#      primary: first</span>    <span class="token key atrule">first</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">## 声明第一个数据源所需的数据</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/sso_db<span class="token punctuation">?</span>useSSL=true<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> yangpeng      <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">second</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">## 声明第二个数据源所需的数据</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/empdb<span class="token punctuation">?</span>useSSL=true<span class="token important">&amp;serverTimezone</span>=Asia/Shanghai      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> yangpeng      <span class="token key atrule">driverClassName</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver</code></pre><h3 id="结构如图所示-2"><a href="#结构如图所示-2" class="headerlink" title="结构如图所示"></a>结构如图所示</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/09/202309131618296.png"/><h3 id="针对Mapper层通过SqlSessionFactory指定数据源来操作"><a href="#针对Mapper层通过SqlSessionFactory指定数据源来操作" class="headerlink" title="针对Mapper层通过SqlSessionFactory指定数据源来操作"></a>针对Mapper层通过SqlSessionFactory指定数据源来操作</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.yangpeng.servefour.firstBak.mapper"</span><span class="token punctuation">,</span>sqlSessionFactoryRef <span class="token operator">=</span> <span class="token string">"firstBakSqlSessionFactory"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstDataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.datasource.first.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.datasource.first.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.datasource.first.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.datasource.first.driverClassName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driverClassName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 本数据源扫描的mapper路径     */</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String MAPPER_LOCATION <span class="token operator">=</span> <span class="token string">"classpath*:mapper/firstBak/*.xml"</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span> 创建数据源     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"firstBakDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> DataSource <span class="token function">getDateSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataSource build <span class="token operator">=</span>  DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">driverClassName</span><span class="token punctuation">(</span>driverClassName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> build<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建SessionFactory     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"firstBakSqlSessionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">firstBakSqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"firstBakDataSource"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();</span><span class="token comment" spellcheck="true">//        bean.setDataSource(dataSource);</span><span class="token comment" spellcheck="true">//        //设置mapper配置文件</span><span class="token comment" spellcheck="true">//        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(MAPPER_LOCATION));</span><span class="token comment" spellcheck="true">//        return bean.getObject();</span>        <span class="token comment" spellcheck="true">//不使用下面这个无法使用mybatis-plus提供的BaseMapper中的方法，需要增加mybatis-plus 的拓展依赖</span>        MybatisSqlSessionFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisSqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>MAPPER_LOCATION<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建事务管理器     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"firstBakTransactionManger"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSourceTransactionManager <span class="token function">firstBakTransactionManger</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"firstBakDataSource"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建SqlSessionTemplate     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"firstBakSqlSessionTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SqlSessionTemplate <span class="token function">firstBakSqlSessionTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"firstBakSqlSessionFactory"</span><span class="token punctuation">)</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.yangpeng.servefour.secondBak.mapper"</span><span class="token punctuation">,</span>sqlSessionFactoryRef <span class="token operator">=</span> <span class="token string">"secondBakSqlSessionFactory"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondDataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.datasource.second.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.datasource.second.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.datasource.second.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.datasource.second.driverClassName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driverClassName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**本数据源扫描的mapper路径*/</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String MAPPER_LOCATION <span class="token operator">=</span> <span class="token string">"classpath*:mapper/secondBak/*.xml"</span><span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>创建数据源<span class="token operator">*</span><span class="token operator">/</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondBakDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> DataSource <span class="token function">getDateSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataSource build <span class="token operator">=</span>  DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">driverClassName</span><span class="token punctuation">(</span>driverClassName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> build<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建SessionFactory     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondBakSqlSessionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">secondBakSqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondBakDataSource"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//不使用下面这个无法使用mybatis-plus提供的BaseMapper中的方法，需要增加mybatis-plus 的拓展依赖</span>        MybatisSqlSessionFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisSqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>MAPPER_LOCATION<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建事务管理器     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"secondBakTransactionManger"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSourceTransactionManager <span class="token function">secondBakTransactionManger</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondBakDataSource"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建SqlSessionTemplate     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondBakSqlSessionTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SqlSessionTemplate <span class="token function">secondBakSqlSessionTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondBakSqlSessionFactory"</span><span class="token punctuation">)</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user_list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">showUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> EmpMapper empMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/emp_list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> <span class="token function">showEmpList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Emp<span class="token operator">></span> list <span class="token operator">=</span> empMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>minio配置https访问</title>
      <link href="/2023/08/30/minio-pei-zhi-https-fang-wen/"/>
      <url>/2023/08/30/minio-pei-zhi-https-fang-wen/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>MinIO是一个开源的对象存储服务器，它允许您构建私有的云存储服务。它是一个轻量级的、高性能的分布式存储系统，兼容Amazon S3（Simple Storage Service）API，可以用于存储和检索大规模的非结构化数据，例如图像、视频、日志文件、备份等。在我们的线上环境，是不允许通过ip和http访问Minio中的文件的，因此，我们就需要给它配置https。</p><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>1.阿里云服务一台</p><p>2.域名（已备案）</p><h3 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h3><img  src="https://www.yangpengsky.top:9000/myblog/images/2023/08/202308301510327.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/08/202308301511050.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/08/202308301527458.png"/><h3 id="centos7安装docker-compose"><a href="#centos7安装docker-compose" class="headerlink" title="centos7安装docker-compose"></a>centos7安装docker-compose</h3><h4 id="步骤-1：更新系统"><a href="#步骤-1：更新系统" class="headerlink" title="步骤 1：更新系统"></a><strong>步骤 1：更新系统</strong></h4><p>在安装 Docker Compose 之前，首先确保你的系统是最新的。打开终端，并以 root 或具有 sudo 权限的用户身份运行以下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum update</code></pre><h4 id="步骤-2：安装-Docker-Compose"><a href="#步骤-2：安装-Docker-Compose" class="headerlink" title="步骤 2：安装 Docker Compose"></a><strong>步骤 2：安装 Docker Compose</strong></h4><p>1.下载 Docker Compose 的可执行文件。你可以从 GitHub 的 Docker Compose 仓库下载最新版本：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> curl -L <span class="token string">"https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>"</span> -o /usr/local/bin/docker-compose</code></pre><p>2.赋予可执行权限：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose</code></pre><p>3.创建一个符号链接以便更方便地运行 <code>docker-compose</code> 命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</code></pre><h4 id="步骤-3：验证安装"><a href="#步骤-3：验证安装" class="headerlink" title="步骤 3：验证安装"></a><strong>步骤 3：验证安装</strong></h4><p>安装完成后，可以运行以下命令来验证 Docker Compose 是否成功安装：</p><pre class=" language-bash"><code class="language-bash">docker-compose --version</code></pre><h3 id="部署minio"><a href="#部署minio" class="headerlink" title="部署minio"></a>部署minio</h3><p>1.编辑文件</p><pre class=" language-bash"><code class="language-bash">vim /usr/local/minio/docker-compose.yml</code></pre><p>2.插入如下内容</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">minio</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> minio/minio    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> myminio    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># api 端口</span>      <span class="token punctuation">-</span> <span class="token string">"9000:9000"</span>      <span class="token comment" spellcheck="true"># 控制台端口</span>      <span class="token punctuation">-</span> <span class="token string">"9090:9090"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 时区上海</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token comment" spellcheck="true"># 管理后台用户名</span>      <span class="token key atrule">MINIO_ROOT_USER</span><span class="token punctuation">:</span> admin      <span class="token comment" spellcheck="true"># 管理后台密码，最小8个字符</span>      <span class="token key atrule">MINIO_ROOT_PASSWORD</span><span class="token punctuation">:</span> 2023@admin      <span class="token comment" spellcheck="true"># https需要指定域名,不需要https时以下两项空着</span>      <span class="token key atrule">MINIO_SERVER_URL</span><span class="token punctuation">:</span> <span class="token string">"https://www.xxx.com:9000"</span>      <span class="token key atrule">MINIO_BROWSER_REDIRECT_URL</span><span class="token punctuation">:</span> <span class="token string">"https://www.xxx.com:9090"</span>      <span class="token comment" spellcheck="true"># 开启压缩 on 开启 off 关闭</span>      <span class="token key atrule">MINIO_COMPRESS</span><span class="token punctuation">:</span> <span class="token string">"off"</span>      <span class="token comment" spellcheck="true"># 扩展名 .pdf,.doc 为空 所有类型均压缩</span>      <span class="token key atrule">MINIO_COMPRESS_EXTENSIONS</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token comment" spellcheck="true"># mime 类型 application/pdf 为空 所有类型均压缩</span>      <span class="token key atrule">MINIO_COMPRESS_MIME_TYPES</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 映射当前目录下的data目录至容器内/data目录</span>      <span class="token punctuation">-</span> /docker/minio/data<span class="token punctuation">:</span>/data      <span class="token comment" spellcheck="true"># 映射配置目录</span>      <span class="token punctuation">-</span> /docker/minio/config<span class="token punctuation">:</span>/root/.minio/    <span class="token key atrule">command</span><span class="token punctuation">:</span> server <span class="token punctuation">-</span><span class="token punctuation">-</span>address '<span class="token punctuation">:</span>9000' <span class="token punctuation">-</span><span class="token punctuation">-</span>console<span class="token punctuation">-</span>address '<span class="token punctuation">:</span>9090' /data  <span class="token comment" spellcheck="true"># 指定容器中的目录 /data</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre><p>2.创建文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /docker/minio/data<span class="token function">mkdir</span> -p /docker/minio/config</code></pre><p>3.将密钥上传至/docker/minio/config/certs 目录下，并将（私钥）.pem文件重命名为public.crt，将（公钥）.key文件重命名为private.key</p><p>4.启动容器</p><pre class=" language-bash"><code class="language-bash">docker-compose up -d</code></pre><h3 id="访问minio后台"><a href="#访问minio后台" class="headerlink" title="访问minio后台"></a>访问minio后台</h3><pre class=" language-bash"><code class="language-bash">https://www.xxx.com:9000</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合aop</title>
      <link href="/2023/07/26/springboot-zheng-he-aop/"/>
      <url>/2023/07/26/springboot-zheng-he-aop/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Spring中，AOP（面向切面编程）是一种编程范式，用于将横切关注点（Cross-cutting Concerns）与核心业务逻辑（Core Concerns）分离。横切关注点是那些存在于应用程序各处的功能或需求，它们不属于特定的业务逻辑，例如日志记录、性能监控、安全性检查等。</p><p>AOP通过将这些横切关注点抽象为切面（Aspect），然后将它们独立于主业务逻辑织入到应用程序中，以实现代码的模块化和重用性。这种分离和组合的方式使得应用程序的核心逻辑更加简洁和清晰。</p><p>在Spring中，AOP提供了一种优雅的方式来实现切面编程。Spring AOP基于动态代理技术和反射机制，允许开发人员通过简单的配置来定义切面，然后将其应用到目标类的特定方法上。</p><h3 id="Spring-AOP的几种类型"><a href="#Spring-AOP的几种类型" class="headerlink" title="Spring AOP的几种类型"></a>Spring AOP的几种类型</h3><p>Spring AOP支持以下几种类型的通知（Advice）：</p><ol><li>前置通知（Before Advice）：在目标方法执行前执行。</li><li>后置通知（After Advice）：在目标方法执行后（无论是否发生异常）执行。</li><li>环绕通知（Around Advice）：在目标方法执行前后执行，可以完全控制方法的执行流程。</li><li>返回通知（After Returning Advice）：在目标方法成功执行后执行。</li><li>异常通知（After Throwing Advice）：在目标方法抛出异常后执行。</li></ol><h3 id="Pointcut用法"><a href="#Pointcut用法" class="headerlink" title="Pointcut用法"></a>Pointcut用法</h3><p>在Spring AOP中，<code>@Pointcut</code>注解用于定义切入点表达式，它决定了哪些方法会被织入切面的通知。<code>execution</code>规则是切入点表达式的一种常用规则，它指定了需要匹配的方法执行。</p><p><code>execution</code>规则的基本语法如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(modifiers-pattern? return-type-pattern declaring-type-pattern? method-name-pattern(param-pattern) throws-pattern?)"</span><span class="token punctuation">)</span></code></pre><p>这里的各个部分含义如下：</p><ul><li><code>modifiers-pattern</code>：指定方法的访问修饰符，如<code>public</code>、<code>private</code>、<code>protected</code>等。可以使用通配符<code>*</code>表示任意修饰符，留空表示所有修饰符。</li><li><code>return-type-pattern</code>：指定方法的返回类型。使用全限定类名表示，如<code>java.lang.String</code>。可以使用通配符<code>*</code>表示任意返回类型，留空表示任意返回类型。</li><li><code>declaring-type-pattern</code>：指定方法所属的类。使用全限定类名表示，如<code>com.example.MyClass</code>。可以使用通配符<code>*</code>表示任意类，留空表示任意类。</li><li><code>method-name-pattern</code>：指定方法名，如<code>login</code>。可以使用通配符<code>*</code>表示任意方法名。</li><li><code>param-pattern</code>：指定方法的参数列表。使用全限定类名表示，如<code>java.lang.String</code>。可以使用通配符<code>*</code>表示任意参数类型，留空表示无参数。</li><li><code>throws-pattern</code>：指定方法抛出的异常。使用全限定类名表示，如<code>java.lang.NullPointerException</code>。可以使用通配符<code>*</code>表示任意异常类型，留空表示无异常。</li></ul><p><code>execution</code>规则中的每个部分都是可选的，你可以根据需要选择性地使用它们来匹配特定的方法。</p><p>以下是一些例子来演示不同类型的<code>execution</code>规则：</p><ul><li><p>匹配所有public方法：</p><pre class=" language-java"><code class="language-java">javaCopy code<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * *(..))"</span><span class="token punctuation">)</span></code></pre></li><li><p>匹配<code>com.example</code>包下的所有方法：</p><pre class=" language-java"><code class="language-java">javaCopy code<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.example..*.*(..))"</span><span class="token punctuation">)</span></code></pre></li><li><p>匹配<code>MyClass</code>类中的所有方法：</p><pre class=" language-java"><code class="language-java">javaCopy code<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.example.MyClass.*(..))"</span><span class="token punctuation">)</span></code></pre></li><li><p>匹配返回类型为<code>java.lang.String</code>的所有方法：</p><pre class=" language-java"><code class="language-java">javaCopy code<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(String *(..))"</span><span class="token punctuation">)</span></code></pre></li><li><p>匹配参数为<code>int</code>类型的所有方法：</p><pre class=" language-java"><code class="language-java">javaCopy code<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* *(int))"</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="自定义返回方法运行时间注解"><a href="#自定义返回方法运行时间注解" class="headerlink" title="自定义返回方法运行时间注解"></a>自定义返回方法运行时间注解</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年07月26日 14:36:38 * @packageName com.yangpeng.springboot_jwt.annotation * @className RunTimeLog */</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RunTimeLog</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="自定义Aspect类"><a href="#自定义Aspect类" class="headerlink" title="自定义Aspect类"></a>自定义Aspect类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>aspect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>UserEntity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>response<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年07月26日 16:23:28 * @packageName com.yangpeng.springboot_jwt.aspect * @className ControllerAspect */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置切面的优先级，数字越小优先级越高</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserControllerAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//@Pointcut("execution(modifiers-pattern? return-type-pattern declaring-type-pattern? method-name-pattern(param-pattern) throws-pattern?)")</span>    <span class="token function">UserControllerAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"=============初始化UserControllerAspect==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.yangpeng.springboot_jwt.controller.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//      @Pointcut("execution(* com.example.MyClass.*(..))")</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">aroundAdvice</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取将要执行的方法名称</span>        String methodName <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取执行方法的参数</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argst <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>argst<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取第一个参数的类型</span>            String firstType <span class="token operator">=</span> argst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"firstType:{}"</span><span class="token punctuation">,</span>firstType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>argst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">UserEntity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                UserEntity userEntity <span class="token operator">=</span> <span class="token punctuation">(</span>UserEntity<span class="token punctuation">)</span> argst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"user原来的username：{}"</span><span class="token punctuation">,</span>userEntity<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                userEntity.setUsername("123456");</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 执行原方法</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>Result<span class="token punctuation">)</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">"返回信息被修改了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 声明该方法是一个前置通知，     * 方法执行之前执行     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"========={}前置通执行============="</span><span class="token punctuation">,</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 声明该方法是一个后置通知，目标方法执行后执行，     * 就算目标方法抛出异常也会执行     * 但是后置通知不能访问目标方法返回的结果     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"========={}后置通知执行============="</span><span class="token punctuation">,</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在目标方法正常执行完了之后执行，     * 可以访问到方法的返回值:result     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Object result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"========={}返回通知通执行============="</span><span class="token punctuation">,</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在目标方法抛出异常执行,也可以指定出现制定异常时执行，     * Exception改为需要指定的一场类型     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThorwing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>aspect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RunTimeLog<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年07月26日 15:45:57 * @packageName com.yangpeng.springboot_jwt.aspect * @className RunTimeLogAspect */</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunTimeLogAspect</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> startTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"@annotation(runTimeLog)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> RunTimeLog runTimeLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"@annotation(runTimeLog)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> RunTimeLog runTimeLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> elapsedTime <span class="token operator">=</span> endTime <span class="token operator">-</span> startTime<span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} 方法，执行时间: {} 毫秒"</span><span class="token punctuation">,</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>elapsedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Controller接口"><a href="#Controller接口" class="headerlink" title="Controller接口"></a>Controller接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PassToken<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RunTimeLog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>UserEntity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>AppExceptionCodeMsg<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>AppException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>response<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JwtUtils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RedisUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>SaltMD5Util<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>CrossOrigin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestBody<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月21日 12:37:31 * @packageName com.yangpeng.springboot_jwt.controller * @className UserController * @describe TODO */</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JwtUtils jwtUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisUtil redisUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SaltMD5Util saltMD5Util<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PassToken</span>    <span class="token annotation punctuation">@RunTimeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserEntity user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserEntity userEntity <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>saltMD5Util<span class="token punctuation">.</span><span class="token function">verifySaltPassword</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userEntity<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 生成token</span>                String token <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userEntity<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>PASSWORD_ERRPR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>PASSWORD_ERRPR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RunTimeLog</span>    <span class="token keyword">public</span> Object <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里是你的方法逻辑</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 一些耗时操作1</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/07/202307261752236.png" alt="image-20230726175158619"></p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/07/202307261753025.png" alt="image-20230726175305523"></p><p>Spring AOP不仅支持基于XML的配置方式，还支持基于注解的配置方式，使得AOP的使用更加便捷和灵活。</p><p>总结而言，Spring中的AOP是一种实现面向切面编程的技术，允许开发人员将横切关注点与核心业务逻辑分离，并通过简单的配置将切面应用到目标方法中。这种方式可以提高代码的可维护性和可扩展性，同时让核心业务逻辑保持简洁和聚焦。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue集成axios进行二次封装</title>
      <link href="/2023/06/28/vue-ji-cheng-axios-jin-xing-er-ci-feng-zhuang/"/>
      <url>/2023/06/28/vue-ji-cheng-axios-jin-xing-er-ci-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Axios是一个基于Promise的HTTP客户端，用于浏览器和Node.js中发送HTTP请求。它是一个流行的第三方库，提供了一种简洁而强大的方式来进行网络请求。</p><p>Axios具有以下特点和功能：</p><ol><li>支持浏览器和Node.js：Axios可以在浏览器和Node.js环境中使用，使得在前端和后端开发中都能方便地发送HTTP请求。</li><li>Promise支持：Axios基于Promise实现，可以使用Promise的特性进行异步处理，包括使用async/await进行异步编程。</li><li>提供简洁的API：Axios提供了一组简洁而易用的API，可以轻松地发送各种类型的HTTP请求，包括GET、POST、PUT、DELETE等。</li><li>支持请求和响应拦截器：可以通过拦截器对请求和响应进行全局的处理，如在请求发送前添加请求头、在响应返回后对数据进行处理等。</li><li>支持取消请求：Axios提供了取消请求的功能，可以取消尚未完成的请求，避免不必要的网络请求和资源浪费。</li><li>提供请求和响应的转换：Axios支持自定义请求和响应的数据转换器，可以在发送请求和接收响应时对数据进行转换，如JSON、FormData等。</li></ol><p>总之，Axios是一个功能强大且易于使用的HTTP客户端，它简化了在前端和后端进行网络请求的过程，并提供了丰富的功能和灵活的配置选项。它成为了许多开发者首选的HTTP请求库之一。</p><h3 id="axios一次封装"><a href="#axios一次封装" class="headerlink" title="axios一次封装"></a>axios一次封装</h3><p>1.在utils包新建文件request.js添加如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 封装axios用于发送请求 */</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Element <span class="token keyword">from</span> <span class="token string">"element-ui"</span><span class="token comment" spellcheck="true">/*(1)request 相当于 Axios 的实例对象(2)为什么要有request,而不是直接用axios  * 项目开发中，有可能会有两个基地址  * 不同的接口配置不同（有的要token,有的不要token）*/</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">"http://localhost:8088"</span> <span class="token comment" spellcheck="true">//后端服务器地址</span><span class="token keyword">const</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    timeout<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 请求超时：当5s没有响应就会结束请求</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">"application/json; charset=utf-8"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 添加请求拦截器，一下内容是axios的拦截器，可以不用写</span>request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在发送请求之前做些什么</span>        config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> config    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对请求错误做些什么</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 添加响应拦截器</span>request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对响应数据做点什么</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">||</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">201</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> response        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Element<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> <span class="token punctuation">{</span> duration<span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对响应错误做点什么</span>        Element<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> <span class="token punctuation">{</span> duration<span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> request</code></pre><h3 id="axios的二次封装"><a href="#axios的二次封装" class="headerlink" title="axios的二次封装"></a>axios的二次封装</h3><p>例如：对用户的操作，在api文件下创建userApi.js文件，添加如下内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">"@/utils/request"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">userLogin</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> user    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">'/file/upload'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">'post'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    userLogin<span class="token punctuation">,</span>    getUserList<span class="token punctuation">}</span> </code></pre><h3 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> LoginView <span class="token keyword">from</span> <span class="token string">'@/views/LoginView'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> LoginView  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// route level code-splitting</span>    <span class="token comment" spellcheck="true">// this generates a separate chunk (about.[hash].js) for this route</span>    <span class="token comment" spellcheck="true">// which is lazy-loaded when the route is visited.</span>    component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* webpackChunkName: "about" */</span> <span class="token string">'../views/AboutView.vue'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router</code></pre><h3 id="登录使用"><a href="#登录使用" class="headerlink" title="登录使用"></a>登录使用</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80px<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> fit-content<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>账号<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submitForm()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> userApi <span class="token keyword">from</span> <span class="token string">'@/api/userApi'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            labelPosition<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span>            user<span class="token punctuation">:</span> <span class="token punctuation">{</span>                username<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                password<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            userApi<span class="token punctuation">.</span><span class="token function">userLogin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/about"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成jwt实现登录续签</title>
      <link href="/2023/06/25/springboot-ji-cheng-jwt-shi-xian-deng-lu-xu-qian/"/>
      <url>/2023/06/25/springboot-ji-cheng-jwt-shi-xian-deng-lu-xu-qian/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JWT（JSON Web Token）是一种开放标准（RFC 7519），用于在不同实体之间安全传输信息。它是一种轻量级的身份验证和授权机制，通常用于跨网络进行身份验证。</p><p>JWT 由三部分组成，它们使用点号（.）分隔：</p><ol><li>Header（头部）：包含了关于令牌的元数据和算法信息，通常包括令牌类型（”typ”）和所使用的签名算法（”alg”）。 示例：<code>&#123;&quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;&#125;</code></li><li>Payload（负载）：包含了需要传输的数据，可以是用户的身份信息或其他业务相关的数据。JWT 的负载部分没有固定的结构，可以自由定义所需的字段。 示例：<code>&#123;&quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;John Doe&quot;, &quot;iat&quot;: 1516239022&#125;</code></li><li>Signature（签名）：使用密钥对头部和负载进行签名，以确保令牌的完整性和真实性。签名通常使用头部中指定的签名算法和密钥来生成。 示例：<code>HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</code></li></ol><p>JWT 的工作流程如下：</p><ol><li>身份验证：当用户登录成功后，服务器会生成一个 JWT 并返回给客户端。</li><li>请求授权：客户端在每次请求中将 JWT 附加在请求头、请求参数或 Cookie 中发送给服务器。</li><li>服务器验证：服务器在接收到请求时，使用相同的密钥解析 JWT，验证签名的合法性以及检查有效期和其他可选的验证条件。</li><li>响应结果：如果 JWT 通过验证，服务器对请求进行授权处理，并返回相应的数据给客户端。</li></ol><p>由于 JWT 是基于标准的 JSON 格式，易于传输和处理，且可以包含自定义的数据，因此在分布式系统、单点登录、微服务等场景中被广泛使用。它避免了服务器存储会话状态的需求，并提供了一种简单且安全的身份验证和授权机制。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--        jwt相关包--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.11.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.11.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.11.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        java操作jwt包--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">jwt</span><span class="token punctuation">:</span>  <span class="token key atrule">secret</span><span class="token punctuation">:</span> qnAqsQa7600vrTBcr1WB8P8dg4cbgS5i8LZGjWnpREL <span class="token comment" spellcheck="true"># 密钥</span>  <span class="token key atrule">expiration</span><span class="token punctuation">:</span> <span class="token number">1800000 </span><span class="token comment" spellcheck="true"># token 有效期（S) 毫秒 30分钟</span></code></pre><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月21日 11:35:17 * @packageName com.yangpeng.springboot_jwt.annotation * @className PassToken * @describe TODO */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">PassToken</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="jwt工具类"><a href="#jwt工具类" class="headerlink" title="jwt工具类"></a>jwt工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>AppExceptionCodeMsg<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>AppException<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span>security<span class="token punctuation">.</span>Keys<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>SecretKey<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月21日 12:28:28 * @packageName com.yangpeng.springboot_jwt.utils * @className JwtUtils * @describe TODO */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用HS512加密算法 签名     */</span>    <span class="token keyword">static</span> SecretKey key <span class="token operator">=</span> Keys<span class="token punctuation">.</span><span class="token function">secretKeyFor</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS512<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * token有效期 (S)     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.expiration}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long expiration<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建token     *     * @param userId     * @param username     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">createToken</span><span class="token punctuation">(</span>Long userId<span class="token punctuation">,</span> String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String token <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 可以将基本不重要的对象信息放到claims</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"AUTH-USER"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//主题</span>                <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span><span class="token string">"yangpeng"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//发送方</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//签发时间</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expiration<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建token     * @param claims     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">createToken</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String token <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//自定义claims</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//签发时间</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expiration<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//过期时间</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//签名算法和key</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解析token     *     * @param token     * @return     */</span>    <span class="token keyword">public</span> Claims <span class="token function">parseToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//顺带说一句，当Jwt设置了有效期，有效期时间过了之后也会抛出异常，解决办法是try</span>        <span class="token comment" spellcheck="true">//catch一下，将异常抛给统一异常处理类</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Claims claims <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> claims<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> eje<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"===== Token过期 ====="</span><span class="token punctuation">,</span> eje<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>TOKEN_EX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"===== token解析异常 ====="</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>TOKEN_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * token 签发时间     * @param token     * @return     */</span>    <span class="token keyword">public</span>  Date <span class="token function">getIssuedAt</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date issuedAt <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIssuedAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> issuedAt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * token过期时间     * @param token     * @return     */</span>    <span class="token keyword">public</span> Date <span class="token function">getExpiration</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date expiration <span class="token operator">=</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> expiration<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取用户id     *     * @param token     * @return     */</span>    <span class="token keyword">public</span> Long <span class="token function">getUserId</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Long<span class="token punctuation">)</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取用户名     *     * @param token     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断是否过期     *     * @param token     * @param     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isExpiration</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>密码加盐工具类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>binary<span class="token punctuation">.</span>Hex<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>MessageDigest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>NoSuchAlgorithmException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月24日 06:59:58 * @packageName com.yangpeng.springboot_jwt.utils * @className SaltMD5Util * @describe TODO */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaltMD5Util</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 生成普通的MD5密码     *     * @param input     * @return     */</span>    <span class="token keyword">public</span>  String <span class="token function">MD5</span><span class="token punctuation">(</span>String input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MessageDigest md5 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 生成普通的MD5密码</span>            md5 <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"check jdk"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>charArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            byteArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> md5Bytes <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer hexValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> md5Bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> md5Bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>                hexValue<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hexValue<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> hexValue<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成盐和加盐后的MD5码，并将盐混入到MD5码中,对MD5密码进行加强     *     * @param password     * @return     */</span>    <span class="token keyword">public</span>  String <span class="token function">generateSaltPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成一个16位的随机数，也就是所谓的盐</span>        <span class="token comment" spellcheck="true">/**         * 此处的盐也可以定义成一个系统复杂点的常量,而不是非要靠靠随机数随机出来 两种方式任选其一 例如下面这行代码:         * 盐加密 ：SALT的字符串是随意打的，目的是把MD5加密后的再次加密变得复杂         * public static final String SALT = "fskdhfiuhjfshfjhsad4354%@!@#%3";         **/</span>        StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">99999999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">99999999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span> <span class="token operator">-</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 生成盐</span>        String salt <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将盐加到明文中，并生成新的MD5码</span>        password <span class="token operator">=</span> <span class="token function">md5Hex</span><span class="token punctuation">(</span>password <span class="token operator">+</span> salt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将盐混到新生成的MD5码中，之所以这样做是为了后期更方便的校验明文和秘文，也可以不用这么做，不过要将盐单独存下来，不推荐这种方式</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> salt<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cs<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>            cs<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证明文和加盐后的MD5码是否匹配     *     * @param password     * @param md5     * @return     */</span>    <span class="token keyword">public</span>  <span class="token keyword">boolean</span> <span class="token function">verifySaltPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">,</span> String md5<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先从MD5码中取出之前加的盐和加盐后生成的MD5码</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cs1<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            cs1<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cs2<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String salt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cs2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//比较二者是否相同</span>        <span class="token keyword">return</span> <span class="token function">md5Hex</span><span class="token punctuation">(</span>password <span class="token operator">+</span> salt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cs1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成MD5 密码     * @param src     * @return     */</span>    <span class="token keyword">private</span>  String <span class="token function">md5Hex</span><span class="token punctuation">(</span>String src<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MessageDigest md5 <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="自定义jwt拦截器"><a href="#自定义jwt拦截器" class="headerlink" title="自定义jwt拦截器"></a>自定义jwt拦截器</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>interceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>JWTDecodeException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PassToken<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>UserEntity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>AppExceptionCodeMsg<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>AppException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JwtUtils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RedisUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span>HandlerMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月21日 13:45:54 * @packageName com.yangpeng.springboot_jwt.interceptor * @className MyJwtInterceptor * @describe TODO */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJwtInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JwtUtils jwtUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisUtil redisUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从 http 请求头中取出 token</span>        <span class="token comment" spellcheck="true">// 如果不是映射到方法直接通过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果请求为 OPTIONS 请求，则返回 true,否则需要通过jwt验证</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>OPTIONS<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OPTIONS请求，放行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        Method method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//检查是否通过有PassToken注解,有则跳过认证</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>PassToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果有则跳过认证检查</span>            PassToken passToken <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>PassToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>passToken<span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//否则进行token检查</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>NO_TOKEN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jwtUtils<span class="token punctuation">.</span><span class="token function">isExpiration</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>TOKEN_EX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取token中的用户id</span>        Long userId<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            userId <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JWTDecodeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UserEntity userEntity <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userEntity<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>USERNAME_NOT_EXISTS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 验证 token</span>        jwtUtils<span class="token punctuation">.</span><span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//token续签</span>        Date issuedAt <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">getIssuedAt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//签发时间</span>        Date expiration <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//过期时间</span>        Date nowDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前时间</span>        <span class="token comment" spellcheck="true">// 计算当前时间是否超过过期时间的一半，如果是就帮用户续签 --------------------------</span>        <span class="token comment" spellcheck="true">// 此处并不是永久续签，只是为 大于过期时间的一半 且 小于过期时间 的 token 续签</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nowDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> issuedAt<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>expiration<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> issuedAt<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 生成token</span>            String renewToken <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userEntity<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> renewToken<span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="请求拦截"><a href="#请求拦截" class="headerlink" title="请求拦截"></a>请求拦截</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>MyJwtInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月23日 15:01:09 * @packageName com.yangpeng.springboot_jwt.config * @className InterceptorConfig * @describe TODO */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">myJwtInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MyJwtInterceptor <span class="token function">myJwtInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyJwtInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>QueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PassToken<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>UserEntity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>AppExceptionCodeMsg<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>AppException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JwtUtils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RedisUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>SaltMD5Util<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestBody<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月21日 12:37:31 * @packageName com.yangpeng.springboot_jwt.controller * @className UserController * @describe TODO */</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JwtUtils jwtUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisUtil redisUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SaltMD5Util saltMD5Util<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PassToken</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserEntity user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserEntity userEntity <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>saltMD5Util<span class="token punctuation">.</span><span class="token function">verifySaltPassword</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userEntity<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 生成token</span>                String token <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userEntity<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> token<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>PASSWORD_ERRPR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>PASSWORD_ERRPR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>UserEntity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JwtUtils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>SaltMD5Util<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月24日 10:32:40 * @packageName com.yangpeng.springboot_jwt * @className UserTest * @describe TODO */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SaltMD5Util saltMD5Util<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JwtUtils jwtUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        UserEntity user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setNickName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> saltMD5Util<span class="token punctuation">.</span><span class="token function">generateSaltPassword</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setTel</span><span class="token punctuation">(</span><span class="token string">"147258369"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//影响的行数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//id自动回填</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findUserAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>UserEntity<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserEntity userEntity <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1672541161475571714L<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>        String token <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userEntity<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long userId <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"签发时间:"</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>jwtUtils<span class="token punctuation">.</span><span class="token function">getIssuedAt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过期时间:"</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>jwtUtils<span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间:"</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">MD5Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原密码</span>        String password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"明文(原生)密码："</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// MD5加密后的密码</span>        String MD5Password <span class="token operator">=</span> saltMD5Util<span class="token punctuation">.</span><span class="token function">MD5</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通MD5加密密码："</span> <span class="token operator">+</span> MD5Password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取加盐后的MD5值</span>        String SaltPassword <span class="token operator">=</span> saltMD5Util<span class="token punctuation">.</span><span class="token function">generateSaltPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加盐后的MD密码："</span> <span class="token operator">+</span> SaltPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加盐后的密码和原生密码是否是同一字符串:"</span> <span class="token operator">+</span> saltMD5Util<span class="token punctuation">.</span><span class="token function">verifySaltPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> SaltPassword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> Jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot集成redis</title>
      <link href="/2023/06/25/springboot-ji-cheng-redis/"/>
      <url>/2023/06/25/springboot-ji-cheng-redis/</url>
      
        <content type="html"><![CDATA[<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class=" language-xml"><code class="language-xml">     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.79<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8088</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token comment" spellcheck="true">#Redis服务器连接端口</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token comment" spellcheck="true">#Redis服务器连接密码（默认为空）</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token comment" spellcheck="true">#连接池最大连接数（使用负值表示没有限制）</span><span class="token attr-name">spring.redis.pool.max-active</span><span class="token punctuation">=</span><span class="token attr-value">8</span><span class="token comment" spellcheck="true">#连接池最大阻塞等待时间（使用负值表示没有限制）</span><span class="token attr-name">spring.redis.pool.max-wait</span><span class="token punctuation">=</span><span class="token attr-value">-1</span><span class="token comment" spellcheck="true">#连接池中的最大空闲连接</span><span class="token attr-name">spring.redis.pool.max-idle</span><span class="token punctuation">=</span><span class="token attr-value">8</span><span class="token comment" spellcheck="true">#连接池中的最小空闲连接</span><span class="token attr-name">spring.redis.pool.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">#连接超时时间（毫秒）</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">30000</span></code></pre><h3 id="使用fastjson序列化"><a href="#使用fastjson序列化" class="headerlink" title="使用fastjson序列化"></a>使用fastjson序列化</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonTypeInfo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>jsontype<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>LaissezFaireSubTypeValidator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月22日 11:02:20 * @packageName com.yangpeng.springboot_jwt.config * @className RedisConfig * @describe TODO */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getRedisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key的序列化类型</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方法过期，改为下面代码</span>        <span class="token comment" spellcheck="true">//        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span>        objectMapper<span class="token punctuation">.</span><span class="token function">activateDefaultTyping</span><span class="token punctuation">(</span>LaissezFaireSubTypeValidator<span class="token punctuation">.</span>instance<span class="token punctuation">,</span>                ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">,</span> JsonTypeInfo<span class="token punctuation">.</span>As<span class="token punctuation">.</span>PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// value的序列化类型</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="redis工具类"><a href="#redis工具类" class="headerlink" title="redis工具类"></a>redis工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月22日 10:58:22 * @packageName com.yangpeng.springboot_jwt.utils * @className RedisUtil * @describe TODO */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 给一个指定的 key 值附加过期时间     *     * @param key     * @param time     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除指定key 的过期时间     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">persist</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundValueOps</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//- - - - - - - - - - - - - - - - - - - - -  String类型 - - - - - - - - - - - - - - - - - - - -</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取值     *     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将值放入缓存     *     * @param key   键     * @param value 值     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将值放入缓存并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) -1为无期限     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量添加 key (重复的键会覆盖)     *     * @param keyAndValue     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchSet</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> keyAndValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiSet</span><span class="token punctuation">(</span>keyAndValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量添加 key-value 只有在键不存在时,才添加     * map 中只要有一个key存在,则全部不添加     *     * @param keyAndValue     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchSetIfAbsent</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> keyAndValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiSetIfAbsent</span><span class="token punctuation">(</span>keyAndValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对一个 key-value 的值进行加减操作,     * 如果该 key 不存在 将创建一个key 并赋值该 number     * 如果 key 存在,但 value 不是长整型 ,将报错     *     * @param key     * @param number     */</span>    <span class="token keyword">public</span> Long <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对一个 key-value 的值进行加减操作,     * 如果该 key 不存在 将创建一个key 并赋值该 number     * 如果 key 存在,但 value 不是 纯数字 ,将报错     *     * @param key     * @param number     */</span>    <span class="token keyword">public</span> Double <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">double</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//- - - - - - - - - - - - - - - - - - - - -  set类型 - - - - - - - - - - - - - - - - - - - -</span>    <span class="token comment" spellcheck="true">/**     * 将数据放入set缓存     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取变量中的值     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">members</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 随机获取变量中指定个数的元素     *     * @param key   键     * @param count 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">randomMembers</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">randomMembers</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 随机获取变量中的元素     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">randomMember</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">randomMember</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 弹出变量中的元素     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">pop</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token string">"setValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取变量中值的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">size</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 检查给定的元素是否在变量中。     *     * @param key 键     * @param obj 元素对象     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMember</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 转移变量的元素值到目的变量。     *     * @param key     键     * @param value   元素对象     * @param destKey 元素对象     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">move</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">,</span> String destKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> destKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量移除set缓存中元素     *     * @param key    键     * @param values 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过给定的key求2个set变量的差值     *     * @param key     键     * @param destKey 键     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Set<span class="token operator">></span> <span class="token function">difference</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String destKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> destKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//- - - - - - - - - - - - - - - - - - - - -  hash类型 - - - - - - - - - - - - - - - - - - - -</span>    <span class="token comment" spellcheck="true">/**     * 加入缓存     *     * @param key 键     * @param map 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取 key 下的 所有  hashkey 和 value     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getHashEntries</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 验证指定 key 下 有没有指定的 hashkey     *     * @param key     * @param hashKey     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hashKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取指定key的值string     *     * @param key  键     * @param key2 键     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">getMapString</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String key2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"map1"</span><span class="token punctuation">,</span> <span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取指定的值Int     *     * @param key  键     * @param key2 键     * @return     */</span>    <span class="token keyword">public</span> Integer <span class="token function">getMapInt</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String key2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"map1"</span><span class="token punctuation">,</span> <span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 弹出元素并删除     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">popValue</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除指定 hash 的 HashKey     *     * @param key     * @param hashKeys     * @return 删除成功的 数量     */</span>    <span class="token keyword">public</span> Long <span class="token function">delete</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> hashKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 给指定 hash 的 hashkey 做增减操作     *     * @param key     * @param hashKey     * @param number     * @return     */</span>    <span class="token keyword">public</span> Long <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">,</span> <span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 给指定 hash 的 hashkey 做增减操作     *     * @param key     * @param hashKey     * @param number     * @return     */</span>    <span class="token keyword">public</span> Double <span class="token function">increment</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String hashKey<span class="token punctuation">,</span> Double number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKey<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取 key 下的 所有 hashkey 字段     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">hashKeys</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取指定 hash 下面的 键值对 数量     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> Long <span class="token function">hashSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//- - - - - - - - - - - - - - - - - - - - -  list类型 - - - - - - - - - - - - - - - - - - - -</span>    <span class="token comment" spellcheck="true">/**     * 在变量左边添加元素值     *     * @param key     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPush</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取集合指定位置的值。     *     * @param key     * @param index     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">index</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取指定区间的值。     *     * @param key     * @param start     * @param end     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">range</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 把最后一个参数值放到指定集合的第一个出现中间参数的前面，     * 如果中间参数值存在的话。     *     * @param key     * @param pivot     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPush</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String pivot<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向左边批量添加参数元素。     *     * @param key     * @param values     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPushAll</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        redisTemplate.opsForList().leftPushAll(key,"w","x","y");</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向集合最右边添加元素。     *     * @param key     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPushAll</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向左边批量添加参数元素。     *     * @param key     * @param values     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rightPushAll</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//redisTemplate.opsForList().leftPushAll(key,"w","x","y");</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向已存在的集合中添加元素。     *     * @param key     * @param value     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rightPushIfPresent</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushIfPresent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向已存在的集合中添加元素。     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">listLength</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除集合中的左边第一个元素。     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPop</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPop</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除集合中左边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftPop</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPop</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除集合中右边的元素。     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rightPop</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除集合中右边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出。     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rightPop</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPop</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="redis测试"><a href="#redis测试" class="headerlink" title="redis测试"></a>redis测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>springboot_jwt<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>RedisUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年06月25日 14:13:25 * @packageName com.yangpeng.springboot_jwt * @className RedisTest */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisUtil redisUtil<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisUtil<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object name <span class="token operator">=</span> redisUtil<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2023/06/18/git-chang-yong-ming-ling/"/>
      <url>/2023/06/18/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Git是一种分布式版本控制系统，用于跟踪和管理代码的修改历史。它最初由Linus Torvalds开发用于管理Linux内核的代码，现已成为广泛使用的版本控制系统之一。</p><h3 id="特点与功能"><a href="#特点与功能" class="headerlink" title="特点与功能"></a>特点与功能</h3><ol><li>分布式版本控制：每个开发者都可以拥有完整的代码仓库副本，可以在本地进行工作，无需依赖中央服务器。这使得Git更加灵活和适应分布式开发模式。</li><li>强大的分支支持：Git鼓励频繁创建和合并分支，使得并行开发、特性分支、修复分支等工作流程变得简单和高效。</li><li>高速和高效：Git的设计目标是速度和效率，它使用了各种优化技术来加快操作速度，包括对代码和元数据的压缩存储和索引。</li><li>完整性和数据完整性：Git使用SHA-1哈希算法来对每个文件的内容进行唯一标识，并使用校验和来保证数据的完整性和一致性。</li><li>离线操作：由于每个开发者都拥有完整的代码副本，可以在没有网络连接的情况下进行工作和提交修改，使得团队成员更加独立和灵活。</li><li>灵活的工作流程：Git提供了各种命令和工具来支持不同的工作流程和开发模式，例如集中式、分布式、协作开发等。</li></ol><p>使用Git，开发者可以轻松地跟踪文件的修改、撤销不必要的更改、合并代码、解决冲突、查看历史记录等。它不仅适用于个人开发者，也广泛应用于团队协作和开源项目。Git已成为现代软件开发中不可或缺的工具之一，为版本控制和代码管理提供了强大而灵活的解决方案。</p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><pre class=" language-shell"><code class="language-shell"># 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class=" language-shell"><code class="language-shell"># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name "[name]"$ git config [--global] user.email "[email address]"</code></pre><h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><pre class=" language-shell"><code class="language-shell"># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]</code></pre><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><pre class=" language-shell"><code class="language-shell"># 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><pre class=" language-shell"><code class="language-shell"># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><pre class=" language-shell"><code class="language-shell"># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><pre class=" language-shell"><code class="language-shell"># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat "@{0 day ago}"# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><pre class=" language-shell"><code class="language-shell"># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><pre class=" language-shell"><code class="language-shell"># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre class=" language-shell"><code class="language-shell"># 生成一个可供发布的压缩包$ git archive</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java实现线程安全</title>
      <link href="/2023/06/09/java-shi-xian-xian-cheng-an-quan/"/>
      <url>/2023/06/09/java-shi-xian-xian-cheng-an-quan/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>线程安全的概念适用于任何需要在多线程环境下操作共享资源的场景。下面是一些常见的应用场景，其中线程安全是至关重要的：</p><ol><li>多用户访问的 Web 应用程序：在具有多个用户并发访问的 Web 应用程序中，确保数据的一致性和正确性是至关重要的。例如，在一个在线购物网站中，多个用户同时进行购买操作时，需要保证订单、库存等数据的正确性和同步性。</li><li>多线程的数据结构和算法：当多个线程同时访问和修改数据结构（例如链表、队列、栈等）或执行算法时，需要确保线程安全，以避免竞争条件和数据不一致的问题。</li><li>并发任务的执行：当需要同时执行多个任务时，例如线程池中的任务执行、并行计算任务等，需要确保任务之间的数据共享和协作的线程安全性。</li><li>缓存管理：在缓存系统中，多个线程可能同时读取和更新缓存数据。为了避免并发访问引发的数据不一致和竞争条件，需要确保缓存的线程安全性。</li><li>数据库操作：在多线程环境中对数据库进行读写操作时，需要保证数据库连接、事务操作和数据更新的线程安全，以避免数据混乱和错误。</li><li>文件系统操作：在多线程环境中对文件进行读写操作时，需要确保线程安全，以避免数据的损坏或文件的不一致性。</li><li>并发控制和同步：在需要控制和同步多个线程执行顺序、信号传递和资源分配的场景中，例如生产者-消费者模型、读者-写者模型，需要确保线程安全以避免竞争条件和数据不一致。</li><li>分布式系统：在分布式系统中，不同的节点和线程之间可能并发地访问和修改共享的分布式资源，需要确保并发操作的线程安全性。</li></ol><p>以上仅是一些常见的应用场景，实际上，在任何多线程环境中，只要涉及到共享资源的访问和操作，都需要考虑线程安全的问题。</p><h3 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadUnSecurity</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"一号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"二号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"三号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThread1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThread2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThread3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> ticketsNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>ticketsNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"售卖第"</span> <span class="token operator">+</span> ticketsNum <span class="token operator">+</span> <span class="token string">"票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ticketsNum<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketsNum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"--->售票结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果如下：同一张票被多次售出</p><pre class=" language-bash"><code class="language-bash">一号窗口售卖第10票一号窗口售卖第9票三号窗口售卖第10票二号窗口售卖第10票二号窗口售卖第6票二号窗口售卖第5票二号窗口售卖第4票二号窗口售卖第3票三号窗口售卖第7票一号窗口售卖第8票三号窗口售卖第1票三号窗口---<span class="token operator">></span>售票结束！二号窗口售卖第2票一号窗口---<span class="token operator">></span>售票结束！二号窗口---<span class="token operator">></span>售票结束！</code></pre><h3 id="实现线程安全"><a href="#实现线程安全" class="headerlink" title="实现线程安全"></a>实现线程安全</h3><h4 id="一、同步代码块"><a href="#一、同步代码块" class="headerlink" title="一、同步代码块"></a>一、同步代码块</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadSynchronizedSecurity</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">SellTickets</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 同步代码块</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//System.out.println(this.getClass().getName().toString());</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->售出第：  "</span> <span class="token operator">+</span> tickets <span class="token operator">+</span> <span class="token string">" 票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tickets<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->售票结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SellTickets sell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadSynchronizedSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">SellTickets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"1号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"2号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"3号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"4号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">1号窗口---<span class="token operator">></span>售出第：  10 票1号窗口---<span class="token operator">></span>售出第：  9 票4号窗口---<span class="token operator">></span>售出第：  8 票4号窗口---<span class="token operator">></span>售出第：  7 票2号窗口---<span class="token operator">></span>售出第：  6 票3号窗口---<span class="token operator">></span>售出第：  5 票3号窗口---<span class="token operator">></span>售出第：  4 票2号窗口---<span class="token operator">></span>售出第：  3 票4号窗口---<span class="token operator">></span>售出第：  2 票4号窗口---<span class="token operator">></span>售出第：  1 票4号窗口---<span class="token operator">></span>售票结束！</code></pre><h4 id="二、同步方法"><a href="#二、同步方法" class="headerlink" title="二、同步方法"></a>二、同步方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>springbooxianchengchi<span class="token punctuation">.</span>xcc<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadSynchroniazedMethodSecurity</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">SellTickets</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//同步方法</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">synMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->售票结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">synMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---->售出第 "</span> <span class="token operator">+</span> tickets <span class="token operator">+</span> <span class="token string">" 票 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tickets<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SellTickets sell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadSynchroniazedMethodSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">SellTickets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"1号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"2号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"3号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"4号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">1号窗口----<span class="token operator">></span>售出第 10 票 3号窗口----<span class="token operator">></span>售出第 9 票 4号窗口----<span class="token operator">></span>售出第 8 票 2号窗口----<span class="token operator">></span>售出第 7 票 4号窗口----<span class="token operator">></span>售出第 6 票 2号窗口----<span class="token operator">></span>售出第 5 票 3号窗口----<span class="token operator">></span>售出第 4 票 1号窗口----<span class="token operator">></span>售出第 3 票 4号窗口----<span class="token operator">></span>售出第 2 票 3号窗口----<span class="token operator">></span>售出第 1 票 4号窗口---<span class="token operator">></span>售票结束1号窗口---<span class="token operator">></span>售票结束2号窗口---<span class="token operator">></span>售票结束3号窗口---<span class="token operator">></span>售票结束</code></pre><h4 id="三、Lock锁机制"><a href="#三、Lock锁机制" class="headerlink" title="三、Lock锁机制"></a>三、Lock锁机制</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLockSecurity</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">SellTickets</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Lock锁机制</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->售出第：  "</span> <span class="token operator">+</span> tickets <span class="token operator">+</span> <span class="token string">" 票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tickets<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                    e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->售票结束！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SellTickets sell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLockSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">SellTickets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"1号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"2号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"3号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sell<span class="token punctuation">,</span> <span class="token string">"4号窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">1号窗口---<span class="token operator">></span>售出第：  10 票3号窗口---<span class="token operator">></span>售出第：  9 票2号窗口---<span class="token operator">></span>售出第：  8 票4号窗口---<span class="token operator">></span>售出第：  7 票1号窗口---<span class="token operator">></span>售出第：  6 票2号窗口---<span class="token operator">></span>售出第：  5 票3号窗口---<span class="token operator">></span>售出第：  4 票4号窗口---<span class="token operator">></span>售出第：  3 票4号窗口---<span class="token operator">></span>售出第：  2 票2号窗口---<span class="token operator">></span>售出第：  1 票1号窗口---<span class="token operator">></span>售票结束！3号窗口---<span class="token operator">></span>售票结束！2号窗口---<span class="token operator">></span>售票结束！4号窗口---<span class="token operator">></span>售票结束！</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2023/06/01/java-duo-xian-cheng/"/>
      <url>/2023/06/01/java-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Java中，多线程是指在一个Java程序中同时执行多个线程的机制。Java提供了内置的多线程支持，允许开发者创建和管理多个并发执行的线程。</p><p>在Java中使用多线程可以实现以下目标：</p><ol><li><strong>并行处理</strong>：多线程允许程序中的多个任务并发执行，从而提高处理能力和执行效率。每个线程独立执行自己的任务，可以同时处理多个任务。</li><li><strong>响应性和交互性</strong>：多线程可以提高程序的响应性，特别是在与用户交互的应用中。通过将一些任务放在后台线程中执行，主线程可以保持响应性，继续处理用户输入和事件。</li><li><strong>并发编程</strong>：多线程编程是用于处理<strong>并发访问共享资源</strong>的重要技术。通过合理地管理多个线程对共享数据的访问，可以避免竞态条件和数据不一致等问题。</li></ol><p>Java中实现多线程的方式主要有两种：</p><ol><li>继承Thread类：可以通过继承Thread类并覆盖其run()方法来创建线程。然后通过调用start()方法启动线程并执行run()方法中的逻辑。</li><li>实现Runnable接口：可以实现Runnable接口并实现其run()方法来创建线程。然后将Runnable对象作为参数传递给Thread类的构造函数，并通过调用start()方法启动线程。</li></ol><p>Java还提供了其他一些多线程相关的特性和类库，如线程池（ThreadPoolExecutor）、线程同步机制（synchronized、Lock）、线程间通信（wait/notify、Condition）等，用于更灵活地管理和控制多线程的行为。</p><p>使用多线程可以实现并行处理、异步操作、提高程序的并发性和性能，但同时也需要注意线程安全、竞态条件和资源共享等问题，以保证多线程程序的正确性和稳定性。</p><h2 id="实现多线成的方式"><a href="#实现多线成的方式" class="headerlink" title="实现多线成的方式"></a>实现多线成的方式</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"一号线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"二号线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Thread.currentThread() 获取当前正在执行线程的对象</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyThread</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="继承Runnable接口"><a href="#继承Runnable接口" class="headerlink" title="继承Runnable接口"></a>继承Runnable接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadDemo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span><span class="token string">"一号线程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span><span class="token string">"二号线程"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Thread.currentThread() 获取当前正在执行线程的对象</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyThread2</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h3><p>Thread和Runnable都是Java中用于实现多线程的接口，但它们之间存在一些区别。</p><ol><li>继承关系：Thread类是一个具体的类，它直接继承自java.lang.Object类，并实现了Runnable接口。而Runnable接口是一个函数式接口，它只有一个抽象方法run()，用于定义线程要执行的任务。</li><li>扩展性：使用Runnable接口实现多线程任务的方式更加灵活。一个类可以实现Runnable接口，并作为参数传递给Thread类的构造函数，使得多个线程可以共享同一个Runnable实例，实现任务的分配和执行。而使用Thread类，每个线程都需要独立创建一个新的Thread对象，无法方便地实现任务的共享。</li><li>面向对象设计：使用Runnable接口可以更好地符合面向对象的设计原则，将任务的定义与线程的控制分离。这样可以使得代码更加清晰、可维护性更高。而使用Thread类，任务的定义与线程的控制被耦合在一起，不够灵活。</li></ol><p>综上所述，使用Runnable接口实现多线程任务更加灵活和可扩展，推荐在开发多线程应用时使用这种方式。然而，如果你只需要简单地创建一个线程并执行任务，Thread类也是一个可选的方案。</p><h3 id="线程池的转换"><a href="#线程池的转换" class="headerlink" title="线程池的转换"></a>线程池的转换</h3><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/06/202306091440761.png" alt="image-20230609144005664"></p><p>1、新建状态（New）：新创建了一个线程对象。<br>2、就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。<br>3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。<br>4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<br>（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)<br>（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。<br>（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）<br>5、死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</p><h3 id="线程状态转换"><a href="#线程状态转换" class="headerlink" title="线程状态转换"></a>线程状态转换</h3><h4 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h4><p>在Java中，Thread类提供了一个名为join()的方法，它允许一个线程等待另一个线程执行完毕。</p><p>当调用线程A的join()方法时，它将会阻塞并等待线程A执行完毕，然后再继续执行调用join()方法的线程A之后的代码。换句话说，join()方法会使得当前线程等待被调用线程执行完毕。</p><p>join()方法有两种重载形式：</p><ol><li>join()：将会等待调用join()方法的线程所引用的线程执行完毕。</li><li>join(long millis)或join(long millis, int nanos)：等待指定的时间，如果指定的时间过去了，但被调用线程仍未执行完毕，则不再等待。</li></ol><p>使用join()方法的一个常见场景是主线程等待子线程执行完毕。例如，假设有一个主线程和一个子线程，主线程通过创建并启动子线程，然后在子线程上调用join()方法，以确保子线程执行完毕后再继续执行主线程的代码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 主线程等待子线程执行完毕</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程继续执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="sleep-方法"><a href="#sleep-方法" class="headerlink" title="sleep()方法"></a>sleep()方法</h4><p>在Java中，Thread类提供了一个名为sleep()的方法，用于使当前线程暂停执行一段时间。</p><p>sleep()方法有两种重载形式：</p><ol><li>sleep(long millis)：使当前线程休眠指定的毫秒数。</li><li>sleep(long millis, int nanos)：使当前线程休眠指定的毫秒数和纳秒数。</li></ol><p>当线程调用sleep()方法时，它会暂时释放CPU的占用，让其他线程有机会执行。线程在休眠期间不会执行任何任务，直到休眠时间结束。</p><p>sleep()方法常用于需要暂停执行一段时间的情况，例如延迟执行、定时任务等。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SleepExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程休眠2秒</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="yield-方法"><a href="#yield-方法" class="headerlink" title="yield()方法"></a>yield()方法</h4><p>在Java中，Thread类提供了一个名为yield()的方法，用于提示线程调度器，当前线程愿意放弃当前的CPU执行时间，以便让其他具有相同或更高优先级的线程执行。</p><p>当一个线程调用yield()方法时，它会让出当前的CPU执行时间，并返回就绪状态，等待调度器重新选择下一个线程来执行。注意，yield()方法只是一个提示，具体是否采纳取决于调度器的实现。</p><p>使用yield()方法的目的是为了改善线程之间的相对执行顺序，以避免某个线程长时间独占CPU而导致其他线程无法得到执行的情况。通过调用yield()方法，可以使得具有相同或更高优先级的其他线程有机会执行。</p><p>需要注意的是，yield()方法只会让出当前线程的CPU执行时间，并不会阻塞线程。线程在调用yield()方法后会立即进入就绪状态，等待调度器重新选择执行。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YieldExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程1执行："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程1调用yield()</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程2执行："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程2调用yield()</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="sleep-和yield-的区别"><a href="#sleep-和yield-的区别" class="headerlink" title="sleep()和yield()的区别"></a><strong>sleep()和yield()的区别</strong></h4><p>sleep()方法和yield()方法是Java中Thread类提供的两个不同的方法，它们有以下区别：</p><ol><li>功能：<ul><li>sleep()方法用于使当前线程休眠一段时间，暂停线程的执行，并且不会释放锁资源。它被用于实现延迟执行或定时任务的场景。</li><li>yield()方法用于提示线程调度器，当前线程愿意放弃当前的CPU执行时间，以便让其他具有相同或更高优先级的线程执行。它被用于改善线程之间的相对执行顺序，避免某个线程长时间独占CPU。</li></ul></li><li>影响：<ul><li>sleep()方法会使当前线程暂停执行一段时间，直到休眠时间结束后线程重新进入就绪状态，等待调度器重新选择执行。它会让出CPU时间片给其他线程执行，并且不会释放锁资源。</li><li>yield()方法只是一个提示，它会让出当前线程的CPU执行时间，返回就绪状态，等待调度器重新选择下一个线程来执行。线程仍然保持锁资源的拥有权。</li></ul></li><li>调用方式：<ul><li>sleep()方法是静态方法，可以通过Thread.sleep()来调用。</li><li>yield()方法是静态方法，可以通过Thread.yield()来调用。</li></ul></li><li>异常：<ul><li>sleep()方法会抛出InterruptedException异常，需要进行异常处理。</li><li>yield()方法不会抛出异常。</li></ul></li><li>使用场景：<ul><li>sleep()方法常用于需要暂停执行一段时间的场景，例如延迟执行、定时任务等。</li><li>yield()方法常用于改善线程之间的执行顺序，避免某个线程长时间独占CPU。</li></ul></li></ol><p>总之，sleep()方法用于线程休眠一段时间，而yield()方法用于线程之间的协作。sleep()方法是控制线程时间的一种手段，而yield()方法是线程调度的一种提示。</p><h4 id="setPriority-方法"><a href="#setPriority-方法" class="headerlink" title="setPriority()方法"></a>setPriority()方法</h4><p>在Java中，Thread类提供了一个名为setPriority()的方法，用于设置线程的优先级。线程的优先级决定了线程在竞争CPU时间片时的相对权重。</p><p>setPriority()方法有以下几个重要的方面：</p><ol><li>方法签名：setPriority(int priority)<ul><li>priority参数表示线程的优先级，范围从1到10，其中1表示最低优先级，10表示最高优先级。</li></ul></li><li>默认优先级：线程的默认优先级与创建它的父线程的优先级相同。</li><li>优先级的影响：设置线程的优先级并不能保证绝对的执行顺序，只是给调度器一个相对的提示。调度器可以选择忽略优先级设置，或者基于优先级来进行调度。</li><li>优先级的重要性：在同一CPU核上运行时，具有更高优先级的线程更有可能获得更多的CPU执行时间。但在不同的操作系统和不同的JVM实现中，优先级的影响可能会有所不同。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程1执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程2执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程1的优先级为最低</span>        thread2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程2的优先级为最高</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="interrupt-方法"><a href="#interrupt-方法" class="headerlink" title="interrupt()方法"></a>interrupt()方法</h4><p>在Java中，Thread类提供了一个名为interrupt()的方法，用于中断线程的执行。</p><p>调用线程的interrupt()方法会设置线程的中断标志位，将其置为true。中断标志位是线程的一个内部标志，用于表示线程是否被中断。被中断的线程可以通过检查中断标志位来决定是否中断自己的执行。</p><p>interrupt()方法的使用有以下几个方面需要注意：</p><ol><li>中断标志位的处理：<ul><li>调用interrupt()方法只是将线程的中断标志位设置为true，实际中断发生的时机由线程自身决定。</li><li>被中断的线程可以通过isInterrupted()方法检查中断标志位，或者通过静态方法Thread.interrupted()检查中断标志位并清除中断标志位。</li></ul></li><li>中断的响应：<ul><li>对于正在运行的线程，中断标志位的设置并不会直接中断线程的执行。线程可以通过检查中断标志位来决定是否终止自己的执行。</li><li>通常情况下，可以在线程的执行循环中检查中断标志位，然后根据需要执行退出操作。</li></ul></li><li>中断的处理：<ul><li>在被中断的线程中，可以通过捕获InterruptedException异常来处理中断。例如，在调用可中断的阻塞方法（如sleep()、wait()、join()等）时，如果线程被中断，则会抛出InterruptedException异常，可以在异常处理块中决定如何处理中断。</li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 执行任务</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 中断处理</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 可以选择退出循环或进行其他操作</span>                    Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重新设置中断标志位</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 主线程等待一段时间后中断子线程</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="wait-与notify-方法"><a href="#wait-与notify-方法" class="headerlink" title="wait()与notify()方法"></a>wait()与notify()方法</h4><p>wait()和notify()是Java中Object类提供的两个方法，用于线程间的协调与通信，主要用于实现线程的等待和唤醒操作。</p><ol><li>wait()方法：<ul><li>wait()方法使当前线程进入等待状态，同时释放对象的锁资源，直到其他线程调用该对象的notify()或notifyAll()方法来唤醒等待的线程。</li><li>wait()方法有两种重载形式：wait()和wait(long timeout)，后者可以设置等待的最长时间。</li></ul></li><li>notify()方法：<ul><li>notify()方法用于唤醒正在等待的线程中的一个线程，如果有多个线程在等待，则唤醒其中一个线程，具体唤醒哪个线程由系统决定。</li><li>notifyAll()方法用于唤醒正在等待的所有线程。</li></ul></li><li>使用wait()和notify()的注意事项：<ul><li>wait()和notify()方法必须在同步代码块或同步方法中调用，即必须先获取对象的锁资源。</li><li>wait()方法通常与while循环一起使用，用于检查等待条件是否满足，以避免虚假唤醒（spurious wakeups）。</li><li>线程在调用wait()方法后会释放锁资源，等待被唤醒后需要重新竞争获取锁资源才能继续执行。</li><li>调用wait()方法后，线程会进入等待集（wait set）中，等待被notify()或notifyAll()唤醒，或者等待超时。</li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitNotifyExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 共享对象锁</span>        <span class="token comment" spellcheck="true">// 线程A</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程A开始执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程A等待</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程A被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 线程B</span>        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程B唤醒线程A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 唤醒等待的线程A</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="常见线程调用方法"><a href="#常见线程调用方法" class="headerlink" title="常见线程调用方法"></a>常见线程调用方法</h4><ol><li>start()：start()方法用于启动线程，使其开始执行。线程一旦启动，将会调用run()方法中定义的逻辑。</li><li>run()：run()方法是线程的执行逻辑所在，包含了线程的具体操作。在多线程环境中，每个线程都会有自己的run()方法。</li><li>join()：join()方法允许一个线程等待另一个线程的结束。当一个线程调用另一个线程的join()方法时，当前线程会被阻塞，直到被等待线程执行完毕。</li><li>sleep()：sleep()方法使当前线程暂停执行一段时间，进入阻塞状态。线程在sleep()期间不会释放已经获取的锁资源，但会让出CPU时间片给其他线程。</li><li>interrupt()：interrupt()方法用于中断线程的执行。调用该方法会将线程的中断标志位设置为true，被中断的线程可以根据需要进行处理。</li><li>isInterrupted()：isInterrupted()方法用于检查线程的中断标志位。可以通过调用该方法来判断线程是否被中断，但不会清除中断标志位。</li><li>yield()：yield()方法是线程让步的一种方式。调用该方法会暗示调度器，当前线程愿意让出CPU时间片给其他线程，但是调度器是否真正响应取决于具体实现。</li><li>stop()：stop()方法已经被标记为过时（deprecated）的方法。它用于强制终止线程的执行，但不会进行线程资源的清理工作，容易导致不确定的状态和资源泄露，不推荐使用。</li></ol><h4 id="常见线程名词解释"><a href="#常见线程名词解释" class="headerlink" title="常见线程名词解释"></a>常见线程名词解释</h4><ol><li>线程（Thread）：线程是操作系统进行任务调度的最小单位。它代表进程中的一个执行路径，可以独立执行和并发执行。</li><li>多线程（Multithreading）：多线程是指在一个程序中同时运行多个线程的编程模型。多线程可以实现并发执行，提高程序的效率和响应性。</li><li>主线程（Main Thread）：主线程是程序启动时由操作系统创建的第一个线程，也称为主执行线程。主线程用于执行程序的入口点（main()方法），并且可以创建其他线程。</li><li>后台线程（Daemon Thread）：后台线程是一种特殊的线程，它在程序运行期间在后台提供服务，不阻止程序的终止。当所有的非后台线程都终止时，后台线程会自动退出。</li><li>守护线程（Daemon Thread）：守护线程是一种特殊的后台线程，它提供一种常驻服务的机制。守护线程被用于在程序运行期间执行一些辅助性的任务，例如垃圾回收（Garbage Collection）。</li><li>线程池（Thread Pool）：线程池是一种管理和复用线程的机制。它通过预先创建一组线程，将任务分配给空闲线程执行，避免了线程的频繁创建和销毁，提高了性能和资源利用率。</li><li>线程同步（Thread Synchronization）：线程同步是指多个线程之间对共享资源的访问进行协调和控制，以避免数据竞争和不一致的结果。常用的线程同步机制包括互斥锁、条件变量、信号量等。</li><li>死锁（Deadlock）：死锁是指两个或多个线程互相等待对方释放资源而无法继续执行的情况。当线程都持有对方需要的资源，并且都不释放资源时，会导致死锁问题。</li><li>线程安全（Thread-safe）：线程安全是指在多线程环境下，对共享数据的访问和操作能够正确地执行，不会出现数据竞争和不一致的问题。线程安全可以通过同步机制和并发数据结构来实现。</li><li>并发（Concurrency）：并发是指多个线程在同一时间段内同时执行，共享计算机资源，通过并发执行可以提高系统的吞吐量和响应性。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程-Stream流</title>
      <link href="/2023/05/31/han-shu-shi-bian-cheng-stream-liu/"/>
      <url>/2023/05/31/han-shu-shi-bian-cheng-stream-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><h3 id="1-1-为什么学？"><a href="#1-1-为什么学？" class="headerlink" title="1.1 为什么学？"></a>1.1 为什么学？</h3><ul><li>能够看懂公司里的代码</li><li>大数量下处理集合效率高</li><li>代码可读性高</li><li>消灭嵌套地狱</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查询未成年作家的评分在70以上的书籍 由于洋流影响所以作家和书籍可能出现重复，需要进行去重</span>List<span class="token operator">&lt;</span>Book<span class="token operator">></span> bookList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>Book<span class="token operator">></span> uniqueBookValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>Author<span class="token operator">></span> uniqueAuthorValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Author author <span class="token operator">:</span> authors<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueAuthorValues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books <span class="token operator">=</span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueBookValues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        bookList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bookList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Book<span class="token operator">></span> collect <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Collection<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>book <span class="token operator">-</span><span class="token operator">></span> book<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">70</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-2-函数式编程思想"><a href="#1-2-函数式编程思想" class="headerlink" title="1.2 函数式编程思想"></a>1.2 函数式编程思想</h3><h4 id="1-2-1-概念"><a href="#1-2-1-概念" class="headerlink" title="1.2.1 概念"></a>1.2.1 概念</h4><p>​    面向对象思想需要关注用什么对象完成什么事情。而函数式编程思想就类似于我们数学中的函数。它主要关注的是对数据进行了什么操作。</p><h4 id="1-2-2-优点"><a href="#1-2-2-优点" class="headerlink" title="1.2.2 优点"></a>1.2.2 优点</h4><ul><li>代码简洁，开发快速</li><li>接近自然语言，易于理解</li><li>易于”并发编程”</li></ul><h2 id="2-Lambda表达式"><a href="#2-Lambda表达式" class="headerlink" title="2. Lambda表达式"></a>2. Lambda表达式</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>​    Lambda是JDK8中一个语法糖。他可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要体现。让我们不用关注是什么对象。而是更关注我们对数据进行了什么操作。</p><h3 id="2-2-核心原则"><a href="#2-2-核心原则" class="headerlink" title="2.2 核心原则"></a>2.2 核心原则</h3><blockquote><p>可推导可省略</p></blockquote><h3 id="2-3-基本格式"><a href="#2-3-基本格式" class="headerlink" title="2. 3 基本格式"></a>2. 3 基本格式</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>代码<span class="token punctuation">}</span></code></pre><h4 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h4><p>我们在创建线程并启动时可以使用匿名内部类的写法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你知道吗 我比你想象的 更想在你身边"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以使用Lambda的格式对其进行修改。修改后如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你知道吗 我比你想象的 更想在你身边"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="例二"><a href="#例二" class="headerlink" title="例二:"></a>例二:</h4><p>现有方法定义如下，其中IntBinaryOperator是一个接口。先使用匿名内部类的写法调用该方法。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateNum</span><span class="token punctuation">(</span>IntBinaryOperator operator<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> operator<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">calculateNum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntBinaryOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">applyAsInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Lambda写法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">calculateNum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="例三："><a href="#例三：" class="headerlink" title="例三："></a>例三：</h4><p>现有方法定义如下，其中IntPredicate是一个接口。先使用匿名内部类的写法调用该方法。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printNum</span><span class="token punctuation">(</span>IntPredicate predicate<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printNum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Lambda写法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printNum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printNum</span><span class="token punctuation">(</span>IntPredicate predicate<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="例四："><a href="#例四：" class="headerlink" title="例四："></a>例四：</h4><p>现有方法定义如下，其中Function是一个接口。先使用匿名内部类的写法调用该方法。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>R<span class="token operator">></span> R <span class="token function">typeConver</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>R<span class="token operator">></span> function<span class="token punctuation">)</span><span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token string">"1235"</span><span class="token punctuation">;</span>        R result <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer result <span class="token operator">=</span> <span class="token function">typeConver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Integer <span class="token function">apply</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Lambda写法：</p><pre class=" language-java"><code class="language-java">        Integer result <span class="token operator">=</span> <span class="token function">typeConver</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="例五："><a href="#例五：" class="headerlink" title="例五："></a>例五：</h4><p>现有方法定义如下，其中IntConsumer是一个接口。先使用匿名内部类的写法调用该方法。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foreachArr</span><span class="token punctuation">(</span>IntConsumer consumer<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">foreachArr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>Lambda写法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">foreachArr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-4-省略规则"><a href="#2-4-省略规则" class="headerlink" title="2.4 省略规则"></a>2.4 省略规则</h3><ul><li>参数类型可以省略</li><li>方法体只有一句代码时大括号return和唯一一句代码的分号可以省略</li><li>方法只有一个参数时小括号可以省略</li><li>以上这些规则都记不住也可以省略不记</li></ul><h2 id="3-Stream流"><a href="#3-Stream流" class="headerlink" title="3. Stream流"></a>3. Stream流</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>​    Java8的Stream使用的是函数式编程模式，如同它的名字一样，它可以被用来对集合或数组进行链状流式的操作。可以更方便的让我们对集合或数组操作。</p><h3 id="3-2-案例数据准备"><a href="#3-2-案例数据准备" class="headerlink" title="3.2 案例数据准备"></a>3.2 案例数据准备</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token comment" spellcheck="true">//用于后期的去重使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//id</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//简介</span>    <span class="token keyword">private</span> String intro<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//作品</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token comment" spellcheck="true">//用于后期的去重使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//id</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//书名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//分类</span>    <span class="token keyword">private</span> String category<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//评分</span>    <span class="token keyword">private</span> Integer score<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//简介</span>    <span class="token keyword">private</span> String intro<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Author<span class="token operator">></span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数据初始化</span>        Author author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span><span class="token string">"蒙多"</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token string">"一个从菜刀中明悟哲理的祖安人"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Author author2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span><span class="token string">"亚拉索"</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">"狂风也追逐不上他的思考速度"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Author author3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span><span class="token string">"易"</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">"是这个世界在限制他的思维"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Author author4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span><span class="token string">"易"</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">"是这个世界在限制他的思维"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//书籍列表</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span><span class="token string">"刀的两侧是光明与黑暗"</span><span class="token punctuation">,</span><span class="token string">"哲学,爱情"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token string">"用一把刀划分了爱恨"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span><span class="token string">"一个人不能死在同一把刀下"</span><span class="token punctuation">,</span><span class="token string">"个人成长,爱情"</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token string">"讲述如何从失败中明悟真理"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span><span class="token string">"那风吹不到的地方"</span><span class="token punctuation">,</span><span class="token string">"哲学"</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token string">"带你用思维去领略世界的尽头"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>3L<span class="token punctuation">,</span><span class="token string">"那风吹不到的地方"</span><span class="token punctuation">,</span><span class="token string">"哲学"</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token string">"带你用思维去领略世界的尽头"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>4L<span class="token punctuation">,</span><span class="token string">"吹或不吹"</span><span class="token punctuation">,</span><span class="token string">"爱情,个人传记"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token string">"一个哲学家的恋爱观注定很难把他所在的时代理解"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>5L<span class="token punctuation">,</span><span class="token string">"你的剑就是我的剑"</span><span class="token punctuation">,</span><span class="token string">"爱情"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token string">"无法想象一个武者能对他的伴侣这么的宽容"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>6L<span class="token punctuation">,</span><span class="token string">"风与剑"</span><span class="token punctuation">,</span><span class="token string">"个人传记"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>6L<span class="token punctuation">,</span><span class="token string">"风与剑"</span><span class="token punctuation">,</span><span class="token string">"个人传记"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books1<span class="token punctuation">)</span><span class="token punctuation">;</span>        author2<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books2<span class="token punctuation">)</span><span class="token punctuation">;</span>        author3<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books3<span class="token punctuation">)</span><span class="token punctuation">;</span>        author4<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books3<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span>author2<span class="token punctuation">,</span>author3<span class="token punctuation">,</span>author4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authorList<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-3-快速入门"><a href="#3-3-快速入门" class="headerlink" title="3.3 快速入门"></a>3.3 快速入门</h3><h4 id="3-3-1-需求"><a href="#3-3-1-需求" class="headerlink" title="3.3.1 需求"></a>3.3.1 需求</h4><p>​    我们可以调用getAuthors方法获取到作家的集合。现在需要打印所有年龄小于18的作家的名字，并且要注意去重。</p><h4 id="3-3-2-实现"><a href="#3-3-2-实现" class="headerlink" title="3.3.2 实现"></a>3.3.2 实现</h4><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//打印所有年龄小于18的作家的名字，并且要注意去重</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span>                <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//把集合转换成流</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//先去除重复的作家</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//筛选年龄小于18的</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历打印名字</span></code></pre><h3 id="3-4-常用操作"><a href="#3-4-常用操作" class="headerlink" title="3.4 常用操作"></a>3.4 常用操作</h3><h4 id="3-4-1-创建流"><a href="#3-4-1-创建流" class="headerlink" title="3.4.1 创建流"></a>3.4.1 创建流</h4><p>单列集合： <code>集合对象.stream()</code></p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Author<span class="token operator">></span> stream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>数组：<code>Arrays.stream(数组) </code>或者使用<code>Stream.of</code>来创建</p><pre class=" language-JAVA"><code class="language-JAVA">        Integer[] arr = {1,2,3,4,5};        Stream<Integer> stream = Arrays.stream(arr);        Stream<Integer> stream2 = Stream.of(arr);</code></pre><p>双列集合：转换成单列集合后再创建</p><pre class=" language-java"><code class="language-java">        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"蜡笔小新"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"黑子"</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"日向翔阳"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> stream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-4-2-中间操作"><a href="#3-4-2-中间操作" class="headerlink" title="3.4.2 中间操作"></a>3.4.2 中间操作</h4><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p>​    可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中。</p><p>例如：</p><p>​    打印所有姓名长度大于1的作家的姓名</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>​    可以把对流中的元素进行计算或转换。</p><p>例如：</p><p>​    打印所有作家的姓名</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        打印所有作家的姓名</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        authors.stream()</span><span class="token comment" spellcheck="true">//                .map(author -> author.getName())</span><span class="token comment" spellcheck="true">//                .forEach(s -> System.out.println(s));</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age<span class="token operator">-</span><span class="token operator">></span>age<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>age<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><p>​    可以去除流中的重复元素。</p><p>例如：</p><p>​    打印所有作家的姓名，并且要求其中不能有重复元素。</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意：distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。</strong></p><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><p>​    可以对流中的元素进行排序。</p><p>例如：</p><p>​    对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意：如果调用空参的sorted()方法，需要流中的元素是实现了Comparable。</strong></p><p>​        </p><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><p>​    可以设置流的最大长度，超出的部分将被抛弃。</p><p>例如：</p><p>​    对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素,然后打印其中年龄最大的两个作家的姓名。</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h5><p>​    跳过流中的前n个元素，返回剩下的元素</p><p>例如：</p><p>​    打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序。</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><p>​    map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。</p><p>例一：</p><p>​    打印所有书籍的名字。要求对重复的元素进行去重。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        打印所有书籍的名字。要求对重复的元素进行去重。</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>book <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>例二：</p><p>​    打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情     爱情</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>book <span class="token operator">-</span><span class="token operator">></span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>category<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-4-3-终结操作"><a href="#3-4-3-终结操作" class="headerlink" title="3.4.3 终结操作"></a>3.4.3 终结操作</h4><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><p>​    对流中的元素进行遍历操作，我们通过传入的参数去指定对遍历到的元素进行什么具体操作。</p><p>例子：</p><p>​    输出所有作家的名字</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        输出所有作家的名字</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>​    可以用来获取当前流中元素的个数。</p><p>例子：</p><p>​    打印这些作家的所出书籍的数目，注意删除重复元素。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        打印这些作家的所出书籍的数目，注意删除重复元素。</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="max-amp-min"><a href="#max-amp-min" class="headerlink" title="max&amp;min"></a>max&amp;min</h5><p>​    可以用来或者流中的最值。</p><p>例子：</p><p>​    分别获取这些作家的所出书籍的最高分和最低分并打印。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        分别获取这些作家的所出书籍的最高分和最低分并打印。</span>        <span class="token comment" spellcheck="true">//Stream&lt;Author>  -> Stream&lt;Book> ->Stream&lt;Integer>  ->求值</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> max <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>book <span class="token operator">-</span><span class="token operator">></span> book<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>score1<span class="token punctuation">,</span> score2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> score1 <span class="token operator">-</span> score2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> min <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>book <span class="token operator">-</span><span class="token operator">></span> book<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>score1<span class="token punctuation">,</span> score2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> score1 <span class="token operator">-</span> score2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h5><p>​    把当前流转换成一个集合。</p><p>例子：</p><p>​    获取一个存放所有作者名字的List集合。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        获取一个存放所有作者名字的List集合。</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> nameList <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameList<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    获取一个所有书名的Set集合。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        获取一个所有书名的Set集合。</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Book<span class="token operator">></span> books <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    获取一个Map集合，map的key为作者名，value为List<Book></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        获取一个Map集合，map的key为作者名，value为List&lt;Book></span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Book<span class="token operator">>></span> map <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h5><h6 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h6><p>​    可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型。</p><p>例子：</p><p>​    判断是否有年龄在29以上的作家</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        判断是否有年龄在29以上的作家</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h6><p>​    可以用来判断是否都符合匹配条件，结果为boolean类型。如果都符合结果为true，否则结果为false。</p><p>例子：</p><p>​    判断是否所有的作家都是成年人</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        判断是否所有的作家都是成年人</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h6><p>​    可以判断流中的元素是否都不符合匹配条件。如果都不符合结果为true，否则结果为false</p><p>例子：</p><p>​    判断作家是否都没有超过100岁的。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        判断作家是否都没有超过100岁的。</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h6><p>​    获取流中的任意一个元素。该方法没有办法保证获取的一定是流中的第一个元素。</p><p>例子：</p><p>​    获取任意一个年龄大于18的作家，如果存在就输出他的名字</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        获取任意一个年龄大于18的作家，如果存在就输出他的名字</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Author<span class="token operator">></span> optionalAuthor <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        optionalAuthor<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h6 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h6><p>​    获取流中的第一个元素。</p><p>例子：</p><p>​    获取一个年龄最小的作家，并输出他的姓名。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        获取一个年龄最小的作家，并输出他的姓名。</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Author<span class="token operator">></span> first <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        first<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="reduce归并"><a href="#reduce归并" class="headerlink" title="reduce归并"></a>reduce归并</h5><p>​    对流中的数据按照你指定的计算方式计算出一个结果。（缩减操作）</p><p>​    reduce的作用是把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和初始化值进行计算，计算结果再和后面的元素计算。</p><p>​    reduce两个参数的重载形式内部的计算方式如下：</p><pre class=" language-java"><code class="language-java">T result <span class="token operator">=</span> identity<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>T element <span class="token operator">:</span> <span class="token keyword">this</span> stream<span class="token punctuation">)</span>    result <span class="token operator">=</span> accumulator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token keyword">return</span> result<span class="token punctuation">;</span></code></pre><p>​    其中identity就是我们可以通过方法参数传入的初始值，accumulator的apply具体进行什么计算也是我们通过方法参数来确定的。</p><p>例子：</p><p>​    使用reduce求所有作者年龄的和</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        使用reduce求所有作者年龄的和</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer sum <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> result <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    使用reduce求所有作者中年龄的最大值</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        使用reduce求所有作者中年龄的最大值</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer max <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> result <span class="token operator">&lt;</span> element <span class="token operator">?</span> element <span class="token operator">:</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    使用reduce求所有作者中年龄的最小值</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        使用reduce求所有作者中年龄的最小值</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer min <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> result <span class="token operator">></span> element <span class="token operator">?</span> element <span class="token operator">:</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    reduce一个参数的重载形式内部的计算</p><pre class=" language-java"><code class="language-java">      <span class="token keyword">boolean</span> foundAny <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     T result <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>T element <span class="token operator">:</span> <span class="token keyword">this</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foundAny<span class="token punctuation">)</span> <span class="token punctuation">{</span>             foundAny <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             result <span class="token operator">=</span> element<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>             result <span class="token operator">=</span> accumulator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> foundAny <span class="token operator">?</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">:</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    如果用一个参数的重载方法去求最小值代码如下：</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//        使用reduce求所有作者中年龄的最小值</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> minOptional <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> result <span class="token operator">></span> element <span class="token operator">?</span> element <span class="token operator">:</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        minOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>age<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-5-注意事项"><a href="#3-5-注意事项" class="headerlink" title="3.5 注意事项"></a>3.5 注意事项</h3><ul><li>惰性求值（如果没有终结操作，没有中间操作是不会得到执行的）</li><li>流是一次性的（一旦一个流对象经过一个终结操作后。这个流就不能再被使用）</li><li>不会影响原数据（我们在流中可以多数据做很多处理。但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）</li></ul><h2 id="4-Optional"><a href="#4-Optional" class="headerlink" title="4. Optional"></a>4. Optional</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>​    我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。</p><p>​    例如：</p><pre class=" language-java"><code class="language-java">        Author author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>author<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>​    尤其是对象中的属性还是一个对象的情况下。这种判断会更多。    </p><p>​    而过多的判断语句会让我们的代码显得臃肿不堪。</p><p>​    所以在JDK8中引入了Optional,养成使用Optional的习惯后你可以写出更优雅的代码来避免空指针异常。</p><p>​    并且在很多函数式编程相关的API中也都用到了Optional，如果不会使用Optional也会对函数式编程的学习造成影响。</p><h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3><h4 id="4-2-1-创建对象"><a href="#4-2-1-创建对象" class="headerlink" title="4.2.1 创建对象"></a>4.2.1 创建对象</h4><p>​    Optional就好像是包装类，可以把我们的具体数据封装Optional对象内部。然后我们去使用Optional中封装好的方法操作封装进去的数据就可以非常优雅的避免空指针异常。</p><p>​    我们一般使用<strong>Optional</strong>的<strong>静态方法ofNullable</strong>来把数据封装成一个Optional对象。无论传入的参数是否为null都不会出现问题。</p><pre class=" language-java"><code class="language-java">        Author author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    你可能会觉得还要加一行代码来封装数据比较麻烦。但是如果改造下getAuthor方法，让其的返回值就是封装好的Optional的话，我们在使用时就会方便很多。</p><p>​    而且在实际开发中我们的数据很多是从数据库获取的。Mybatis从3.5版本可以也已经支持Optional了。我们可以直接把dao方法的返回值类型定义成Optional类型，MyBastis会自己把数据封装成Optional对象返回。封装的过程也不需要我们自己操作。</p><p>​    如果你<strong>确定一个对象不是空</strong>的则可以使用<strong>Optional</strong>的<strong>静态方法of</strong>来把数据封装成Optional对象。</p><pre class=" language-java"><code class="language-java">        Author author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    但是一定要注意，如果使用of的时候传入的参数必须不为null。（尝试下传入null会出现什么结果）</p><p>​    如果一个方法的返回值类型是Optional类型。而如果我们经判断发现某次计算得到的返回值为null，这个时候就需要把null封装成Optional对象返回。这时则可以使用<strong>Optional</strong>的<strong>静态方法empty</strong>来进行封装。</p><pre class=" language-java"><code class="language-java">        Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​    </p><p>​    所以最后你觉得哪种方式会更方便呢？<strong>ofNullable</strong></p><h4 id="4-2-2-安全消费值"><a href="#4-2-2-安全消费值" class="headerlink" title="4.2.2 安全消费值"></a>4.2.2 安全消费值</h4><p>​    我们获取到一个Optional对象后肯定需要对其中的数据进行使用。这时候我们可以使用其<strong>ifPresent</strong>方法对来消费其中的值。</p><p>​    这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码。这样使用起来就更加安全了。</p><p>​    例如,以下写法就优雅的避免了空指针异常。</p><pre class=" language-java"><code class="language-java">        Optional<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-2-3-获取值"><a href="#4-2-3-获取值" class="headerlink" title="4.2.3 获取值"></a>4.2.3 获取值</h4><p>​    如果我们想获取值自己进行处理可以使用get方法获取，但是不推荐。因为当Optional内部的数据为空的时候会出现异常。</p><h4 id="4-2-4-安全获取值"><a href="#4-2-4-安全获取值" class="headerlink" title="4.2.4 安全获取值"></a>4.2.4 安全获取值</h4><p>​    如果我们期望安全的获取值。我们不推荐使用get方法，而是使用Optional提供的以下方法。</p><ul><li><p>orElseGet</p><p>获取数据并且设置数据为空时的默认值。如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建对象作为默认值返回。</p><pre class=" language-java"><code class="language-java">        Optional<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Author author1 <span class="token operator">=</span> authorOptional<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>orElseThrow</p><p>获取数据，如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建异常抛出。</p><pre class=" language-java"><code class="language-java">        Optional<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Author author <span class="token operator">=</span> authorOptional<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"author为空"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li></ul><h4 id="4-2-5-过滤"><a href="#4-2-5-过滤" class="headerlink" title="4.2.5 过滤"></a>4.2.5 过滤</h4><p>​    我们可以使用filter方法对数据进行过滤。如果原本是有数据的，但是不符合判断，也会变成一个无数据的Optional对象。</p><pre class=" language-java"><code class="language-java">        Optional<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorOptional<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-2-6-判断"><a href="#4-2-6-判断" class="headerlink" title="4.2.6 判断"></a>4.2.6 判断</h4><p>​    我们可以使用isPresent方法进行是否存在数据的判断。如果为空返回值为false,如果不为空，返回值为true。但是这种方式并不能体现Optional的好处，<strong>更推荐使用ifPresent方法</strong>。</p><pre class=" language-java"><code class="language-java">        Optional<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authorOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>authorOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="4-2-7-数据转换"><a href="#4-2-7-数据转换" class="headerlink" title="4.2.7 数据转换"></a>4.2.7 数据转换</h4><p>​    Optional还提供了map可以让我们的对数据进行转换，并且转换得到的数据也还是被Optional包装好的，保证了我们的使用安全。</p><p>例如我们想获取作家的书籍集合。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorOptional <span class="token operator">=</span> <span class="token function">getAuthorOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Book<span class="token operator">>></span> optionalBooks <span class="token operator">=</span> authorOptional<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        optionalBooks<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>books <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="5-函数式接口"><a href="#5-函数式接口" class="headerlink" title="5. 函数式接口"></a>5. 函数式接口</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>​    <strong>只有一个抽象方法</strong>的接口我们称之为函数接口。</p><p>​    JDK的函数式接口都加上了**@FunctionalInterface** 注解进行标识。但是无论是否加上该注解只要接口中只有一个抽象方法，都是函数式接口。</p><h3 id="5-2-常见函数式接口"><a href="#5-2-常见函数式接口" class="headerlink" title="5.2 常见函数式接口"></a>5.2 常见函数式接口</h3><ul><li><p>​    Consumer 消费接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数进行消费。</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305311744654.png" /></li><li><p>​    Function 计算转换接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数计算或转换，把结果返回</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305311745240.png" /></li><li><p>​    Predicate 判断接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数条件判断，返回判断结果</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305311745032.png" /></li><li><p>​    Supplier 生产型接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中创建对象，把创建好的对象返回</p></li></ul><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305311746183.png" /><h3 id="5-3-常用的默认方法"><a href="#5-3-常用的默认方法" class="headerlink" title="5.3 常用的默认方法"></a>5.3 常用的默认方法</h3><ul><li><p>and</p><p>我们在使用Predicate接口时候可能需要进行判断条件的拼接。而and方法相当于是使用&amp;&amp;来拼接两个判断条件</p><p>例如：</p><p>打印作家中年龄大于17并且姓名的长度大于1的作家。</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorStream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorStream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>Author<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Author author<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">17</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>Author<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Author author<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>or </p><p>我们在使用Predicate接口时候可能需要进行判断条件的拼接。而or方法相当于是使用||来拼接两个判断条件。</p><p>例如：</p><p>打印作家中年龄大于17或者姓名的长度小于2的作家。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        打印作家中年龄大于17或者姓名的长度小于2的作家。</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>Author<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Author author<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">17</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>Author<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Author author<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>negate</p><p>Predicate接口中的方法。negate方法相当于是在判断添加前面加了个! 表示取反</p><p>例如：</p><p>打印作家中年龄不大于17的作家。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//        打印作家中年龄不大于17的作家。</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>Author<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Author author<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">17</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="6-方法引用"><a href="#6-方法引用" class="headerlink" title="6. 方法引用"></a>6. 方法引用</h2><p>​    我们在使用lambda时，如果方法体中只有一个方法的调用的话（包括构造方法）,我们可以用方法引用进一步简化代码。</p><h3 id="6-1-推荐用法"><a href="#6-1-推荐用法" class="headerlink" title="6.1 推荐用法"></a>6.1 推荐用法</h3><p>​    我们在使用lambda时不需要考虑什么时候用方法引用，用哪种方法引用，方法引用的格式是什么。我们只需要在写完lambda方法发现方法体只有一行代码，并且是方法的调用时使用快捷键尝试是否能够转换成方法引用即可。</p><p>​    当我们方法引用使用的多了慢慢的也可以直接写出方法引用。</p><h3 id="6-2-基本格式"><a href="#6-2-基本格式" class="headerlink" title="6.2 基本格式"></a>6.2 基本格式</h3><p>​    类名或者对象名::方法名</p><h3 id="6-3-语法详解-了解"><a href="#6-3-语法详解-了解" class="headerlink" title="6.3 语法详解(了解)"></a>6.3 语法详解(了解)</h3><h4 id="6-3-1-引用类的静态方法"><a href="#6-3-1-引用类的静态方法" class="headerlink" title="6.3.1 引用类的静态方法"></a>6.3.1 引用类的静态方法</h4><p>​    其实就是引用类的静态方法</p><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><pre class=" language-java"><code class="language-java">类名<span class="token operator">:</span><span class="token operator">:</span>方法名</code></pre><h5 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h5><p>​    如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的静态方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个静态方法中</strong>，这个时候我们就可以引用类的静态方法。</p><p>​    </p><p>例如：</p><p>如下代码就可以用方法引用进行简化</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorStream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                authorStream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age<span class="token operator">-</span><span class="token operator">></span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意，如果我们所重写的方法是没有参数的，调用的方法也是没有参数的也相当于符合以上规则。</p><p>优化后如下：</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorStream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorStream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>valueOf<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="6-3-2-引用对象的实例方法"><a href="#6-3-2-引用对象的实例方法" class="headerlink" title="6.3.2 引用对象的实例方法"></a>6.3.2 引用对象的实例方法</h4><h5 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5><pre class=" language-java"><code class="language-java">对象名<span class="token operator">:</span><span class="token operator">:</span>方法名</code></pre><h5 id="使用前提-1"><a href="#使用前提-1" class="headerlink" title="使用前提"></a>使用前提</h5><p>​    如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个对象的成员方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用对象的实例方法</p><p>例如：</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorStream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorStream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优化后：</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token operator">&lt;</span>Author<span class="token operator">></span> authorStream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authorStream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sb<span class="token operator">:</span><span class="token operator">:</span>append<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="6-3-4-引用类的实例方法"><a href="#6-3-4-引用类的实例方法" class="headerlink" title="6.3.4 引用类的实例方法"></a>6.3.4 引用类的实例方法</h4><h5 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h5><pre class=" language-java"><code class="language-java">类名<span class="token operator">:</span><span class="token operator">:</span>方法名</code></pre><h5 id="使用前提-2"><a href="#使用前提-2" class="headerlink" title="使用前提"></a>使用前提</h5><p>​    如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了第一个参数的成员方法</strong>，并且我们把要<strong>重写的抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用类的实例方法。</p><p>例如：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">interface</span> <span class="token class-name">UseString</span><span class="token punctuation">{</span>        String <span class="token function">use</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">subAuthorName</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> UseString useString<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> useString<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>start<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">subAuthorName</span><span class="token punctuation">(</span><span class="token string">"三更草堂"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UseString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">use</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>优化后如下：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">subAuthorName</span><span class="token punctuation">(</span><span class="token string">"三更草堂"</span><span class="token punctuation">,</span> String<span class="token operator">:</span><span class="token operator">:</span>substring<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="6-3-5-构造器引用"><a href="#6-3-5-构造器引用" class="headerlink" title="6.3.5 构造器引用"></a>6.3.5 构造器引用</h4><p>​    如果方法体中的一行代码是构造器的话就可以使用构造器引用。</p><h5 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h5><pre class=" language-java"><code class="language-java">类名<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span></code></pre><h5 id="使用前提-3"><a href="#使用前提-3" class="headerlink" title="使用前提"></a>使用前提</h5><p>​    如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的构造方法</strong>，并且我们把<strong>要重写的抽象方法中的所有的参数都按照顺序传入了这个构造方法中</strong>，这个时候我们就可以引用构造器。</p><p>例如：</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>name<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>sb<span class="token operator">-</span><span class="token operator">></span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-三更"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>str<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优化后：</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StringBuilder<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>sb<span class="token operator">-</span><span class="token operator">></span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-三更"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>str<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="7-高级用法"><a href="#7-高级用法" class="headerlink" title="7. 高级用法"></a>7. 高级用法</h2><h3 id="基本数据类型优化"><a href="#基本数据类型优化" class="headerlink" title="基本数据类型优化"></a>基本数据类型优化</h3><p>​    我们之前用到的很多Stream的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。</p><p>​    即使我们操作的是整数小数，但是实际用的都是他们的包装类。JDK5中引入的自动装箱和自动拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道装箱和拆箱肯定是要消耗时间的。虽然这个时间消耗很下。但是在大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了。</p><p>​    所以为了让我们能够对这部分的时间消耗进行优化。Stream还提供了很多专门针对基本数据类型的方法。</p><p>​    例如：mapToInt,mapToLong,mapToDouble,flatMapToInt,flatMapToDouble等。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test27</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age <span class="token operator">-</span><span class="token operator">></span> age <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>age<span class="token operator">-</span><span class="token operator">></span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age<span class="token operator">-</span><span class="token operator">></span>age<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age <span class="token operator">-</span><span class="token operator">></span> age <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>age<span class="token operator">-</span><span class="token operator">></span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age<span class="token operator">-</span><span class="token operator">></span>age<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>​    当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完全。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用Stream的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。</p><p>​    parallel方法可以把串行流转换成并行流。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test28</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer sum <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Integer num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>num <span class="token operator">-</span><span class="token operator">></span> num <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> ele<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> result <span class="token operator">+</span> ele<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​    也可以通过parallelStream直接获取并行流对象。</p><pre class=" language-java"><code class="language-java">        List<span class="token operator">&lt;</span>Author<span class="token operator">></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authors<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-</span><span class="token operator">></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age <span class="token operator">-</span><span class="token operator">></span> age <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>age<span class="token operator">-</span><span class="token operator">></span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age<span class="token operator">-</span><span class="token operator">></span>age<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybaties-plus的快速入门</title>
      <link href="/2023/05/30/mybaties-plus-de-kuai-su-ru-men/"/>
      <url>/2023/05/30/mybaties-plus-de-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>MyBatis-Plus（简称为 MyBatis+ 或 MP）是一个基于 MyBatis 的开源持久层框架，旨在简化和增强与数据库交互的开发工作。它提供了一系列的增强功能和工具，使得使用 MyBatis 进行数据库操作更加便捷高效。</p><p>MyBatis-Plus 提供了以下主要功能和特性：</p><ol><li>通用 CRUD 操作：MyBatis-Plus 提供了一组通用的 CRUD 方法，可以通过简单的配置和接口编写，实现常见的数据库操作，如插入、查询、更新和删除等。</li><li>条件构造器：MyBatis-Plus 提供了强大的条件构造器，可以通过链式调用的方式，灵活地构建查询条件，包括等于、大于、小于、模糊匹配等多种条件。</li><li>分页查询：MyBatis-Plus 提供了对分页查询的支持，可以方便地进行分页查询操作，包括设置页数、每页记录数等。</li><li>自动生成代码：MyBatis-Plus 可以根据数据库表结构自动生成实体类、Mapper 接口以及 XML 映射文件，减少手动编写重复的代码工作。</li><li>多租户支持：MyBatis-Plus 提供了多租户的支持，可以实现基于数据库表中的租户字段进行数据隔离和查询。</li><li>性能优化：MyBatis-Plus 通过内置的性能分析插件和优化策略，提供了一些性能优化的功能和建议，帮助开发者提升数据库操作的效率。</li></ol><p>MyBatis-Plus 是对 MyBatis 的增强和扩展，它保留了 MyBatis 的灵活性和可定制性，同时提供了更多便捷的功能和工具，简化了数据库操作的开发工作。因此，许多开发者选择使用 MyBatis-Plus 来提高开发效率和简化代码编写。</p><h1 id="创建数据库并初始化表"><a href="#创建数据库并初始化表" class="headerlink" title="创建数据库并初始化表"></a>创建数据库并初始化表</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre class=" language-bash"><code class="language-bash">mybatis_plus</code></pre><h2 id="创建User表"><a href="#创建User表" class="headerlink" title="创建User表"></a>创建User表</h2><pre class=" language-ba"><code class="language-ba">DROP TABLE IF EXISTS `user`;CREATE TABLE `user`  (  `id` bigint NOT NULL COMMENT '主键ID',  `NAME` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '姓名',  `age` int NULL DEFAULT NULL COMMENT '年龄',  `email` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '邮箱',  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',  `update_time` datetime NULL DEFAULT NULL COMMENT '更新时间',  `version` int NULL DEFAULT NULL COMMENT '版本号',  `is_delete` int NULL DEFAULT NULL COMMENT '是否删除？1删除 0不删除',  PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</code></pre><h2 id="插入测试数据"><a href="#插入测试数据" class="headerlink" title="插入测试数据"></a>插入测试数据</h2><pre class=" language-bash"><code class="language-bash">INSERT INTO user <span class="token punctuation">(</span>id, name, age, email<span class="token punctuation">)</span> VALUES<span class="token punctuation">(</span>1, <span class="token string">'Jone'</span>, 18, <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span>2, <span class="token string">'Jack'</span>, 20, <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span>3, <span class="token string">'Tom'</span>, 28, <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span>4, <span class="token string">'Sandy'</span>, 21, <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span>5, <span class="token string">'Billie'</span>, 24, <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="二、初始化工程"><a href="#二、初始化工程" class="headerlink" title="二、初始化工程"></a>二、初始化工程</h1><p>使用 Spring Initializr 快速初始化一个 Spring Boot 工程<br><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301741401.png"/></p><h1 id="三、添加依赖"><a href="#三、添加依赖" class="headerlink" title="三、添加依赖"></a>三、添加依赖</h1><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mybatis-plus--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--mysql--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--lombok用来简化实体类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h1 id="四、数据源配置"><a href="#四、数据源配置" class="headerlink" title="四、数据源配置"></a>四、数据源配置</h1><p>在 application.properties 配置文件中添加 MySQL 数据库的相关配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#mysql数据库连接 5.7版本 （根据需要选择）</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis_plus</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token comment" spellcheck="true">#mysql数据库连接 8.0以上版本（根据需要选择）</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis_plus?</span><span class="token attr-name">serverTimezone</span><span class="token punctuation">=</span><span class="token attr-value">GMT%2B8</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token comment" spellcheck="true">#mybatis日志</span><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre><h1 id="五、编写代码"><a href="#五、编写代码" class="headerlink" title="五、编写代码"></a>五、编写代码</h1><h4 id="1、创建包-entity-编写实体类-User-java（此处使用了-Lombok-简化代码）"><a href="#1、创建包-entity-编写实体类-User-java（此处使用了-Lombok-简化代码）" class="headerlink" title="1、创建包 entity 编写实体类 User.java（此处使用了 Lombok 简化代码）"></a>1、创建包 entity 编写实体类 User.java（此处使用了 Lombok 简化代码）</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">entityUser</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-创建包-mapper-编写Mapper-接口：-UserMapper-java"><a href="#2-创建包-mapper-编写Mapper-接口：-UserMapper-java" class="headerlink" title="2.创建包 mapper 编写Mapper 接口： UserMapper.java"></a>2.创建包 mapper 编写Mapper 接口： UserMapper.java</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="3-在启动类上添加包扫描"><a href="#3-在启动类上添加包扫描" class="headerlink" title="3.在启动类上添加包扫描"></a>3.在启动类上添加包扫描</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.yang.mpdemo.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpdemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MpdemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="六、开始测试"><a href="#六、开始测试" class="headerlink" title="六、开始测试"></a>六、开始测试</h1><h4 id="1-查询全部"><a href="#1-查询全部" class="headerlink" title="1.查询全部"></a>1.查询全部</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MpdemoApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//UserMapper 中的 selectList() 方法的参数为 MP 内置的条件封装器 Wrapper</span>        <span class="token comment" spellcheck="true">//所以不填写就是无任何条件</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301741943.png" /><h4 id="2-插入操作"><a href="#2-插入操作" class="headerlink" title="2.插入操作"></a>2.插入操作</h4><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Helen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"55317332@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//影响的行数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//id自动回填</span>    <span class="token punctuation">}</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301741418.png" /><h5 id="主键策略"><a href="#主键策略" class="headerlink" title="主键策略"></a>主键策略</h5><p><strong>（1）ID_WORKER</strong><br>MyBatis-Plus默认的主键策略是：ID_WORKER 全局唯一ID<br><strong>（2）自增策略</strong></p><p>要想主键自增需要配置如下主键策略</p><p>需要在创建数据表的时候设置主键自增<br>        实体字段中配置 @TableId(type = IdType.AUTO)</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span><span class="token keyword">private</span> Long id<span class="token punctuation">;</span></code></pre><p><strong>要想影响所有实体的配置，可以设置全局主键配</strong></p><pre class=" language-properties"><code class="language-properties">全局设置主键生成策略<span class="token comment" spellcheck="true">#mybatis-plus.global-config.db-config.id-type=auto</span></code></pre><p><strong>其它主键策略：分析 IdType 源码可知</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> IdType <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**            * 数据库ID自增            */</span>            <span class="token function">AUTO</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/**            * 该类型为未设置主键类型            */</span>            <span class="token function">NONE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/**            * 用户输入ID            * 该类型可以通过自己注册自动填充插件进行填充            */</span>            <span class="token function">INPUT</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/* 以下3种类型、只有当插入对象ID 为空，才自动填充。 */</span>            <span class="token comment" spellcheck="true">/**            * 全局唯一ID (idWorker)            */</span>            <span class="token function">ID_WORKER</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/**            * 全局唯一ID (UUID)            */</span>            <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">/**            * 字符串全局唯一ID (idWorker 的字符串表示)            */</span>            <span class="token function">ID_WORKER_STR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> key<span class="token punctuation">;</span>            <span class="token function">IdType</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-根据Id更新操作"><a href="#3-根据Id更新操作" class="headerlink" title="3.根据Id更新操作"></a>3.根据Id更新操作</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301741637.png" /><h1 id="七、自动填充"><a href="#七、自动填充" class="headerlink" title="七、自动填充"></a>七、自动填充</h1><p>项目中经常会遇到一些数据，每次都使用相同的方式填充，例如记录的创建时间，更新时间等。<br>我们可以使用MyBatis Plus的自动填充功能，完成这些字段的赋值工作：</p><h5 id="（1）数据库表中添加自动填充字段"><a href="#（1）数据库表中添加自动填充字段" class="headerlink" title="（1）数据库表中添加自动填充字段"></a>（1）数据库表中添加自动填充字段</h5><p>在User表中添加datetime类型的新的字段 create_time、update_time</p><h5 id="（2）实体上添加注解"><a href="#（2）实体上添加注解" class="headerlink" title="（2）实体上添加注解"></a>（2）实体上添加注解</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>        <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//@TableField(fill = FieldFill.UPDATE)</span>        <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>        <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="（3）实现元对象处理器接口"><a href="#（3）实现元对象处理器接口" class="headerlink" title="（3）实现元对象处理器接口"></a>（3）实现元对象处理器接口</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yang<span class="token punctuation">.</span>mpdemo<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>MetaObjectHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>MetaObject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2022年11月16日 22:53:34 * @packageName com.yang.mpdemo.config * @className MyMetaObjectHandler * @describe TODO */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyMetaObjectHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start insert fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start update fill ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="（4）测试"><a href="#（4）测试" class="headerlink" title="（4）测试"></a>（4）测试</h5><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"3333333@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//影响的行数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//id自动回填</span>    <span class="token punctuation">}</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301740161.png" /><h1 id="八、乐观锁"><a href="#八、乐观锁" class="headerlink" title="八、乐观锁"></a>八、乐观锁</h1><p>主要适用场景：当要更新一条记录的时候，希望这条记录没有被别人更新，也就是说实现线程安全的数据更新<br><strong>乐观锁实现方式：</strong></p><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><p><strong>（1）实体类添加version字段</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Version</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> Integer version<span class="token punctuation">;</span></code></pre><p><strong>（2）在 MybatisPlusConfig 中注册 Bean</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yang<span class="token punctuation">.</span>mpdemo<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>OptimisticLockerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableTransactionManagement<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2022年11月16日 23:03:11 * @packageName com.yang.mpdemo.config * @className MybatisPlusConfig * @describe TODO */</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 乐观锁     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInterceptor <span class="token function">optimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301740455.png" /><p><strong>（2)测试</strong></p><pre class=" language-c"><code class="language-c">  @Test    public <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> new <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"222222222@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//影响的行数</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//id自动回填</span>    <span class="token punctuation">}</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301740136.png" /><h1 id="九、逻辑删除"><a href="#九、逻辑删除" class="headerlink" title="九、逻辑删除"></a>九、逻辑删除</h1><ul><li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除数据</li><li>逻辑删除：假删除，将对应数据中代表是否被删除字段状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</li><li><em>（1）数据库中添加 deleted字段</em>*</li><li><em>（2）实体类添加deleted 字段</em>*<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@TableLogic</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> Integer deleted<span class="token punctuation">;</span></code></pre></li><li><em>（3）元对象处理器接口添加deleted的insert默认值</em>*</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"isDelete"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>（4）application.properties 加入配置</strong><br>此为默认值，如果你的默认值和mp默认的一样,该配置可无</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">mybatis-plus.global-config.db-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">mybatis-plus.global-config.db-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span></code></pre><p>（<strong>5）在 MybatisPlusConfig 中注册 Bean</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ISqlInjector <span class="token function">sqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LogicSqlInjector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>（6）测试逻辑删除</strong></p><ul><li>测试后发现，数据并没有被删除，deleted字段的值由0变成了1</li><li>测试后分析打印的sql语句，是一条update</li><li>注意：被删除数据的deleted 字段的值必须是 0，才能被选取出来执行逻辑删除的操作</li></ul><p> 先插入一条数据，可以看到该数据is_delete字段参数为0<br><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301740391.png" /></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 测试 逻辑删除*/</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogicDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1592902524852842498L<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301740017.png" /><p>（7）测试逻辑删除后的查询<br><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301740364.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云服务器+nginx+ssl证书</title>
      <link href="/2023/05/29/teng-xun-yun-fu-wu-qi-nginx-ssl-zheng-shu/"/>
      <url>/2023/05/29/teng-xun-yun-fu-wu-qi-nginx-ssl-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SSL代表”Secure Sockets Layer”，是一种网络安全协议，用于在网络通信中保护数据的安全性和完整性。它建立在传输层协议（如TCP）之上，为客户端和服务器之间的通信提供加密和认证机制。</p><p>SSL的主要目的是确保通过互联网传输的敏感数据（如个人信息、信用卡号码、登录凭证等）在传输过程中不会被未经授权的第三方窃听、篡改或伪装。它通过使用加密技术来保护数据的机密性，并使用数字证书来验证服务器的身份。</p><p>SSL协议通过两个主要步骤来实现安全通信：</p><ol><li>握手阶段（Handshake）：客户端和服务器之间进行一系列的交互，协商加密算法、生成临时会话密钥，并验证服务器的身份。</li><li>数据传输阶段：在握手成功后，客户端和服务器使用协商的加密算法和密钥来加密和解密数据，确保数据的保密性和完整性。</li></ol><p>SSL在安全通信中起着重要的作用，并被广泛应用于保护网站、电子商务、在线银行、电子邮件等领域。它的后继协议是TLS（Transport Layer Security），TLS在功能和目标上与SSL类似，并逐渐取代了SSL成为更安全的标准协议。</p><h2 id="登录腾讯云下载证书"><a href="#登录腾讯云下载证书" class="headerlink" title="登录腾讯云下载证书"></a>登录腾讯云下载证书</h2><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291518184.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291526069.png" /><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291528283.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291529737.png" /><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291612966.png" /><h2 id="nginx配置ssl证书"><a href="#nginx配置ssl证书" class="headerlink" title="nginx配置ssl证书"></a>nginx配置ssl证书</h2><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291613653.png" /><p>1.上传证书</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291617319.png" /><p>2.修改nginx配置文件</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291620249.png"><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291627509.png"/><pre class=" language-json"><code class="language-json"> server <span class="token punctuation">{</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>         server_name  ypsky.top<span class="token punctuation">;</span>        rewrite ^(.*<span class="token punctuation">)</span>$ https<span class="token operator">:</span>//$host$<span class="token number">1</span> permanent<span class="token punctuation">;</span>         #charset koi8-r<span class="token punctuation">;</span>        #access_log  logs/host.access.log  main<span class="token punctuation">;</span>        location / <span class="token punctuation">{</span>            root   html<span class="token punctuation">;</span>            index  index.html index.htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291628028.png" /><pre class=" language-json"><code class="language-json">  server <span class="token punctuation">{</span>        listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>        server_name  ypsky.top<span class="token punctuation">;</span>        ssl_certificate      /usr/local/nginx/cret/ypsky.xyz_bundle.crt<span class="token punctuation">;</span>        ssl_certificate_key  /usr/local/nginx/cret/ypsky.xyz.key<span class="token punctuation">;</span>        ssl_session_cache    shared<span class="token operator">:</span>SSL<span class="token operator">:</span>1m<span class="token punctuation">;</span>        ssl_session_timeout  5m<span class="token punctuation">;</span>        ssl_ciphers  HIGH<span class="token operator">:</span>!aNULL<span class="token operator">:</span>!MD5<span class="token punctuation">;</span>        ssl_prefer_server_ciphers  on<span class="token punctuation">;</span>        location / <span class="token punctuation">{</span>            root   html<span class="token punctuation">;</span>            index  index.html index.htm<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>3.重启服务</p><h2 id="网址访问"><a href="#网址访问" class="headerlink" title="网址访问"></a>网址访问</h2><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305291630926.png" />]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 云服务器 </tag>
            
            <tag> ssl证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window安装docker desktop</title>
      <link href="/2023/05/27/window-an-zhuang-docker-desktop/"/>
      <url>/2023/05/27/window-an-zhuang-docker-desktop/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Docker Desktop 是一个用于在个人计算机上创建和管理 Docker 容器的应用程序。它为开发者和系统管理员提供了一个简单易用的界面，用于构建、运行和调试容器化的应用程序。</p><p>Docker 是一种开源的容器化平台，可以将应用程序和其依赖的软件打包到一个称为容器的独立单元中。容器可以在不同的计算机上运行，并且具有一致性和可移植性。Docker Desktop 提供了一个方便的方式来安装和管理 Docker 引擎（Docker Engine）以及相关的工具和服务。</p><p>使用 Docker Desktop，您可以通过简单的图形界面或命令行工具来创建和管理容器。它还提供了一个本地的容器注册表，可以用来存储和共享容器镜像。Docker Desktop 还包含了一些实用的工具，如容器编排工具 Docker Compose，用于管理多个容器的应用程序。</p><p>无论您是开发者还是系统管理员，Docker Desktop 都可以帮助您更轻松地构建、测试和部署容器化的应用程序。它支持在 Windows、macOS 和 Linux 等操作系统上运行，并提供了一致的用户体验和功能。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>检查下面功能是否开启</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305280958676.png" /><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305281000533.png" /><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>网址：<a href="https://www.docker.com/">https://www.docker.com/</a></p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305280938886.png" /><p>因为docker desktop默认安装的路径是在“C:\Program Files\Docker” ，docker desktop在使用过程中会不断增大，所以最好就是安装目录和存储目录软连接到其他数据盘。</p><pre class=" language-bash"><code class="language-bash">创建这两个文件夹C:\Program Files\DockerC:\Users\37656\AppData\Local\Docker</code></pre><p>建立软连接(cmd命令行)</p><p>需要管理员身份打开</p><pre class=" language-bash"><code class="language-bash">mklink /j “C:\Program Files\Docker” “D:\Program Files\Docker”mklink /j “C:\Users\37656\AppData\Local\Docker” “D:\Program Data\Docker”</code></pre><p>然后安装软件即可</p><h2 id="检查安装结果"><a href="#检查安装结果" class="headerlink" title="检查安装结果"></a>检查安装结果</h2><p>安装完毕后C盘中应该如图1、2所示，两个路径下的Docker文件夹成功建立了软连接</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305281004638.png" /><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305281005156.png" /><h2 id="设置镜像下载的源"><a href="#设置镜像下载的源" class="headerlink" title="设置镜像下载的源"></a>设置镜像下载的源</h2><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305281008615.png" /><pre class=" language-json"><code class="language-json"> <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"https://hub-mirror.c.163.com/"</span>  <span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装python3</title>
      <link href="/2023/05/26/centos-an-zhuang-python3/"/>
      <url>/2023/05/26/centos-an-zhuang-python3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Python是一种高级编程语言，它具有简洁、易读的语法，被广泛用于软件开发、数据分析、人工智能和科学计算等领域。Python由荷兰程序员Guido van Rossum于1991年创建，它的设计目标是提供一种简单直观的编程方式。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>简洁易读：Python使用简洁的语法和缩进风格，使得代码易于理解和阅读，从而提高开发效率。</li><li>可移植性：Python可以在多个平台上运行，包括Windows、Mac和各种Linux发行版，这使得开发的应用程序具有较高的可移植性。</li><li>强大的标准库：Python拥有丰富的标准库，提供了大量的内置模块和函数，可以实现各种任务，如文件操作、网络编程、图形界面开发等。</li><li>第三方库生态系统：Python拥有庞大的第三方库生态系统，例如NumPy、Pandas、Matplotlib和TensorFlow等，这些库为数据分析、科学计算和机器学习等领域提供了强大的功能支持。</li><li>面向对象：Python支持面向对象编程，可以使用类和对象来组织和管理代码，提高代码的复用性和可维护性。</li><li>动态类型：Python是一种动态类型语言，变量的类型在运行时确定，这使得编写和调试代码更加灵活和快速。</li></ol><p>Python的优点之一是它的学习曲线相对较低，适合初学者入门。同时，它也是一种功能强大的编程语言，被许多专业开发人员广泛应用于各种领域。</p><h2 id="liunx安装过程"><a href="#liunx安装过程" class="headerlink" title="liunx安装过程"></a>liunx安装过程</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>官方地址：<a href="https://www.python.org/">https://www.python.org/</a></p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305262029981.png" alt="image-20230526202957438"></p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305262031334.png" alt="image-20230526203124495"></p><p>用ftp工具上传至服务器</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305262237070.png" alt="image-20230526223718420"></p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>前提：不要使用root用户安装，否则后面pip安装会出问题。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 解压</span><span class="token function">tar</span> -zxvf Python-3.9.16.tgz -C /opt/module/<span class="token comment" spellcheck="true"># 配置python3需要先安装gcc</span>yum <span class="token function">install</span> -y gcc<span class="token comment" spellcheck="true">#安装所需的包 否则编译会出错</span>yum -y <span class="token function">install</span> ncurses-devel libuuid-devel zlib zlib-devel sqlite-devel readline-devel tkinter tcl-devel tk-devel lzma gdbm-devel xz-devel libffi-devel<span class="token comment" spellcheck="true"># 进入Python-3.9.16安装目录</span><span class="token function">cd</span> /opt/module/Python-3.9.16<span class="token comment" spellcheck="true"># 配置安装环境</span>./configure --prefix<span class="token operator">=</span>/opt/module/python3.9<span class="token comment" spellcheck="true">#编译</span><span class="token function">make</span><span class="token comment" spellcheck="true">#安装</span><span class="token function">make</span> <span class="token function">install</span></code></pre><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305262250645.png" alt="image-20230526225017399"></p><p>查看原来的软连接</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305262159891.png" alt="image-20230526215946316"></p><p>默认的python路径为/usr/bin/python，python3的路径为/usr/local/python3.9/bin/python3</p><p>跟换python软连接</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305262253149.png" alt="image-20230526225356206"></p><p>创建pip软连接</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305262256198.png" alt="image-20230526225629792"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式的使用</title>
      <link href="/2023/05/25/dan-li-mo-shi-de-shi-yong/"/>
      <url>/2023/05/25/dan-li-mo-shi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>单例模式是一种创建型设计模式，旨在确保一个类只有一个实例，并提供一个全局访问点来访问该实例。</p><p>在单例模式中，类的构造函数被私有化，使得外部无法直接通过构造函数创建实例。而是通过类内部的静态方法或静态属性来获取类的唯一实例。当第一次获取实例时，单例模式会创建一个新的实例，并将其保存起来，以后每次获取实例时都返回同一个实例。</p><p>优点：</p><ol><li>全局唯一性：单例模式确保一个类只有一个实例，这对于需要共享状态或资源的情况非常有用，避免了多个实例之间的冲突和资源浪费。</li><li>全局访问点：单例模式提供一个全局访问点，使得其他类可以方便地访问实例，简化了对象之间的通信和调用。</li></ol><p>缺点：</p><ol><li>隐藏依赖关系：单例模式可能会引入紧耦合的依赖关系，因为它隐藏了实例的创建和管理过程。这会使得代码难以测试和维护，增加了代码的复杂性。</li><li>破坏单一职责原则：单例模式往往会承担过多的责任，既要负责自身的职责，又要负责管理实例的创建和共享。这会导致类的职责不够清晰，增加了代码的复杂性和维护成本。</li><li>难以扩展：由于单例模式的实例是全局唯一的，因此扩展应用程序以支持多个实例可能会很困难。修改单例类的实现可能会对代码的其他部分产生意想不到的影响。</li></ol><p>单例模式的使用应慎重，只有在确实需要全局唯一实例且共享状态或资源时才适合使用。在设计和使用单例模式时，需要注意避免上述的缺点，并权衡好使用单例模式所带来的利弊。</p><h3 id="饿汉式1"><a href="#饿汉式1" class="headerlink" title="饿汉式1"></a>饿汉式1</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在类内部实例化一个实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有的构造函数,外部无法访问</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对外提供获取实例的静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是个比较形象的比喻。对于一个饿汉来说，他希望他想要用到这个实例的时候就能够立即拿到，而不需要任何等待时间。所以，通过static的静态初始化方式，在该类第一次被加载的时候，就有一个SimpleSingleton的实例被创建出来了。这样就保证在第一次想要使用该对象时，他已经被初始化好了。同时，由于该实例在类被加载的时候就创建出来了，所以也避免了线程安全问题</p><h3 id="饿汉式2"><a href="#饿汉式2" class="headerlink" title="饿汉式2"></a>饿汉式2</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在类内部定义</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton2 instance<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化该实例</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//私有的构造函数,外部无法访问</span>    <span class="token keyword">private</span> <span class="token function">Singleton2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对外提供获取实例的静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton2 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>饿汉式单例，在类被加载的时候对象就会实例化。这也许会造成不必要的消耗，因为有可能这个实例根本就不会被用到。而且，如果这个类被多次加载的话也会造成多次实例化。其实解决这个问题的方式有很多，下面提供两种解决方式，第一种是使用静态内部类的形式。第二种是使用懒汉式。</p><h3 id="懒汉式-存在现在不安全"><a href="#懒汉式-存在现在不安全" class="headerlink" title="懒汉式(存在现在不安全)"></a>懒汉式(存在现在不安全)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对外提供获取实例的静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在对象被使用的时候才实例化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面这种单例叫做懒汉式单例。懒汉，就是不会提前把实例创建出来，将类对自己的实例化延迟到第一次被引用的时候。getInstance方法的作用是希望该对象在第一次被使用的时候被new出来。有没有发现，其实这种懒汉式单例其实还存在一个问题，那就是线程安全问题。在多线程情况下，有可能两个线程同时进入if语句中，这样，在两个线程都从if中退出的时候就创建了两个不一样的对象。</p><h3 id="线程安全的懒汉式"><a href="#线程安全的懒汉式" class="headerlink" title="线程安全的懒汉式"></a>线程安全的懒汉式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedSingleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SynchronizedSingleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token function">SynchronizedSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对外提供获取实例的静态方法,对该方法加锁</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> SynchronizedSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在对象被使用的时候才实例化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h3><p>针对上面存在的问题，相信对并发编程了解的同学都知道如何解决。其实上面的代码存在的问题主要是锁的范围太大了。只要缩小锁的范围就可以了。那么如何缩小锁的范围呢？相比于同步方法，同步代码块的加锁范围更小。可以改造成：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//code 7</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码看上去好像是没有任何问题。实现了惰性初始化，解决了同步问题，还减小了锁的范围，提高了效率。但是，该代码还存在隐患。隐患的原因主要和<a href="http://www.hollischuang.com/archives/1003">Java内存模型（JMM</a>）有关。考虑下面的事件序列：</p><p>有关。考虑下面的事件序列：</p><p>线程A发现变量没有被初始化, 然后它获取锁并开始变量的初始化。</p><p>由于某些编程语言的语义，编译器生成的代码允许在线程A执行完变量的初始化之前，更新变量并将其指向部分初始化的对象。</p><p>线程B发现共享变量已经被初始化，并返回变量。由于线程B确信变量已被初始化，它没有获取锁。如果在A完成初始化之前共享变量对B可见（这是由于A没有完成初始化或者因为一些初始化的值还没有穿过B使用的内存(缓存一致性)），程序很可能会崩溃。</p><p>（上面的例子不太能理解的同学，请恶补JAVA内存模型相关知识）</p><h3 id="优化使用volatile"><a href="#优化使用volatile" class="headerlink" title="优化使用volatile"></a>优化使用<code>volatile</code></h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//code 8</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> VolatileSingleton singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">VolatileSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> VolatileSingleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>VolatileSingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VolatileSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>上面这种双重校验锁的方式用的比较广泛，他解决了前面提到的所有问题。</strong>但是，即使是这种看上去完美无缺的方式也可能存在问题，那就是遇到序列化的时候。详细内容后文介绍。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FinalWrapper</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> T value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FinalWrapper</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> FinalWrapper<span class="token operator">&lt;</span>FinalSingleton<span class="token operator">></span> helperWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> FinalSingleton <span class="token function">getHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FinalWrapper<span class="token operator">&lt;</span>FinalSingleton<span class="token operator">></span> wrapper <span class="token operator">=</span> helperWrapper<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>helperWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    helperWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalWrapper</span><span class="token operator">&lt;</span>FinalSingleton<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FinalSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                wrapper <span class="token operator">=</span> helperWrapper<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> wrapper<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="枚举式"><a href="#枚举式" class="headerlink" title="枚举式"></a>枚举式</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// code 10</span><span class="token keyword">public</span> <span class="token keyword">enum</span>  Singleton <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种方式是Effective Java作者Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象（下面会介绍），可谓是很坚强的壁垒啊，在深度分析Java的枚举类型—-枚举的线程安全性及序列化问题中有详细介绍枚举的线程安全问题和序列化问题，不过，个人认为由于1.5中才加入enum特性，用这种方式写不免让人感觉生疏，在实际工作中，我也很少看见有人这么写过，但是不代表他不好。</p><h3 id="单例与序列化"><a href="#单例与序列化" class="headerlink" title="单例与序列化"></a>单例与序列化</h3><p>在单例与序列化的那些事儿一文中，Hollis就分析过单例和序列化之前的关系——序列化可以破坏单例。要想防止序列化对单例的破坏，只要在Singleton类中定义readResolve就可以解决该问题：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hollis<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by hollis on 16/2/5. * 使用双重校验锁方式实现单例 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Object <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>转载至<a href="https://blog.csdn.net/qq_26645151/article/details/124552755">https://blog.csdn.net/qq_26645151/article/details/124552755</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>minio+springboot图片的上传下载</title>
      <link href="/2023/05/24/minio-springboot-tu-pian-de-shang-chuan-xia-zai/"/>
      <url>/2023/05/24/minio-springboot-tu-pian-de-shang-chuan-xia-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面已经在虚拟机中搭建了minio文件存储服务器。现在我们就通过springboot向文件服务器中上传和下载图片</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol><li><p>首先，确保你已经在Spring Boot项目中添加了MinIO的依赖。你可以在<code>pom.xml</code>文件中添加以下依赖项：</p><pre class=" language-xml"><code class="language-xml">         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.7.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li></ol><p>2.在<code>application.properties</code>文件（或者<code>application.yml</code>）中配置MinIO的连接信息。你需要提供MinIO服务器的地址、端口、凭据等信息。例如：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># MinIO配置</span><span class="token key atrule">minio</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.109.102<span class="token punctuation">:</span><span class="token number">9090</span>  <span class="token key atrule">accessKey</span><span class="token punctuation">:</span> 1PBOZLWZ137LRL3307N8 <span class="token comment" spellcheck="true">#your-access-key</span>  <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> e+MnscuodRJ2ZQaO+LEgDy3DsT9E73JeFVjeDN7n <span class="token comment" spellcheck="true">#your-secret-key</span>  <span class="token key atrule">bucketName</span><span class="token punctuation">:</span> blog</code></pre><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><p>MinioConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>MinioClient<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年05月23日 16:32:54 * @packageName com.yangpeng.updownimage.config * @className MinioConfig * @describe TODO */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 访问地址     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${minio.endpoint}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String endpoint<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * accessKey类似于用户ID，用于唯一标识你的账户     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${minio.accessKey}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String accessKey<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * secretKey是你账户的密码     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${minio.secretKey}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String secretKey<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 默认存储桶     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${minio.bucketName}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String bucketName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MinioClient <span class="token function">minioClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MinioClient minioClient <span class="token operator">=</span> MinioClient<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MinioUtils.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>date<span class="token punctuation">.</span>DateUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>Bucket<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>DeleteObject<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>Item<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>RequiredArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>BASE64Decoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>UnsupportedEncodingException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLDecoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年05月23日 16:36:51 * @packageName com.yangpeng.updownimage.utils * @className MinioUtils * @describe MinIO工具类 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MinioClient minioClient<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/******************************  Operate Bucket Start  ******************************/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> InputStream <span class="token function">base64ToInputStream</span><span class="token punctuation">(</span>String base64<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ByteArrayInputStream stream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BASE64Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decodeBuffer</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stream<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 启动SpringBoot容器的时候初始化Bucket     * 如果没有Bucket则创建     *     * @param bucketName     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createBucket</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">bucketExists</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minioClient<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span>MakeBucketArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断Bucket是否存在，true：存在，false：不存在     *     * @param bucketName     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">bucketExists</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span>BucketExistsArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得Bucket的策略     *     * @param bucketName     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getBucketPolicy</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">getBucketPolicy</span><span class="token punctuation">(</span>GetBucketPolicyArgs                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得所有Bucket列表     *     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Bucket<span class="token operator">></span> <span class="token function">getAllBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">listBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据bucketName获取其相关信息     *     * @param bucketName     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Optional<span class="token operator">&lt;</span>Bucket<span class="token operator">></span> <span class="token function">getBucket</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getAllBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>b <span class="token operator">-</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/******************************  Operate Bucket End  ******************************/</span>    <span class="token comment" spellcheck="true">/******************************  Operate Files Start  ******************************/</span>    <span class="token comment" spellcheck="true">/**     * 根据bucketName删除Bucket，true：删除成功； false：删除失败，文件或已不存在     *     * @param bucketName     * @throws Exception     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeBucket</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        minioClient<span class="token punctuation">.</span><span class="token function">removeBucket</span><span class="token punctuation">(</span>RemoveBucketArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断文件是否存在     *     * @param bucketName     * @param objectName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isObjectExist</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> exist <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            minioClient<span class="token punctuation">.</span><span class="token function">statObject</span><span class="token punctuation">(</span>StatObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[Minio工具类]>>>> 判断文件是否存在, 异常："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> exist<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断文件夹是否存在     *     * @param bucketName     * @param objectName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFolderExist</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Iterable<span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span>Item<span class="token operator">>></span> results <span class="token operator">=</span> minioClient<span class="token punctuation">.</span><span class="token function">listObjects</span><span class="token punctuation">(</span>                    ListObjectsArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recursive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Result<span class="token operator">&lt;</span>Item<span class="token operator">></span> result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Item item <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> objectName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">objectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    exist <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[Minio工具类]>>>> 判断文件夹是否存在，异常："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> exist<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据文件前置查询文件     *     * @param bucketName 存储桶     * @param prefix     前缀     * @param recursive  是否使用递归查询     * @return MinioItem 列表     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">getAllObjectsByPrefix</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span>                                            String prefix<span class="token punctuation">,</span>                                            <span class="token keyword">boolean</span> recursive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Item<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterable<span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span>Item<span class="token operator">>></span> objectsIterator <span class="token operator">=</span> minioClient<span class="token punctuation">.</span><span class="token function">listObjects</span><span class="token punctuation">(</span>                ListObjectsArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recursive</span><span class="token punctuation">(</span>recursive<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>objectsIterator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Result<span class="token operator">&lt;</span>Item<span class="token operator">></span> o <span class="token operator">:</span> objectsIterator<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Item item <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取文件流     *     * @param bucketName 存储桶     * @param objectName 文件名     * @return 二进制流     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> InputStream <span class="token function">getObject</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>                GetObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 断点下载     *     * @param bucketName 存储桶     * @param objectName 文件名称     * @param offset     起始字节的位置     * @param length     要读取的长度     * @return 二进制流     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> InputStream <span class="token function">getObject</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>                GetObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取路径下文件列表     *     * @param bucketName 存储桶     * @param prefix     文件名称     * @param recursive  是否递归查找，false：模拟文件夹结构查找     * @return 二进制流     */</span>    <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Result<span class="token operator">&lt;</span>Item<span class="token operator">>></span> <span class="token function">listObjects</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String prefix<span class="token punctuation">,</span> <span class="token keyword">boolean</span> recursive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">listObjects</span><span class="token punctuation">(</span>                ListObjectsArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">recursive</span><span class="token punctuation">(</span>recursive<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用MultipartFile进行文件上传     *     * @param bucketName  存储桶     * @param file        文件名     * @param objectName  对象名     * @param contentType 类型     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">uploadFile</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> MultipartFile file<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> String contentType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>                PutObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 图片上传     *     * @param bucketName     * @param imageBase64     * @param imageName     * @return     */</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">uploadImage</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String imageBase64<span class="token punctuation">,</span> String imageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>imageBase64<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            InputStream in <span class="token operator">=</span> <span class="token function">base64ToInputStream</span><span class="token punctuation">(</span>imageBase64<span class="token punctuation">)</span><span class="token punctuation">;</span>            String newName <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> imageName <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">;</span>            String year <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">thisYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String month <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>DateUtil<span class="token punctuation">.</span><span class="token function">thisMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> year <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> newName<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 上传本地文件     *     * @param bucketName 存储桶     * @param objectName 对象名称     * @param fileName   本地文件路径     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">uploadFile</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">uploadObject</span><span class="token punctuation">(</span>                UploadObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过流上传文件     *     * @param bucketName  存储桶     * @param objectName  文件对象     * @param inputStream 文件流     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">uploadFile</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> InputStream inputStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>                PutObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建文件夹或目录     *     * @param bucketName 存储桶     * @param objectName 目录路径     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">createDir</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>                PutObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取文件信息, 如果抛出异常则说明文件不存在     *     * @param bucketName 存储桶     * @param objectName 文件名称     * @return     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getFileStatusInfo</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">statObject</span><span class="token punctuation">(</span>                StatObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 拷贝文件     *     * @param bucketName    存储桶     * @param objectName    文件名     * @param srcBucketName 目标存储桶     * @param srcObjectName 目标文件名     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ObjectWriteResponse <span class="token function">copyFile</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> String srcBucketName<span class="token punctuation">,</span> String srcObjectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">copyObject</span><span class="token punctuation">(</span>                CopyObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>CopySource<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>srcBucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>srcObjectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除文件     *     * @param bucketName 存储桶     * @param objectName 文件名称     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeFile</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        minioClient<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>                RemoveObjectArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量删除文件     *     * @param bucketName 存储桶     * @param keys       需要删除的文件列表     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeFiles</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>DeleteObject<span class="token operator">></span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            objects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DeleteObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">removeFile</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[Minio工具类]>>>> 批量删除文件，异常："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取文件外链     *     * @param bucketName 存储桶     * @param objectName 文件名     * @param expires    过期时间 &lt;=7 秒 （外链有效时间（单位：秒））     * @return url     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">,</span> Integer expires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GetPresignedObjectUrlArgs args <span class="token operator">=</span> GetPresignedObjectUrlArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expiry</span><span class="token punctuation">(</span>expires<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得文件外链     *     * @param bucketName     * @param objectName     * @return url     */</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>String bucketName<span class="token punctuation">,</span> String objectName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GetPresignedObjectUrlArgs args <span class="token operator">=</span> GetPresignedObjectUrlArgs<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>objectName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minioClient<span class="token punctuation">.</span><span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将URLDecoder编码转成UTF8     *     * @param str     * @return     * @throws UnsupportedEncodingException     */</span>    <span class="token keyword">public</span> String <span class="token function">getUtf8ByURLDecoder</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnsupportedEncodingException <span class="token punctuation">{</span>        String url <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"%(?![0-9a-fA-F]{2})"</span><span class="token punctuation">,</span> <span class="token string">"%25"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OssController.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>config<span class="token punctuation">.</span>MinioConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yangpeng<span class="token punctuation">.</span>updownimage<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>MinioUtils<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>ObjectWriteResponse<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>http<span class="token punctuation">.</span>fileupload<span class="token punctuation">.</span>IOUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author yangpeng * @version 1.0.0 * @date 2023年05月23日 16:41:14 * @packageName com.yangpeng.updownimage.controller * @className OssController * @describe TODO */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/oss"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MinioUtils minioUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MinioConfig minioConfig<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/upload"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> <span class="token string">"multipart/*"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//文件名</span>            String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            String newFileName = RandomUtil.randomStringUpper(10) + "." + StringUtils.substringAfterLast(fileName, ".");</span>            String newFileName <span class="token operator">=</span> fileName<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//类型</span>            String contentType <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectWriteResponse objectWriteResponse <span class="token operator">=</span> minioUtils<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span>minioConfig<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> newFileName<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>objectWriteResponse<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            throw new AppException(AppExceptionCodeMsg.NOT_FOUND);</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        minioUtils<span class="token punctuation">.</span><span class="token function">removeFile</span><span class="token punctuation">(</span>minioConfig<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getFileStatusInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioUtils<span class="token punctuation">.</span><span class="token function">getFileStatusInfo</span><span class="token punctuation">(</span>minioConfig<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/url"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> minioUtils<span class="token punctuation">.</span><span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>minioConfig<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/download"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    @ApiOperation(value = "文件下载")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream fileInputStream <span class="token operator">=</span> minioUtils<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>minioConfig<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/force-download"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IOUtils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"下载失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241446427.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241448529.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241449559.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241450326.png"/>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker+minio+picgo搭建图床</title>
      <link href="/2023/05/24/docker-minio-picgo-da-jian-tu-chuang/"/>
      <url>/2023/05/24/docker-minio-picgo-da-jian-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MinIO是一个开源的对象存储服务器，它允许您构建私有的云存储服务。它是一个轻量级的、高性能的分布式存储系统，兼容Amazon S3（Simple Storage Service）API，可以用于存储和检索大规模的非结构化数据，例如图像、视频、日志文件、备份等。</p><h2 id="功能与特点"><a href="#功能与特点" class="headerlink" title="功能与特点"></a>功能与特点</h2><p>MinIO的设计目标是提供高度可扩展、易于部署和管理的对象存储解决方案。它具有以下特点：</p><ol><li>高性能：MinIO使用并发、多线程和分布式架构，以实现高性能的对象存储服务。它支持水平扩展，可以根据需求添加更多的节点和存储容量。</li><li>可靠性：MinIO提供数据冗余和错误检测机制，以确保数据的安全性和可靠性。它支持数据备份、故障转移和容错处理，可以保护数据免受硬件故障或数据中心故障的影响。</li><li>兼容性：MinIO兼容Amazon S3 API，这意味着您可以使用现有的S3工具和应用程序与MinIO进行集成。它还支持其他一些常用的对象存储接口和协议，如NFS、HDFS、Azure Blob Storage等。</li><li>简单易用：MinIO具有简单的部署和配置过程，可以在几分钟内设置一个可用的对象存储服务器。它提供直观的Web管理界面和命令行工具，使您能够轻松管理和监控存储服务。</li><li>开源：MinIO是开源软件，基于Apache License 2.0开源许可证发布。这意味着您可以自由地使用、修改和分发MinIO的源代码。</li></ol><p>总之，MinIO是一个开源的、高性能的对象存储服务器，具有可靠性、兼容性和易用性的特点，适用于构建私有云存储和分布式存储解决方案。</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="1-docker部署minio"><a href="#1-docker部署minio" class="headerlink" title="1.docker部署minio"></a>1.docker部署minio</h3><pre class=" language-bash"><code class="language-bash">docker run -p 9000:9000 -p 9090:9090 --name minio \-d --restart<span class="token operator">=</span>always \-e MINIO_ACCESS_KEY<span class="token operator">=</span>admin \-e MINIO_SECRET_KEY<span class="token operator">=</span>2022@minio \-v /usr/dockersys/minio/data:/data \-v /usr/dockersys/minio/config:/root/.minio \minio/minio server /data --console-address <span class="token string">":9000"</span> --address <span class="token string">":9090"</span></code></pre><p>这个命令将以后台模式（-d）运行MinIO容器，并将容器的9000端口映射到主机的9000端口，以及将容器的9090端口映射到主机的9090端口。容器的名称设置为minio（–name minio），并配置了容器的自动重启（–restart=always）。</p><p>还通过环境变量（-e）设置了MinIO的访问密钥（MINIO_ACCESS_KEY）和秘钥（MINIO_SECRET_KEY）。</p><p>使用了两个数据卷（-v）来映射主机上的目录到容器内部，一个用于存储MinIO的数据（/usr/dockersys/minio/data:/data），另一个用于存储MinIO的配置文件（/usr/dockersys/minio/config:/root/.minio）。</p><p><code>minio/minio server /data</code>命令中的<code>server</code>参数指定以单机模式运行MinIO服务器，而<code>/data</code>参数指定MinIO服务器的存储目录为<code>/data</code>。</p><p>最后，指定了MinIO服务器的参数，包括控制台地址（–console-address “:9000”）和监听地址（–address “:9090”）。</p><p>运行此命令后，MinIO容器将在后台启动，并可以通过浏览器访问控制台地址（<a href="http://localhost:9000）来管理和访问MinIO对象存储。/">http://localhost:9000）来管理和访问MinIO对象存储。</a></p><h3 id="2-登录minio后操作"><a href="#2-登录minio后操作" class="headerlink" title="2.登录minio后操作"></a>2.登录minio后操作</h3><p>输入账号密码，进入管理界面，点击左边的Buckets，右面新建一个Bucket：</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241004810.png"/><p>点击刚刚创建好的Buckets，进入配置，点击最下面Access Rules：</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241005308.png"/><p>然后添加一条规则：设置一个名字，然后更改权限位readwrite。</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241007077.png"/><p>着返回buckets的主页，点击access policy下的private：</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241007419.png"/><p>接下来配置access key，点击左边菜单栏的Access Keys，新建一个key：</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241008284.png"/><h3 id="3-picgo中配置"><a href="#3-picgo中配置" class="headerlink" title="3.picgo中配置"></a>3.picgo中配置</h3><p>安装插件</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241011113.png"/><p>配置环境</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241015901.png"/><p>图片上传</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241029717.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305241030205.png"/>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> minio </tag>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java图片上传和预览</title>
      <link href="/2023/05/23/java-tu-pian-shang-chuan-he-yu-lan/"/>
      <url>/2023/05/23/java-tu-pian-shang-chuan-he-yu-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在SpringBoot项目中我们经常需要上传图片到服务器，同时也需要提供一个接口用于在线预览上传到服务器上的图片。在这里我们就通过Java代码实现，然后用postman做测试。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>controller代码实现</p><pre class=" language-java"><code class="language-java">#创建文件目录 <span class="token keyword">private</span> <span class="token keyword">static</span> File <span class="token function">mkdirsmy</span><span class="token punctuation">(</span>String extName<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取当前日期时间</span>        LocalDateTime currentDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建日期时间格式化器</span>        DateTimeFormatter formatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmssSSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 格式化输出当前日期时间</span>        String formattedDateTime <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前日期时间："</span> <span class="token operator">+</span> formattedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前年份</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前月份</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> currentDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以两位数的形式输出月份、日期、小时、分钟和毫秒</span>        String formattedMonth <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%02d"</span><span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>        String originPath <span class="token operator">=</span> <span class="token string">"C:\\Users\\37656\\Desktop\\bat"</span><span class="token punctuation">;</span>        String filePath <span class="token operator">=</span> originPath <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> formattedMonth<span class="token punctuation">;</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> formattedDateTime <span class="token operator">+</span> extName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//完整文件路径</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//        返回上传路径</span>        <span class="token keyword">return</span> file<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//图片上传</span> <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">upload</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String extName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 扩展名格式：</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            extName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>FILE_FORMAT_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File destinationFile <span class="token operator">=</span> <span class="token function">mkdirsmy</span><span class="token punctuation">(</span>extName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取目标文件路径</span>            InputStream inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取源文件输入流</span>            Path path <span class="token operator">=</span> destinationFile<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将输入流写入目标文件</span>            Files<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> path<span class="token punctuation">,</span> StandardCopyOption<span class="token punctuation">.</span>REPLACE_EXISTING<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">,</span>destinationFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AppException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//图片预览</span> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/images/{imageName}"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Resource<span class="token operator">></span> <span class="token function">previewImage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String imageName<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取图片文件路径</span>        String imagePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\37656\\Desktop\\bat\\2023\\05\\"</span> <span class="token operator">+</span> imageName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建文件对象</span>        File imageFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>imagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>imageFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用FileSystemResource创建资源对象</span>            Resource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span>imageFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置响应的Content-Type为图片类型</span>            String contentType <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">probeContentType</span><span class="token punctuation">(</span>imageFile<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回响应实体</span>            <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span><span class="token function">parseMediaType</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230523152624357.png" /><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230523152712416.png" />]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java统一结果返回和异常处理</title>
      <link href="/2023/05/23/java-tong-yi-jie-guo-fan-hui-he-yi-chang-chu-li/"/>
      <url>/2023/05/23/java-tong-yi-jie-guo-fan-hui-he-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Java中，可以使用统一结果返回和异常处理的模式来处理方法的执行结果和异常情况。这种模式的目的是在代码中统一处理和管理方法的返回结果，以及捕获和处理可能发生的异常，使代码更加清晰、可读和可维护。</p><p>统一结果返回指的是将方法的执行结果封装在一个统一的数据结构中进行返回。通常使用一个包含两个字段的类，一个表示执行结果的状态（如成功、失败、异常等），另一个表示返回的数据或错误信息。这样可以减少方法返回值的种类，提高代码的可读性和可维护性。</p><p>异常处理是指通过捕获和处理异常，避免程序在运行过程中出现崩溃或不可预料的错误。Java中的异常处理机制使用了try-catch语句块。在try块中放置可能引发异常的代码，而在catch块中捕获并处理异常。通过使用catch块，可以在发生异常时采取相应的措施，如记录日志、返回错误信息或进行其他处理操作。</p><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>以SpringBoot项目为例，导入包</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>创建统一信息返回类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    返回码</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    返回提示</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    返回数据</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String msg<span class="token punctuation">,</span> T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    成功</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Result <span class="token function">success</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"成功"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Result <span class="token function">success</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//失败</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Result <span class="token function">error</span><span class="token punctuation">(</span>AppExceptionCodeMsg appExceptionCodeMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>appExceptionCodeMsg<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appExceptionCodeMsg<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>创建全局统一异常处理类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Result <span class="token function">exceptionHandler</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里先判断拦截到的Exception是不是我们自定义的异常类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">AppException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AppException appException <span class="token operator">=</span> <span class="token punctuation">(</span>AppException<span class="token punctuation">)</span> e<span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>appException<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appException<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果拦截的异常不是我们自定义的异常(例如：数据库主键冲突)</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> AppExceptionCodeMsg<span class="token punctuation">.</span>ERROR<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建一个枚举类型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这个枚举类中定义的都是跟业务有关的异常</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">enum</span> AppExceptionCodeMsg <span class="token punctuation">{</span>    <span class="token function">INVALID_CODE</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token string">"验证码无效"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USERNAME_NOT_EXISTS</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">"用户名不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">USER_CREDIT_NOT_ENOUTH</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span><span class="token string">"用户积分不足"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FAIL</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"服务器异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">UNAUTHORIZED</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"未认证（签名错误）"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FORBIDDEN</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token string">"禁止访问"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NOT_FOUND</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">"接口不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AUTH_ERROR</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token string">"鉴权登陆失败，请重新登录！"</span><span class="token punctuation">)</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code <span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg <span class="token punctuation">;</span>    <span class="token function">AppExceptionCodeMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建自定义的异常类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AppException</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg appExceptionCodeMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> appExceptionCodeMsg<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> appExceptionCodeMsg<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建一个controller,进行测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/file"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">demo1</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"succ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//抛业务相关的异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>USERNAME_NOT_EXISTS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"errcode"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>INVALID_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//检查用户积分是否足够，如果不够，就抛出异常</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"notenough"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AppException</span><span class="token punctuation">(</span>AppExceptionCodeMsg<span class="token punctuation">.</span>USER_CREDIT_NOT_ENOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis使用</title>
      <link href="/2023/05/22/redis-shi-yong/"/>
      <url>/2023/05/22/redis-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis（Remote Dictionary Server）是一个开源的内存数据存储系统，也被称为数据结构服务器。它提供了一个高性能的键值存储解决方案，并支持多种数据结构，如字符串、哈希表、列表、集合、有序集合等。</p><h2 id="特点和功能"><a href="#特点和功能" class="headerlink" title="特点和功能"></a>特点和功能</h2><ol><li>内存存储：Redis的主要特点是将数据存储在内存中，这使得它能够实现快速读写操作。它也支持将数据持久化到磁盘，以防止数据丢失。</li><li>高性能：由于数据存储在内存中，并使用了高效的数据结构和算法，Redis提供了快速的读写性能。它还支持并发操作，并具有高吞吐量。</li><li>数据结构丰富：Redis支持多种数据结构，如字符串、哈希表、列表、集合、有序集合等。这使得开发人员能够使用适当的数据结构来解决不同类型的问题。</li><li>发布/订阅：Redis支持发布/订阅模式，允许多个客户端订阅指定的频道并接收消息。这使得它非常适合构建实时消息系统和事件驱动的应用程序。</li><li>数据持久化：Redis提供了两种持久化方式：RDB（Redis Database）和AOF（Append-Only File）。RDB使用快照方式将数据保存到磁盘，AOF则记录每个写操作的日志。</li><li>分布式缓存：由于其高性能和可扩展性，Redis广泛用作分布式缓存系统。它可以通过设置过期时间和淘汰策略来管理缓存数据。</li><li>原子操作：Redis支持原子操作，即对数据的读写操作是原子性的。这使得它适用于需要保证数据一致性和并发控制的应用场景。</li><li>多语言支持：Redis支持多种编程语言，如Java、Python、Node.js等，提供了丰富的客户端库和API，便于开发人员使用。</li></ol><p>Redis在许多场景中被广泛应用，如缓存系统、会话存储、实时排行榜、消息队列、分布式锁等。它的简单性、高性能和丰富的功能使得它成为了一个流行的数据存储解决方案。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>以下是一些常用的Redis命令：</p><ol><li>数据操作：</li></ol><ul><li><code>SET key value</code>：设置指定键的值。</li><li><code>GET key</code>：获取指定键的值。</li><li><code>DEL key</code>：删除指定的键。</li><li><code>EXISTS key</code>：检查键是否存在。</li><li><code>KEYS pattern</code>：查找符合指定模式的键。</li><li><code>TTL key</code>：获取键的生存时间。</li></ul><ol><li>列表操作：</li></ol><ul><li><code>LPUSH key value1 value2</code>：将一个或多个值插入到列表的左侧。</li><li><code>RPUSH key value1 value2</code>：将一个或多个值插入到列表的右侧。</li><li><code>LPOP key</code>：移除并返回列表左侧的元素。</li><li><code>RPOP key</code>：移除并返回列表右侧的元素。</li><li><code>LLEN key</code>：获取列表的长度。</li></ul><ol><li>哈希操作：</li></ol><ul><li><code>HSET key field value</code>：设置哈希中指定字段的值。</li><li><code>HGET key field</code>：获取哈希中指定字段的值。</li><li><code>HDEL key field1 field2</code>：删除哈希中的一个或多个字段。</li><li><code>HGETALL key</code>：获取哈希中所有字段和值的列表。</li></ul><ol><li>集合操作：</li></ol><ul><li><code>SADD key member1 member2</code>：向集合添加一个或多个成员。</li><li><code>SMEMBERS key</code>：获取集合中的所有成员。</li><li><code>SREM key member1 member2</code>：从集合中移除一个或多个成员。</li></ul><ol><li>有序集合操作：</li></ol><ul><li><code>ZADD key score1 member1 score2 member2</code>：向有序集合添加一个或多个成员。</li><li><code>ZRANGE key start stop</code>：按照索引范围获取有序集合的成员。</li></ul><p>这些只是Redis的一些常见命令示例。Redis还有很多其他强大的功能和命令，如事务、发布/订阅、过期时间设置等。</p><h2 id="redis-conf配置文件解读"><a href="#redis-conf配置文件解读" class="headerlink" title="redis.conf配置文件解读"></a>redis.conf配置文件解读</h2><p>Redis的配置文件 <code>redis.conf</code> 包含了许多配置选项，用于控制Redis服务器的行为。下面是一些常见配置选项的解读：</p><ol><li><code>bind</code>：指定Redis服务器绑定的IP地址。默认为127.0.0.1，表示只允许本地访问。如果要允许远程访问，可以将其设置为0.0.0.0。</li><li><code>port</code>：指定Redis服务器监听的端口号。默认为6379。</li><li><code>requirepass</code>：设置Redis服务器的密码。如果启用了密码验证，客户端连接到服务器时需要提供密码才能进行操作。</li><li><code>maxclients</code>：指定允许同时连接到Redis服务器的最大客户端数量。</li><li><code>timeout</code>：指定客户端连接的超时时间，单位为秒。如果客户端在指定时间内没有发送任何请求，服务器将关闭连接。</li><li><code>logfile</code>：指定日志文件的路径。可以将Redis的日志记录到指定的文件中，方便进行故障排查和日志分析。</li><li><code>databases</code>：指定Redis服务器支持的数据库数量。默认为16个数据库，可以通过选择不同的数据库索引进行数据存储。</li><li><code>snapshotting</code>：配置RDB持久化和AOF持久化选项，包括<code>save</code>、<code>stop-writes-on-bgsave-error</code>、<code>rdbcompression</code>、<code>appendonly</code>等。</li><li><code>maxmemory</code>：设置Redis服务器使用的最大内存限制。可以根据需要进行配置，达到限制时可以使用淘汰策略来回收内存。</li><li><code>replication</code>：配置Redis服务器的主从复制，包括<code>slaveof</code>、<code>masterauth</code>、<code>replica-serve-stale-data</code>等选项。</li><li><code>security</code>：配置与安全相关的选项，如<code>protected-mode</code>、<code>rename-command</code>、<code>rename-config</code>等。</li></ol><p>这些只是Redis配置文件中的一部分选项，还有许多其他选项用于调整Redis服务器的行为和性能。你可以查阅Redis官方文档以获取更详细的配置选项和说明。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker的使用</title>
      <link href="/2023/05/22/docker-de-shi-yong/"/>
      <url>/2023/05/22/docker-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Docker是一个开源的容器化平台，用于构建、部署和运行应用程序。它提供了一种轻量级、可移植且自包含的容器化技术，使应用程序在不同的环境中具有一致的运行方式。</p><h2 id="特点和功能"><a href="#特点和功能" class="headerlink" title="特点和功能"></a>特点和功能</h2><ol><li>容器化：Docker利用容器化技术，将应用程序及其依赖项打包到一个独立的容器中。每个容器都是一个隔离的运行环境，具有自己的文件系统、网络和进程空间。容器化使得应用程序可以在不同的环境中快速部署和运行，而不受底层操作系统和硬件的限制。</li><li>轻量级和快速启动：Docker容器相对于传统的虚拟机更加轻量级，因为它们共享宿主机的操作系统内核。这使得容器的启动和停止过程非常快速，几乎可以在秒级完成。</li><li>可移植性：Docker容器可以在不同的环境中运行，包括开发、测试和生产环境。容器提供了一个一致的运行时环境，确保应用程序在不同的平台和操作系统上具有相同的行为。</li><li>高度可扩展：Docker容器可以很容易地进行水平扩展，通过创建和部署多个容器实例来处理高负载和大规模的应用程序。Docker还提供了一些工具和功能来管理容器集群，如Docker Swarm和Kubernetes。</li><li>镜像管理：Docker使用镜像来构建容器。镜像是一个只读的文件，包含了运行应用程序所需的所有文件和依赖项。Docker提供了一个集中的镜像仓库（Docker Hub）和本地镜像仓库，使镜像的创建、共享和管理变得简单。</li><li>开放和生态系统：Docker是一个开放的平台，有一个庞大的社区支持。它提供了丰富的工具、API和插件生态系统，使开发人员可以根据自己的需求扩展和定制Docker。</li></ol><p>Docker的出现极大地改变了应用程序的交付和部署方式。它简化了应用程序的打包、分发和管理过程，提高了开发和运维的效率，同时提供了更高的可移植性和可扩展性。</p><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><h3 id="1-卸载旧版本"><a href="#1-卸载旧版本" class="headerlink" title="1.卸载旧版本"></a>1.卸载旧版本</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><h3 id="2-安装所需要的包"><a href="#2-安装所需要的包" class="headerlink" title="2.安装所需要的包"></a>2.安装所需要的包</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils</code></pre><h3 id="3-设置镜像仓库"><a href="#3-设置镜像仓库" class="headerlink" title="3.设置镜像仓库"></a>3.设置镜像仓库</h3><pre class=" language-bash"><code class="language-bash">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库） yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）</code></pre><h3 id="4-选择docker版本并安装"><a href="#4-选择docker版本并安装" class="headerlink" title="4.选择docker版本并安装"></a>4.选择docker版本并安装</h3><pre class=" language-bash"><code class="language-bash">yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r</code></pre><h3 id="5-选择一个版本并安装："><a href="#5-选择一个版本并安装：" class="headerlink" title="5.选择一个版本并安装："></a>5.选择一个版本并安装：</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># yum install docker-ce-版本号</span>yum -y <span class="token function">install</span> docker-ce-18.03.1.ce</code></pre><h3 id="6-查看安装成功"><a href="#6-查看安装成功" class="headerlink" title="6.查看安装成功"></a>6.查看安装成功</h3><pre class=" language-bash"><code class="language-bash">docker info</code></pre><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230522103710528.png"/><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><h3 id="1-镜像相关命令："><a href="#1-镜像相关命令：" class="headerlink" title="1.镜像相关命令："></a>1.镜像相关命令：</h3><ul><li><p>docker images：列出本地的镜像列表。</p></li><li><p>docker pull <image_name>：从Docker镜像仓库中拉取镜像。</p></li><li><p>docker build -t <image_name> <dockerfile_path>`：根据Dockerfile构建镜像。</p></li><li><p>docker push <image_name>：将镜像推送到Docker镜像仓库。</p></li></ul><h3 id="2-容器相关命令："><a href="#2-容器相关命令：" class="headerlink" title="2.容器相关命令："></a>2.容器相关命令：</h3><ul><li><code>docker run &lt;image_name&gt;</code>：创建并运行一个基于镜像的容器。</li><li><code>docker ps</code>：列出当前正在运行的容器列表。</li><li><code>docker stop &lt;container_id/container_name&gt;</code>：停止一个容器的运行。</li><li><code>docker start &lt;container_id/container_name&gt;</code>：启动一个已停止的容器。</li><li><code>docker restart &lt;container_id/container_name&gt;</code>：重启一个容器。</li><li><code>docker rm &lt;container_id/container_name&gt;</code>：删除一个容器。</li><li><code>docker exec -it &lt;container_id/container_name&gt; &lt;command&gt;</code>：在运行的容器中执行命令。</li></ul><h3 id="3-网络相关命令："><a href="#3-网络相关命令：" class="headerlink" title="3.网络相关命令："></a>3.网络相关命令：</h3><ul><li><code>docker network ls</code>：列出所有的网络。</li><li><code>docker network create &lt;network_name&gt;</code>：创建一个自定义网络。</li><li><code>docker network connect &lt;network_name&gt; &lt;container_id/container_name&gt;</code>：将容器连接到指定的网络。</li><li><code>docker network disconnect &lt;network_name&gt; &lt;container_id/container_name&gt;</code>：从指定的网络中断开容器连接。</li></ul><h3 id="4-日志和信息相关命令："><a href="#4-日志和信息相关命令：" class="headerlink" title="4.日志和信息相关命令："></a>4.日志和信息相关命令：</h3><ul><li><code>docker logs &lt;container_id/container_name&gt;</code>：查看容器的日志。</li><li><code>docker inspect &lt;container_id/container_name&gt;</code>：获取容器的详细信息。</li></ul><h3 id="5-其他常用命令："><a href="#5-其他常用命令：" class="headerlink" title="5.其他常用命令："></a>5.其他常用命令：</h3><ul><li><code>docker-compose up</code>：使用Docker Compose启动应用程序。</li><li><code>docker-compose down</code>：使用Docker Compose停止并删除应用程序的容器。</li></ul><h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://3b6vt78q.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker</code></pre><h2 id="快速部署常用容器"><a href="#快速部署常用容器" class="headerlink" title="快速部署常用容器"></a>快速部署常用容器</h2><p>1.要使用Docker部署一个带密码的Redis容器，可以使用以下命令</p><pre class=" language-bash"><code class="language-bash">docker run -d --name redis -p 6379:6379 -e REDIS_PASSWORD<span class="token operator">=</span><span class="token operator">&lt;</span>your_password<span class="token operator">></span> redis</code></pre><p>2.部署MySQL</p><pre class=" language-bash"><code class="language-bash">docker run --name mysql  -p 3306:3306 -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token operator">&lt;</span>your_password<span class="token operator">></span> -d mysql</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker部署chatGPT</title>
      <link href="/2023/05/21/docker-bu-shu-chatgpt/"/>
      <url>/2023/05/21/docker-bu-shu-chatgpt/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于国内chatGPT是禁止国内访问，但是毕竟chatGPT的出现正在颠覆许多行业，所以网上就有大佬实现了网页版 ChatGPT ，后端优化，绕过 Cloudflare。由此，借鉴GitHub开源项目，搭建自己本地的网页版chatGPT。</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><pre class=" language-bash"><code class="language-bash">https://github.com/pengzhile/pandora.git</code></pre><h2 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h2><h3 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h3><pre class=" language-bash"><code class="language-bash">docker pull pengzhile/pandora</code></pre><h3 id="2-实例化容器"><a href="#2-实例化容器" class="headerlink" title="2.实例化容器"></a>2.实例化容器</h3><pre class=" language-bash"><code class="language-bash">docker run  -e PANDORA_CLOUD<span class="token operator">=</span>cloud -e PANDORA_SERVER<span class="token operator">=</span>0.0.0.0:8899 -p 8899:8899 -d pengzhile/pandora</code></pre><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230521220139615.png"/><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230521220617533.png"/><h3 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230521220939263.png"/><p>1.访问<a href="https://chat.openai.com/api/auth/session%E7%BD%91%E7%AB%99">https://chat.openai.com/api/auth/session网站</a></p><p>2.ctrl+f 搜索token</p><p>3.复制token的值，注意不要将双引号复制进去</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230521221300582.png"/>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量下载网页图片</title>
      <link href="/2023/05/20/pi-liang-xia-zai-wang-ye-tu-pian/"/>
      <url>/2023/05/20/pi-liang-xia-zai-wang-ye-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>requests</code>是一个流行的Python第三方库，用于简化HTTP请求的发送和处理。它提供了一组简洁而强大的API，使得发送HTTP请求和处理响应变得简单和直观。</p><h2 id="功能与特点"><a href="#功能与特点" class="headerlink" title="功能与特点"></a>功能与特点</h2><ol><li>简洁而直观的API：<code>requests</code>库的API设计简单而直观，易于使用和理解。它提供了一组类似于HTTP方法（如GET、POST、PUT、DELETE）的函数，使得发送不同类型的请求变得简单明了。</li><li>支持常见的HTTP操作：<code>requests</code>库支持发送各种类型的HTTP请求，包括GET、POST、PUT、DELETE等。您可以轻松地指定URL、请求头、查询参数、请求体和其他相关信息。</li><li>自动化的会话管理：<code>requests</code>库提供了会话（Session）对象，使得在多个请求之间共享会话状态和Cookie变得容易。这对于模拟登录、保持会话状态和处理带有身份验证的请求非常有用。</li><li>内置的身份验证支持：<code>requests</code>库支持各种身份验证机制，包括基本身份验证（Basic Authentication）、摘要身份验证（Digest Authentication）和OAuth等。您可以轻松地提供身份验证凭据以进行请求。</li><li>强大的响应处理功能：<code>requests</code>库提供了丰富的功能来处理HTTP响应。您可以访问响应的状态码、头部信息和内容。它还提供了方便的方法来处理JSON响应、文件下载和流式响应等。</li><li>自动化的重定向处理：<code>requests</code>库自动处理HTTP重定向，并提供了配置选项来控制重定向的行为。您可以选择允许或禁止重定向，并设置最大重定向次数。</li><li>文件上传和下载支持：<code>requests</code>库支持文件上传和下载操作。您可以轻松地发送文件作为请求体或下载文件到本地文件系统。</li><li>可定制的请求和会话配置：<code>requests</code>库提供了一系列配置选项，使您能够自定义请求和会话的行为。您可以设置超时时间、代理、SSL验证、连接池大小等。</li></ol><p>总之，<code>requests</code>库的特点在于其简单易用的API设计、丰富的功能和灵活性。它成为了Python开发人员发送和处理HTTP请求的首选工具之一，并在Web开发、数据爬取和API交互等场景中广泛应用。</p><h2 id="requests函数库的使用"><a href="#requests函数库的使用" class="headerlink" title="requests函数库的使用"></a>requests函数库的使用</h2><h3 id="1-发送GET请求"><a href="#1-发送GET请求" class="headerlink" title="1.发送GET请求:"></a>1.发送GET请求:</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># 使用requests发送一个get请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印相应信心</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h3 id="2-发送POST请求："><a href="#2-发送POST请求：" class="headerlink" title="2.发送POST请求："></a>2.发送POST请求：</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># 请求参数</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'pass'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 发送post请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印了响应的状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span></code></pre><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印响应对象的类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：&lt;class 'requests.models.Response'></span><span class="token comment" spellcheck="true"># 打印响应的状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：200</span><span class="token comment" spellcheck="true"># 打印响应内容的类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：&lt;class 'str'></span><span class="token comment" spellcheck="true"># 打印响应头内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印响应头中的Content-Type字段值</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印请求头内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将响应对象的编码设置为utf-8</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token comment" spellcheck="true"># 打印响应内容（文本形式）</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印响应的Cookies</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印响应内容（字节形式）</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将字节形式的响应内容解码为utf-8编码的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="批量下载图片实例："><a href="#批量下载图片实例：" class="headerlink" title="批量下载图片实例："></a>批量下载图片实例：</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> response<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token comment" spellcheck="true"># 定义了目标网页的URL和请求头信息</span>index_url <span class="token operator">=</span> <span class="token string">"https://sc.chinaz.com/tupian/fengjing_6.html"</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '</span>                  <span class="token string">'(KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># requests.get()函数发送GET请求并获取响应</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>index_url<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将响应内容的编码设置为UTF-8</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token comment" spellcheck="true"># 使用response.text获取响应内容的文本形式，并将其赋值给变量text</span>text <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token comment" spellcheck="true"># print(text)</span><span class="token comment" spellcheck="true"># etree.HTML()函数创建一个XPath解析对象selector，以便后续的XPath查询和数据提取</span>selector <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用XPath表达式 //div/img/@data-original 和 //div/img/@alt 分别从网页中提取图片链接和图片的alt属性值</span>image_urls <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/img/@data-original'</span><span class="token punctuation">)</span>image_alts <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/img/@alt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个文件写入函数 'wb' 是打开文件的模式参数，其中 'w' 表示写入模式，而 'b' 表示二进制模式</span><span class="token keyword">def</span> <span class="token function">write_to_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>        file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 保存哪个目录下        </span>directory <span class="token operator">=</span> <span class="token string">"C:\\Users\\37656\\Desktop\\新建文件夹\\image\\img\\pachong"</span><span class="token keyword">for</span> url<span class="token punctuation">,</span>alt <span class="token keyword">in</span>  zip<span class="token punctuation">(</span>image_urls<span class="token punctuation">,</span>image_alts<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"https:"</span><span class="token operator">+</span>url<span class="token punctuation">)</span>    image_content <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https:"</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>content    file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>directory<span class="token punctuation">,</span><span class="token string">'{}.jpg'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>alt<span class="token punctuation">)</span><span class="token punctuation">)</span>    write_to_file<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>image_content<span class="token punctuation">)</span></code></pre><h4 id="效果图如下："><a href="#效果图如下：" class="headerlink" title="效果图如下："></a>效果图如下：</h4><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230520224459763.png"/><h3 id="下载虎扑球员信息实例"><a href="#下载虎扑球员信息实例" class="headerlink" title="下载虎扑球员信息实例"></a>下载虎扑球员信息实例</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token comment" spellcheck="true"># 定义了目标网页的URL和请求头信息</span>index_url <span class="token operator">=</span> <span class="token string">"https://nba.hupu.com/stats/players"</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '</span>                  <span class="token string">'(KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36'</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>index_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>selectors <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>tags <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[@class="color_font1 bg_a"]/td'</span><span class="token punctuation">)</span>ids <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[1]'</span><span class="token punctuation">)</span>names <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[2]/a'</span><span class="token punctuation">)</span>teams <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[3]/a'</span><span class="token punctuation">)</span>scores <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[4]'</span><span class="token punctuation">)</span>hit_shoots <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[5]'</span><span class="token punctuation">)</span>hit_rates <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[6]'</span><span class="token punctuation">)</span>hit_three_points <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[7]'</span><span class="token punctuation">)</span>three_point_hit_rates <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[8]'</span><span class="token punctuation">)</span>hits_free_throws <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[9]'</span><span class="token punctuation">)</span>free_throw_percentages <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[10]'</span><span class="token punctuation">)</span>sessions <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[11]'</span><span class="token punctuation">)</span>minutes <span class="token operator">=</span> selectors<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//table/tbody/tr[position() >= 2]/td[12]'</span><span class="token punctuation">)</span><span class="token keyword">for</span> tag <span class="token keyword">in</span> tags<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>text<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> team<span class="token punctuation">,</span> score<span class="token punctuation">,</span> hit_shoot<span class="token punctuation">,</span> hit_rate<span class="token punctuation">,</span> hit_three_point<span class="token punctuation">,</span> three_point_hit_rate<span class="token punctuation">,</span> hits_free_throw<span class="token punctuation">,</span> free_throw_percentage<span class="token punctuation">,</span> session<span class="token punctuation">,</span> minute <span class="token keyword">in</span> \        zip<span class="token punctuation">(</span>ids<span class="token punctuation">,</span> names<span class="token punctuation">,</span> teams<span class="token punctuation">,</span> scores<span class="token punctuation">,</span> hit_shoots<span class="token punctuation">,</span> hit_rates<span class="token punctuation">,</span> hit_three_points<span class="token punctuation">,</span> three_point_hit_rates<span class="token punctuation">,</span> hits_free_throws<span class="token punctuation">,</span>            free_throw_percentages<span class="token punctuation">,</span> sessions<span class="token punctuation">,</span> minutes<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>text<span class="token punctuation">,</span> name<span class="token punctuation">.</span>text<span class="token punctuation">,</span> team<span class="token punctuation">.</span>text<span class="token punctuation">,</span> score<span class="token punctuation">.</span>text<span class="token punctuation">,</span> hit_shoot<span class="token punctuation">.</span>text<span class="token punctuation">,</span> hit_rate<span class="token punctuation">.</span>text<span class="token punctuation">,</span> hit_three_point<span class="token punctuation">.</span>text<span class="token punctuation">,</span>          three_point_hit_rate<span class="token punctuation">.</span>text<span class="token punctuation">,</span>          hits_free_throw<span class="token punctuation">.</span>text<span class="token punctuation">,</span> free_throw_percentage<span class="token punctuation">.</span>text<span class="token punctuation">,</span> session<span class="token punctuation">.</span>text<span class="token punctuation">,</span> minute<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h4 id="效果图如下：-1"><a href="#效果图如下：-1" class="headerlink" title="效果图如下："></a>效果图如下：</h4><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305301044826.png"/>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requests </tag>
            
            <tag> Python </tag>
            
            <tag> 批量图片下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式的使用</title>
      <link href="/2023/05/19/gong-han-mo-shi-de-shi-yong/"/>
      <url>/2023/05/19/gong-han-mo-shi-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="工厂模式的定义"><a href="#工厂模式的定义" class="headerlink" title="工厂模式的定义"></a>工厂模式的定义</h2><p>​        工厂模式（Factory Pattern）是 Java 中最常用的<a href="https://so.csdn.net/so/search?q=%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F&spm=1001.2101.3001.7020">设计模式</a>之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><p>​        工厂顾名思义就是创建产品，根据产品是具体产品还是具体工厂可分为简单工厂模式和工厂方法模式，根据工厂的抽象程度可分为<strong>工厂方法模式</strong>和<strong>抽象工厂模式</strong>。该模式用于封装和管理对象的创建，是一种创建型模式。本文从一个具体的例子逐步深入分析，来体会三种工厂模式的应用场景和利弊。</p><p>​        通过工厂模式，将创建产品实例的权利移交工厂，我们不再通过new来创建我们所需的对象，而是通过工厂来获取我们需要的产品。降低了产品使用者与使用者之间的耦合关系</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305251103205.png" /><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305191447001.png"/><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><p>Phone类：手机标准规范类(AbstractProduct)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>MiPhone类：制造小米手机（Product1）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"make xiaomi phone!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>IPhone类：制造苹果手机（Product2）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPhone</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"make iphone!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>PhoneFactory类：手机代工厂（Factory）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Phone <span class="token function">makePhone</span><span class="token punctuation">(</span>String phoneType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>phoneType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"MiPhone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>phoneType<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"iPhone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>演示</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>       PhoneFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Phone miPhone <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token string">"MiPhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// make xiaomi phone!</span>       IPhone iPhone <span class="token operator">=</span> <span class="token punctuation">(</span>IPhone<span class="token punctuation">)</span>factory<span class="token punctuation">.</span><span class="token function">makePhone</span><span class="token punctuation">(</span><span class="token string">"iPhone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// make iphone!</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="简单工厂模式总结"><a href="#简单工厂模式总结" class="headerlink" title="简单工厂模式总结"></a><strong>简单工厂模式总结</strong></h3><p>优点：</p><p>简单工厂模式，封装了创建对象的逻辑，完成了创建对象逻辑与业务代码逻辑的解耦。试想客户端是多个service层的文件，对比不使用简单工厂模式，当我们要改变产生对象的逻辑时，需要在多个service文件中找到这部分代码进行修改。在使用简单工厂模式后，只需要修改简单工厂中生成对象的逻辑即可，不需要修改业务代码。完成了解耦。</p><p>缺点：</p><p>每当具体产品类的抽象产品类增多时，会需要在简单工厂类中新增关于新增产品类对象生成的方法。当抽象产品类很多时，抽象工厂会很臃肿。并且在这种情形下，SimpleFactory类也不符合开闭原则。</p><h2 id="工厂方法模式-Factory-Method"><a href="#工厂方法模式-Factory-Method" class="headerlink" title="工厂方法模式(Factory Method)"></a>工厂方法模式(Factory Method)</h2><p>和简单工厂模式中工厂负责生产所有产品相比，工厂方法模式将生成具体产品的任务分发给具体的产品工厂，其UML<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E5%9B%BE&spm=1001.2101.3001.7020">类图</a>如下</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305191448577.png"/><h3 id="编码实现-1"><a href="#编码实现-1" class="headerlink" title="编码实现"></a>编码实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象工厂 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFactory</span> <span class="token punctuation">{</span>    IProduct <span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象产品 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IProduct</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体产品A */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductA</span> <span class="token keyword">implements</span> <span class="token class-name">IProduct</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是productA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体产品B */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductB</span> <span class="token keyword">implements</span> <span class="token class-name">IProduct</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是ProductB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 生产ProductA的具体工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryA</span> <span class="token keyword">implements</span> <span class="token class-name">IFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IProduct <span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 生产ProductB的具体工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryB</span> <span class="token keyword">implements</span> <span class="token class-name">IFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IProduct <span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arges<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生产ProductA</span>        FactoryA factoryA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactoryA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factoryA<span class="token punctuation">.</span><span class="token function">makeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="工厂方法模式适用场景"><a href="#工厂方法模式适用场景" class="headerlink" title="工厂方法模式适用场景"></a>工厂方法模式适用场景</h3><p>工厂方法模式和简单工厂模式虽然都是通过工厂来创建对象，他们之间最大的不同是——工厂方法模式在设计上完全完全符合“开闭原则”。</p><p>在以下情况下可以使用工厂方法模式：</p><p>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。</p><p>一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</p><p>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</p><p>使用场景：</p><p>日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。</p><p>数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。</p><p>设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</p><p>比如 Hibernate 换数据库只需换方言和驱动就可以</p><h3 id="工厂方法模式总结"><a href="#工厂方法模式总结" class="headerlink" title="工厂方法模式总结"></a>工厂方法模式总结</h3><p>从简单工厂模式的讲述知道：简单工厂的一个缺点在于，每当需要新增产品时，都需要修改负责生产产品的SimpleFactory类，违背了“开闭原则”，并且会使SimpleFactory类十分的臃肿。而使用工厂方法模式后，当新增ProductC时，只需要对应创建具体产品类ProductC和负责生产ProductC的具体工厂FactoryC即可。符合“开闭原则”，便于扩展。</p><p>它的缺点在于：</p><p>（1）类的个数容易过多，增加复杂度</p><p>（2）实现抽象工厂接口的具体工厂只能生产出一种产品（可以用抽象工厂模式解决）</p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305251141998.png"/><h3 id="编码实现-2"><a href="#编码实现-2" class="headerlink" title="编码实现"></a>编码实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象工厂 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    Basketball <span class="token function">makeBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Football <span class="token function">makeFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象产品族；篮球 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Basketball</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象产品族：足球 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Football</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sayFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体产品：李宁篮球 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiningBasketball</span> <span class="token keyword">implements</span> <span class="token class-name">Basketball</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是李宁篮球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** * 具体产品：李宁足球 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiningFootball</span> <span class="token keyword">implements</span> <span class="token class-name">Football</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是李宁足球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** * 具体产品：安踏篮球 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AntaBasketball</span> <span class="token keyword">implements</span> <span class="token class-name">Basketball</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是安踏篮球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** * 具体产品：安踏足球 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AntaFootball</span> <span class="token keyword">implements</span> <span class="token class-name">Football</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"我是安踏足球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体工厂，负责生产李宁篮球，李宁足球 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiningFactoy</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Basketball <span class="token function">makeBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LiningBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Football <span class="token function">makeFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LiningFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/** * 具体工厂，负责生产安踏篮球，安踏足球 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AntaFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Basketball <span class="token function">makeBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AntaBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Football <span class="token function">makeFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AntaFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生产李宁篮球和安踏足球</span>        LiningFactoy liningFactoy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LiningFactoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AntaFactory antaFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntaFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         liningFactoy<span class="token punctuation">.</span><span class="token function">makeBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayBasketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        antaFactory<span class="token punctuation">.</span><span class="token function">makeFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayFootball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="抽象工厂模式适用场景"><a href="#抽象工厂模式适用场景" class="headerlink" title="抽象工厂模式适用场景"></a>抽象工厂模式适用场景</h3><p>抽象工厂模式和工厂方法模式一样，都符合开闭原则。但是不同的是，工厂方法模式在增加一个具体产品的时候，都要增加对应的工厂。但是抽象工厂模式只有在新增一个类型的具体产品时才需要新增工厂。也就是说，工厂方法模式的一个工厂只能创建一个具体产品。而抽象工厂模式的一个工厂可以创建属于一类类型的多种具体产品。工厂创建产品的个数介于简单工厂模式和工厂方法模式之间。</p><p>在以下情况下可以使用抽象工厂模式：</p><p>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。</p><p>系统中有多于一个的产品族，而每次只使用其中某一产品族。</p><p>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</p><p>系统结构稳定，不会频繁的增加对象。</p><p>“开闭原则”的倾斜性</p><p>在抽象工厂模式中，增加新的产品族很方便，但是增加新的产品等级结构很麻烦，抽象工厂模式的这种性质称为<strong>“开闭原则”的倾斜性</strong>。“开闭原则”要求系统对扩展开放，对修改封闭，通过扩展达到增强其功能的目的，对于涉及到多个产品族与多个产品等级结构的系统，其功能增强包括两方面：</p><p>增加产品族：对于增加新的产品族，工厂方法模式很好的支持了“开闭原则”，对于新增加的产品族，只需要对应增加一个新的具体工厂即可，对已有代码无须做任何修改。</p><p>增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，违背了“开闭原则”。</p><p>正因为抽象工厂模式存在“开闭原则”的倾斜性，它以一种倾斜的方式来满足“开闭原则”，为增加新产品族提供方便，但不能为增加新产品结构提供这样的方便，因此要求设计人员在设计之初就能够全面考虑，不会在设计完成之后向系统中增加新的产品等级结构，也不会删除已有的产品等级结构，否则将会导致系统出现较大的修改，为后续维护工作带来诸多麻烦。</p><h3 id="抽象工厂模式总结"><a href="#抽象工厂模式总结" class="headerlink" title="抽象工厂模式总结"></a>抽象工厂模式总结</h3><p>抽象工厂模式是工厂方法模式的进一步延伸，由于它提供了功能更为强大的工厂类并且具备较好的可扩展性，在软件开发中得以广泛应用，尤其是在一些框架和 API 类库的设计中，例如在 Java 语言的 AWT（抽象窗口工具包）中就使用了抽象工厂模式，它使用抽象工厂模式来实现在不同的操作系统中应用程序呈现与所在操作系统一致的外观界面。抽象工厂模式也是在软件开发中最常用的设计模式之一。</p><p>优点：</p><p>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易，所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。</p><p>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。</p><p>增加新的产品族很方便，无须修改已有系统，符合“开闭原则”。</p><p>缺点：</p><p>增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这显然会带来较大的不便，违背了“开闭原则”。</p><p>工厂模式的退化</p><p>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式；当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。</p><p>转载至<a href="https://blog.csdn.net/m0_65260253/article/details/127909823">https://blog.csdn.net/m0_65260253/article/details/127909823</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picgo-gitee搭建个人图床</title>
      <link href="/2023/05/18/picgo-gitee-da-jian-ge-ren-tu-chuang/"/>
      <url>/2023/05/18/picgo-gitee-da-jian-ge-ren-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在搭建个人博客时，其中markdown语法作为编写博客的主要语言。但由于本地编写时加入的图片只能在本地显示，为了是博客上传的GitHub或者gitee上托管运行依然能够正常显示图片。这里我们需要用到图床。图床（Image Hosting Service）是一种在线服务，用于存储和托管图片。它允许用户将自己的图片上传到互联网上，并获取图片的链接，以便在网页、博客或论坛等地方分享或嵌入图片。图床的解决方案也非常多，网上比较多的解决方案除了免费图床（不稳定）以外就是采用对象存储（OSS）在或者搭建自己的云服务器图床（这个我会在宁外一篇博客讲诉）。我这里采用的是Gitee搭建自己的图床。好处是免费，国内服务器，无需科学上网 环境。</p><h2 id="gitee上创建存放博客的仓库"><a href="#gitee上创建存放博客的仓库" class="headerlink" title="gitee上创建存放博客的仓库"></a>gitee上创建存放博客的仓库</h2><h3 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230517152517240.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230517152835914.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230517153030763.png"/><p>注意：一定的开源，不然后面图片上传成功了，但是却使用不了</p><h3 id="私人令牌申请"><a href="#私人令牌申请" class="headerlink" title="私人令牌申请"></a>私人令牌申请</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/image-20230517153418459.png"/><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171702911.png" alt="image-20230517170252529"></p><h2 id="安装picgo"><a href="#安装picgo" class="headerlink" title="安装picgo"></a>安装picgo</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0">https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0</a></p><p>1.下载如下包</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171645977.png" alt="image-20230517164524066"></p><p>2.默认安装即可</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305180934165.png"/><h3 id="上传环境配置"><a href="#上传环境配置" class="headerlink" title="上传环境配置"></a>上传环境配置</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171700432.png"/><ul><li><p>repo:用户名/仓库名，或者 gitee.com:后面的部分</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171728434.png"/></li><li><p>branch:分支,写master即可</p></li><li><p>token:私人令牌生成的密钥</p></li><li><p>path:图片上传到 Gitee 存储的位置,可以写 / 代表在根目录存储,也可以在仓库创建文件夹,这里写文件夹的名字</p></li></ul><h3 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h3><p>设置gitee上传</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171710151.png"/><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171711396.png"/><h2 id="Typora中使用"><a href="#Typora中使用" class="headerlink" title="Typora中使用"></a>Typora中使用</h2><h3 id="在picgo中查看上传图片"><a href="#在picgo中查看上传图片" class="headerlink" title="在picgo中查看上传图片"></a>在picgo中查看上传图片</h3><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171723155.png"/><h3 id="图片的使用"><a href="#图片的使用" class="headerlink" title="图片的使用"></a>图片的使用</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>使用Markdown方式</p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171714096.png"/><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171714096.png" alt="image-20230517171437064"></p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171720318.png" alt="image-20230517172049470"></p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>使用HTML方式</p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171723155.png" alt="image-20230517172326123"></p><p><img src="https://www.yangpengsky.top:9000/myblog/images/2023/05/202305171721032.png" alt="image-20230517172134582"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2023/05/18/typora-vue-theme-zhu-ti-jie-shao/"/>
      <url>/2023/05/18/typora-vue-theme-zhu-ti-jie-shao/</url>
      
        <content type="html"><![CDATA[<h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx的安装</title>
      <link href="/2023/05/18/nginx-de-an-zhuang/"/>
      <url>/2023/05/18/nginx-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nginx（发音为”engine X”）是一个高性能的开源Web服务器和反向代理服务器。它最初由俄罗斯的工程师Igor Sysoev开发，第一个公开发布是在2004年。Nginx因其出色的性能、稳定性和高度可扩展性而广受欢迎</p><h2 id="特点与功能"><a href="#特点与功能" class="headerlink" title="特点与功能"></a>特点与功能</h2><ol><li>高性能：Nginx采用异步、事件驱动的架构，能够处理大量并发连接而不会消耗过多的系统资源。</li><li>反向代理：Nginx可以作为反向代理服务器，将客户端的请求转发到后端的多个服务器上，实现负载均衡和高可用性。</li><li>静态文件服务：Nginx能够高效地提供静态文件服务，如图片、CSS和JavaScript文件，减轻后端服务器的负载。</li><li>动态内容处理：Nginx可以与后端应用服务器集成，如PHP、Java等，以处理动态内容请求。</li><li>缓存加速：Nginx支持缓存机制，能够将经常请求的内容缓存到内存中，提高响应速度。</li><li>URL重写和重定向：Nginx提供了强大的URL重写和重定向功能，可以对URL进行灵活的处理和转发。</li><li>SSL/TLS支持：Nginx能够处理HTTPS连接，支持SSL/TLS协议，保护数据的安全性。</li><li>可扩展性：Nginx的设计模块化，支持丰富的第三方模块和插件，可以根据需求进行定制和扩展。</li></ol><p>由于其卓越的性能和可靠性，Nginx被广泛用于大型互联网公司、高流量网站、应用程序部署和负载均衡等场景。它是一个轻量级、灵活且可靠的服务器软件，成为现代Web架构中不可或缺的一部分。</p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> <span class="token function">wget</span> http://nginx.org/download/nginx-1.18.0.tar.gz</code></pre><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> gcc pcre-devel zlib-devel openssl openssl-devel</code></pre><h3 id="安装Nginx-1"><a href="#安装Nginx-1" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#解压</span><span class="token function">tar</span> -zxvf nginx-1.18.0.tar.gz<span class="token comment" spellcheck="true">#进入NG目录</span><span class="token function">cd</span> ./nginx-1.18.0</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#配置</span>./configure --prefix<span class="token operator">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</code></pre><p>这条命令是用于配置 Nginx 编译选项的命令，通过指定不同的选项来启用或禁用特定的模块和功能。下面是对每个选项的解读：</p><ul><li><code>--prefix=/usr/local/nginx</code>：指定 Nginx 安装的目录前缀为 <code>/usr/local/nginx</code>。这意味着编译完成后，Nginx 将安装在该路径下。</li><li><code>--with-http_stub_status_module</code>：启用了 HTTP Stub Status 模块。该模块提供了一个简单的状态页面，可以查看 Nginx 的基本运行状态，如当前活动的连接数、请求处理统计等。</li><li><code>--with-http_ssl_module</code>：启用了 HTTP SSL 模块。该模块提供了对 HTTPS 协议的支持，使 Nginx 能够处理安全的加密连接，并支持 SSL/TLS 协议。</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#编译</span><span class="token function">make</span><span class="token comment" spellcheck="true">#安装</span><span class="token function">make</span> <span class="token function">install</span></code></pre><h2 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h2><h3 id="启动-amp-停止"><a href="#启动-amp-停止" class="headerlink" title="启动&amp;停止"></a>启动&amp;停止</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动</span>/usr/local/nginx/sbin/nginx<span class="token comment" spellcheck="true">#重新加载配置</span>/usr/local/nginx/sbin/nginx -s reload<span class="token comment" spellcheck="true">#停止</span>/usr/local/nginx/sbin/nginx -s stop</code></pre><h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><ul><li>以特定目录下的配置文件启动：nginx -c /特定目录/nginx.conf</li><li>重新加载配置：nginx -s reload 执行这个命令后，master进程会等待worker进程处理完当前请求，然后根据最新配置重新创建新的worker进程，完成Nginx配置的热更新。</li><li>立即停止服务：nginx -s stop</li><li>从容停止服务：nginx -s quit 执行该命令后，Nginx在完成当前工作任务后再停止。</li><li>检查配置文件是否正确：nginx -t</li><li>检查特定目录的配置文件是否正确：nginx -t -c /特定目录/nginx.conf</li></ul><h2 id="配置systemd方式管理NG"><a href="#配置systemd方式管理NG" class="headerlink" title="配置systemd方式管理NG"></a>配置systemd方式管理NG</h2><pre class=" language-bash"><code class="language-bash">vim /etc/systemd/system/nginx.service</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>The Nginx HTTP ServerAfter<span class="token operator">=</span>network.target remote-fs.target nss-lookup.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Type<span class="token operator">=</span>forkingPIDFile<span class="token operator">=</span>/usr/local/nginx/logs/nginx.pidExecStart<span class="token operator">=</span>/usr/local/nginx/sbin/nginxExecReload<span class="token operator">=</span>/usr/local/nginx/sbin/nginx -s reloadExecStop<span class="token operator">=</span>/usr/local/nginx/sbin/nginx -s stopPrivateTmp<span class="token operator">=</span>true<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.target</code></pre><h3 id="启动-amp-停止-1"><a href="#启动-amp-停止-1" class="headerlink" title="启动&amp;停止"></a>启动&amp;停止</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><pre class=" language-shell"><code class="language-shell">systemctl start nginx.service　#（启动nginx服务）systemctl stop nginx.service　#（停止nginx服务）systemctl enable nginx.service #（设置开机自启动）systemctl disable nginx.service #（停止开机自启动）systemctl status nginx.service #（查看服务当前状态）systemctl restart nginx.service　#（重新启动服务）systemctl list-units --type=service #（查看所有已启动的服务）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/18/hello-world/"/>
      <url>/2023/05/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
          <category> 子分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
